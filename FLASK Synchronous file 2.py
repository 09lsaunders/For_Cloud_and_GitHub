from flask import *
import pandas as pd
import sqlite3
import numpy as np

from array import *
from sklearn import linear_model
from sklearn.metrics import r2_score, mean_squared_error

from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LinearRegression

import datetime


############################### below is the code which gives the option to allow print statements, devnull is off by default in turn enabling print statements
import sys, os

#sys.stdout = open(os.devnull, 'w')
sys.stdout = sys.__stdout__


app = Flask(__name__)

@app.route('/', methods=['POST', 'GET'])
def line():
    if request.method == 'POST':

        testbutton =  request.form['submit']
        print(testbutton)

        #testadjust = request.form['adjustsubmit']

        if testbutton == 'load':
                datatype = request.form.get('Dataset')
                print(datatype)
                


                if datatype == 'EMS':
                    print(datatype)

                    EMStitlefix = ["101|The Croft Electricity", "233|The Croft Water", "234|The Croft Gas", "1|Campus Services", "2|Regional Network and Services", "3|Regional Campus Co-Lo", "4|Campus Network", "5|Building Coms B", "6|Campus Servers", "7|Regional Networking Services", "8|Regional and Campus Co Lo", "24|Campus Network", "25|Building Coms A", "26|Incomer No 2 From LV2 ESS", "27|Inc No1 ESS Sw", "28|LV2 ESS Main M", "29|Ess Mech Control Centre", "30|DB-E-M1", "31|DB-E-M2", "96|Chiller No 2", "97|LV3-NE Supply", "100|ISS Total", "132|LV2-ESS Supply", "133|Chiller No 1", "264|Future UPS", "267|UPSLV-US-1", "268|UPSLV-US-3", "269|UPSLV-US-4", "374|UPS2A", "266|ISS Water Meter", "265|ISS Heat Meter","9|Chaplaincy Centre", "10|Chaplaincy Centre Kitchen", "14|Chaplaincy Centre Immersion Heater","11|Chaplaincy Centre", "12|Chaplaincy Centre Kitchen", "13|Chaplaincy Centre Heat meter", "200|Bowland Annexe Electricity", "43|Bowland Annexe Water", "201|Bowland Annexe Heating", "44|Great Hall Immersion Heater 1", "45|Great Hall Immersion Heater 2", "197|Great Hall Electricity", "211|No 1 Transformer Sub 3 Great Hall", "213|No 2 Transformer Sub 3 Great Hall","41|Great Hall Water", "198|Great Hall Gas", "42|Great Hall Heating","37|Conference Centre Electricity","38|Conference Centre Natural Gas","33|Infolab Electricity", "35|Chiller 1", "36|Chiller 2", "39|Transformer Sub 6 Info Lab 1", "40|Transformer Sub 6 Info Lab 2","34|Water Meter","32|Plant Room Natural Gas", "15|Bowland Hall 1-7 Electricity", "515|Bowland Hall 8-15 Electricity", "16|Bowland Hall 1-7 Water", "516|Bowland Hall 8-15 Water","215|Bowland Hall 1-15 Gas", "47|IENS Phase 1 Electricity", "64|IENS Phase 2 Electricity","17|IENS Phase 2 Water","281|IENS Phase 1 Natural Gas", "19|IENS Phase 2 Natural Gas","21|Biology Basement No 1 Immersion Heater", "22|Biology Basement No 2 Immersion Heater", "23|Biology Basement Animal Rooms Immersion Heater", "46|IENS Phase 1 Electricity", "51|Biology Phase 1 Immersion Heater 1", "52|Biology Phase 1 Immersion Heater 2", "85|Transformer No. 1 Sub 8 LEC 1", "87|Bus Bar Greenhouses 1", "88|Bus Bar Greenhouses 2","48|IENS Phase 1 Water","49|IENS Phase 1 Gas","50|IENS Phase 1 Heat Meter", "18|IENS Phase 2 Heat Meter","86|LEC 3 No. 1 Transformer No. 10 Sub Station","20|LEC 3 Water", "282|LEC 3 Natural Gas","53|Transformer Sub 5 Grizedale College 1", "54|Transformer Sub 5 Grizedale College 2", "57|Grizedale Town House 1", "60|Grizedale Town House 2", "273|Grizedale Bar Electricity", "276|Grizedale Laundry", "279|Grizedale Laundry Lighting","274|Grizedale Bar Water", "277|Grizedale Laundry Water", "514|Grizedale Residences Water","275|Grizedale Bar Gas", "278|Grizedale Laundry Gas", "513|Grizedale Residences Natural Gas","280|Grizedale Bar 101-108","55|Management Phase 1 Electricity", "56|Management Extension Electricity", "107|Management Immersion Heater No 1", "108|Management Immersion Heater No 2", "129|Management Phase 2 Adj Lift 1 Electricity","139|Management School Water","106|Management School Phase 1 Heat Meter","58|Pendle Main 2","59|Charles Carter Building", "298|Charles Carter A Floor A1 Total", "299|Charles Carter A Floor A1 Lighting", "300|Charles Carter A Floor A2 Total", "301|Charles Carter A Floor A2 Lighting", "302|Charles Carter B Floor B1 Total", "303|Charles Carter B Floor B1 Lighting", "304|Charles Carter B Floor B2 Total", "305|Charles Carter B Floor B2 Lighting", "306|Charles Carter Plant Room DB", "307|Charles Carter Comms Plant Room", "308|Charles Carter Plant Room Total", "310|Charles Carter Mechanical Plant", "325|Charles Carter C Floor C1 Total", "326|Charles Carter C Floor C1 Lighting", "327|Charles Carter C Floor C2 Total", "328|Charles Carter C Floor C2 Lighting", "329|Charles Carter D Floor D1 Total", "330|Charles Carter D Floor D1 Lighting", "331|Charles Carter D Floor D2 Total", "332|Charles Carter D Floor D2 Lighting","311|Charles Carter Water Meter","309|Charles Carter Heat Meter","61|Lonsdale Laundrette Electricity","62|Lonsdale Laundrette Water","63|Lonsdale Laundrette Gas","65|CHP Electricity Input", "66|CHP Output Gen", "69|Biomass Boiler Electricity", "181|Boiler House CHP Gas","67|CHP Heat Meter", "68|Biomass Heat Meter","182|Boiler Gas", "184|Firm Gas", "185|3 Gas Boilers","70|Post Graduate Statistics Building Electricity","71|Post Graduate Statistics Building Water","72|Post Graduate Statistics Building Heat Meter","73|Maintenance Workshop 2 Electricity","151|Maintenance Workshops Water","316|Maintenance Workshops Heat Meter","74|Anne Helme Garage Electricity","75|Anne Helme Garage Water Meter","76|County South Flats 5, 6, 7", "77|County South DB D2 Power", "78|County South DB D2 Lighting", "79|County South DB C2 Power", "80|County South DB C2 Lighting", "116|County South DB B1 Power", "117|County South DB B1 Lighting", "118|County South DB C1 Power", "119|County South DB C1 Lighting", "120|County South DB D1 Power", "121|County South DB D1 Lighting", "171|County South Flats 1, 2, 3, 4", "172|County South DB D3 Power", "173|County South DB D3 Lighting", "174|County South DB C3 Power", "175|County South DB C3 Lighting", "176|County South DB B3 Power", "177|County South DB B3 Lighting", "210|County South Block 75 - 77", "214|County Town Houses and County South No. 3 Substation", "223|County South C20 Modem", "238|County South BD D2 Power", "239|County South BD D2 Lighting", "242|County South Plant Room Lighting", "243|County South Plant Room Power", "244|County South Plant Room", "246|County South IAS -Old Supply", "335|County South BB01 Riser", "336|County South BB02 Riser", "337|County South BB03 Riser", "338|County South LT Plant Room", "339|County South C20 Modem Comm DB", "340|County South Plant Room Panel", "341|County South DB A1 Power", "342|County South DB A1 Lighting", "343|County South Laundrette DB", "344|County South Existing Lift", "345|County South DB 2 Room A62", "346|County South FASS", "347|County South DB LK Room 107", "348|County South DB Ext Mech Power", "349|County South Main Incomer", "372|County South Kitchen Immersion Heater", "373|County South Laundry Immersion Heater","240|County South Laundrette Water", "334|County South Residences 75 - 77 Water","241|County South Laundrette Gas", "333|County South Residences 75 - 77 Gas","245|County South Plant Room Heat Meter","236|Fylde Residences Electricity","81|Fylde Lytham Water", "209|Fylde Pilling Water","183|Furness and Fylde Residence Gas","82|Uni Travel Corr Electricity", "83|Uni Travel Front Electricity","84|Uni Travel Water","89|Faraday Lifeboat Electricity", "91|Chiller No 1", "92|Chiller No 2", "93|MCCP Meter", "158|Central Services Immersion Heater", "155|DB LCP", "156|UPS Output", "157|UPS Output Rectifier","90|Faraday Building Gas","94|Bowland Ash Electricity", "205|Bowland Ash Immersion Heater 1", "204|Bowland Ash Immersion Heater 2", "206|Bowland Ash Muslim Prayer Room","199|Bowland Ash Water","203|Bowland Ash Gas", "202|Bowland Ash Heating", "95|Non Ess (MCCN)", "98|LV4-NE Supply", "99|Incomer No. 2", "130|Chiller No 3 Fut", "131|Standby Generator","102|Bowland North Electricity","103|Bowland North Water","104|Bowland North Heat Meter","235|No 1 Transformer SS Furness Residence", "237|Furness Residence Electricity", "286|Furness Perimeter Residence Electricity", "289|Furness Perimeter Residence Immersion Heater", "105|Furness Hawkshead Water", "208|Furness Colton Water", "287|Furness Perimeter Residence Water","288|Furness Perimeter Residence Heat Meter","109|Charity Shop Electricity Meter","110|Charity Shop Water Meter","111|LUSU Housing Electricity Meter","112|John Creed 1", "135|John Creed Immersion Heater","113|John Creed Residence 3 Blocks Water", "517|John Creed Residence 4 Blocks Water","134|John Creed Residences Heat Meter","216|LEC Workshops NE Corner Electricity","114|LEC Remote Workshop Water","115|LEC Remote Workshop Gas","122|Security Office Electricity","123|Robinsons Left Electricity Meter", "124|Robinsons Right Electricity Meter", "125|Robinsons Water Meter","187|Bowland Tower South and East Wing Electricity", "126|Bowland Tower Ent DB", "127|Bowland Tower MCCP Panel", "128|Bowland Tower Sprinkler", "190|Bowland Tower Dis Board", "192|Bowland Tower Plantroom Input 7", "262|Bowland Tower Electric", "394|Bowland Tower Floor D & E Lighting Electric", "395|Bowland Tower Floor D & E Total Electricity", "396|Bowland Tower Floor F, G & H Lighting Electric", "397|Bowland Tower Floor F, G & H Total Electricity", "398|Bowland Tower Floor J, K & L Lighting Electric", "399|Bowland Tower Floor J, K & L Total Electricity", "400|Bowland Tower Floor M, N & O Lighting Electric", "401|Bowland Tower Floor M, N & O Total Electricity", "417|Bowland Tower RmB41comms Electricity", "418|Bowland Tower E Flat16/17 Electricity", "419|Bowland Tower South Flat 18 Electricity", "420|Bowland Tower South Flat 19/20 Electricity", "421|Bowland Tower East B Floor Electricity", "422|Bowland Tower East C Floor Electricity", "423|Bowland Tower South B Floor Electricity", "424|Bowland Tower South C Floor Electricity","263|Bowland Tower Water", "162|Bowland Tower Water 2", "375|Bowland Tower Slaid Hot Water", "376|Bowland Tower Hot Water F","160|Bowland Tower South and East Wing Heating", "377|Bowland Tower Heating","136|Furness College Electricity", "460|Flat 1 Comsumer Unit", "461|Flat 2 Comsumer Unit", "462|Flat 3 Comsumer Unit", "463|Flat 4 Comsumer Unit", "382|Flat 5 Comsumer Unit", "383|Flat 6 Comsumer Unit", "384|Flat 7 Comsumer Unit", "385|Flat 8 Comsumer Unit", "407|Power Section DB LCDB 021", "408|Lighting Section DB LCDB 021", "409|Power Section DB NDB 02", "410|Lighting Section DB NDB 02", "411|Power Section DB LBDB 021", "412|Lighting Section DB LBDB 021", "413|Power Section DB NDB 01", "414|Lighting Section DB NDB 01", "415|Power Section DB LADB 021", "416|Lighting Section DB LADB 021", "437|A Floor Electricity", "438|A Floor Electricity Check", "444|SW Electrical Bus Bar", "445|NW Electrical Bus Bar", "446|South Block DB DB 4X", "447|Green Room DB", "448|Computer Shop", "449|The Venue", "450|NE Plant Room DB", "468|Foyer Area D8 GDB 003", "469|North East Lift", "470|Power DB LBDB 011", "471|Power Foyer DB GDB 003", "473|Lighting Foyer DB GDB 003", "474|Power DB LADB 011", "475|Lighting DB LADB 011", "431|SW Bus Bar", "432|NE Bus Bar", "433|South Bl DB 4X", "434|NE Plant Room DB", "439|NW Pass Lift", "440|SCR TV Room", "441|Bar Dis Board ", "442|Switch Room Dis B", "443|OSS Walk Lights", "452|Pwr LB DB 11", "453|Light LB DB 11", "454|PWR Foyer GDB 3", "455|Lgt Foyer GDB 3", "456|PWR LA DB 3", "457|Light LA DB 11", "458|CW DHW System", "472|NrthBL CFlrNDB02","464|Flat 1 Water Meter", "465|Flat 2 Water Meter", "466|Flat 3 Water Meter", "467|Flat 4 Water Meter", "402|Flat 6 Water Meter", "403|Flat 7 Water Meter", "436|Pressurisation Make up Water", "476|Cold Water Meter for DHWS", "477|Main Water Meter", "459|College 140 Main Water IN", "378|Flat 1 Heat Meter", "379|Flat 2 Heat Meter", "380|Flat 3 Heat Meter", "381|Flat 4 Heat Meter", "404|Flat 5 Heat Meter", "405|Flat 6 Heat Meter", "406|Flat 7 Heat Meter", "451|LPHW DHWS Heat Meter", "435|College 140 DHWS Heat Meter","142|Engineering Immersion Heater","141|Engineering Water","138|Engineering Gas Meter","137|Engineering Heat Meter","143|Barker House Farm Electricity","144 |Barker House Farm Water","145|Barker House Farm Natural Gas","207|Bailrigg House Electricity", "147|Bailrigg House Water", "146|Bailrigg House Gas", "148|Cartmel Laundrette Electricity","149|Cartmel Laundrette Water","150|Cartmel Laundrette Gas","229|Whewell Building Electricity","230|Whewell Building Water","217|University House Phase 1 Electricity", "218|University House Phase 2 Electricity", "219|University House Lift D Floor Electricity", "222|University House Immersion Hater Electricity","221|University House Water","220|University House Heat Meter", "247|Sultans Electricity","283|Sultans Water","284|Sultans Gas","285|Ketchup", "227|No 1 Transformer Sub 7 Alex Park", "228|No 2 Transformer Sub 7 Alex Park","290|Steam Room Electricity", "291|AHU 1", "292|AHU 2", "293|Floating Floor", "294|MCCP 1", "295|MCCP 2", "296|Passenger Lift", "297|Sauna", "351|Emergency Light", "352|BasePlRmlgs 01-L", "353|BasePlRm P DB01P", "354|Wet CH L DB-02-L", "355|Wet Ch P DB-02-P", "356|DB External", "357|DB 5", "358|Main Electric Sub No 12 Sports Centre", "359|DB 6", "360|DB-07-P", "361|Comms DB", "362|Generator", "363|Pool Filter", "425|Ground Floor Dry Lighting", "426|Ground Floor Dry Power", "427|Ground Floor Fitness Lighting", "428|Ground Floor Fitness Power", "429|Roof Lighting", "430|Roof Power", "386|Sports Centre Water", "140|Old Sports Centre Water","387|Main Hall Gas Meter", "388|Sports Centre Gas Boilers", "389|Main Gas Meter across the Road","390|CT Heating DHW Primary", "391|MTHW Heating Primary", "392|CT Heating Secondary", "393|VT Heating Secondary","224|Pre School Electricity","225|Pre School Water","226|Pre School Gas","169|Post Office Electricity", "170|Post Office Water","167|Diggles Electricity","168|Diggles Water","180|Orange Telephones Electricity","153|MCCP Electric", "154|3 Boilers H Out ", "312|Circulation Pump No 1", "313|Circulation Pump No 2", "314|Circulation Pump No 3", "315|Circulation Pump No 4", "178|No 1 Transformer Sub 1 Energy Centre", "179|No 2 Transformer Sub 1 Energy Centre", "317|Water Meter RHS Rear", "318|Water Meter LHS Rear","152|Energy Centre Oil","364|DB 1A", "365|DB 1B", "319|DB 1C", "366|DB 2A", "367|DB 2B", "368|DB 3A", "369|DB 3B", "320|BMS Panel", "321|Lift Electricity", "322|Chiller Units", "370|Dimmer Rack No 1", "371|Dimmer Rack No 2", "212|Total of LEC Workshops and LICA","324|LICA Water","323|LICA Heat Meter","270|Lancaster House Electric","271|Lancaster House Hotel Water","272|Lancaster House Hotel Gas","231|County Town Houses Water","232|County Town Houses Gas Meter","194|George Fox Electricity", "258|B27 Immersion Heater Ground Floor", "259|B27 Immersion Heater 1st Floor", "260|George Fox B Floor NE", "261|George Fox B Floor SW", "195|George Fox Water","257|George Fox B27 Heat Meter","255|Wongs Kitchen Electricity","196|Wongs Kitchen Water","256|Wongs Kitchen Gas","191|Greggs Electricity","193|Greggs Water","188|Create Electricity","189|Create Water","165|Hairdressers Electricity","186|Hairdressers Water No 1", "166|Hairdressers Water No 2","163|Ice Cream Shop Electricity","164|Ice Cream Shop Water","252|Slaidburn House Electricity","161|Slaidburn House Water","159|Slaidburn House Heat Meter","251|Spar No 1 Electricity", "250|Spar No 2 Electricity","253|Spar Water","249|T Mobile Electricity","248|Student Union Electricity", "350|Student Union Office Electricity","254|Student Union Shop Water","479|DB LG2LP", "480|DB LG3L", "482|DB LG3P", "483|DB A1P", "484|DB B1L", "485|DB B1P", "486|DB B2P", "487|DB A1L", "488|DB B2L", "489|DB A2L", "490|DB A2P", "491|DBCP4 COM2", "492|DB3LP", "493|MCP5", "494|DB C2P", "495|DB C2L", "496|MCP3", "497|DBD4LP", "499|DB LG4P", "500|DB LG4L", "501|DB LG5L", "502|DB LG5P", "504|MCP01", "506|DB COMMS", "507|MCP03", "508|DB C1L", "509|DB C1P", "510|DB D1LP", "511|MCP02", "512|DB D2LP", "481|Book WATER", "503|DIST HEAT EAST","478|Book HEAT", "505|DOM HOT WATER"]                           
            
                    startdate = ''
                    enddate = ''
                    try:
                        meter_id = request.form.get('meterselection')
                        meter_id = int(meter_id)
                        parameterems = request.form.get('paramselection')
                        parameterems = str(parameterems)
                        startdate = request.form.get('starttime')
                        enddate = request.form.get('endtime')
                        building= request.form.get('buildingselection')
                        utility = request.form.get('utilityselection')
                        #print(startdate)
                        #print(enddate)
                    except:
                        meter_id = 101
                        parameterems = '`consumption`'
                        parameterems = str(parameterems)
                        building = "The Croft"
                        utility = "Electricity"
                    
                    if meter_id == None:
                        meter_id = 101
                    if parameterems == None:
                        parameterems = '`consumption`'
                    if startdate == '':
                        startdate = "'2018-11-08 00:00:00'"
                    if enddate == '':
                        enddate = "'2018-11-09 01:00:00'"

                    if building == None:
                        building = "The Croft"
                    if utility == None:
                        utility = "Electricity"
                    parameterems = parameterems.replace('`','')
                    parameterems = '`' + parameterems + '`'
                    residualstartdate = startdate
                    residualenddate = enddate
                    startdate = str(startdate).replace('T',' ')
                    #startdate = "'2018-11-08 00:00:00'"
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    #enddate = "'2018-11-09 01:00:00'"
                    enddate = "'" + enddate + "'"
                    startdate = startdate.replace("'","")
                    enddate = enddate.replace("'","")
                    residualstartdate = startdate.replace(' ','T')
                    residualenddate = enddate.replace(' ','T')
                    #print(residualstartdate)
                    #print(residualenddate)
                    startdate = "'" + startdate + "'"    
                    enddate = "'" + enddate + "'"
                    
                    #print(parameterems)

                    table = '[' + 'EMStest' + str(meter_id) + ']'

                    EMStablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/EMStables.csv")

                    EMStables = EMStablesdf['tables']

                    EMStables = np.array(EMStables)

                    tablecheck = 'EMStest' + str(meter_id)

                    print(table)
                    print(tablecheck)

                    print(EMStables[81])

                    print(len(EMStables))

                    


                    conn = sqlite3.connect('EMSOUT.db')

                    c = conn.cursor()

                    a = 0

                    while a < len(EMStables):
                        check = EMStables[a]

                        if tablecheck == check:
                            print('a')
                            query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                            query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                            c.execute(query)

                            dataset = c.fetchall()


                            dataset2 = np.array(dataset)


                            c.execute(query2)

                            timeaxis = c.fetchall()
                            timeaxis2 = np.array(timeaxis)

                            a = len(EMStables) + 1

                        else:
                            dataset2 = []
                            timeaxis2 = []
                            timeaxis = []
                            dataset2 = np.array(dataset2)
                            timeaxis2 = np.array(timeaxis2)
                            



                        a+=1

                    

                    x = pd.DataFrame(timeaxis, columns=['timestamp'])
                    x['data'] = dataset2

                    x['timestamp'] = timeaxis2

                    xxx = x['timestamp']

                    x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                    #x2 = x.set_index('timestamp')

                    


                    

                    #################################### Modelling section

                    labels5 = xxx

                    values5 = x['data']

                    values5 = np.array(values5)


                    a = 0
                    X5 = 0
                    X6 = []
                    XYear = []
                    XMonth= []
                    XDay= []
                    XHour= []
                    XMin= []
                    Xsec= []

                    while a < len(labels5):
                        X5 = labels5[a]
                        X5 = X5.replace('[', '')
                        X5 = X5.replace(']', '')
                        X5 = X5.replace("'", "")
                        X5 = X5.replace(":", " ")
                        X5 = X5.replace("-", " ")
                        X5 = X5.replace("/", " ")
                        X5=X5.split()
                        X55 = X5[-3:-1]
                        X6.append(X55)
                        a+=1


                    X7 = np.array(X6)


                    #################################### Smart model datetime


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.replace('-',' ')
                    startdate = startdate.replace(':',' ')
                    startdate = startdate.replace("'"," ")

                    enddate = enddate.replace('-',' ')
                    enddate = enddate.replace(':',' ')
                    enddate = enddate.replace("'"," ")


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.split()
                    enddate = enddate.split()

                    #print(startdate)
                    #print(enddate)

                    startyear = int(startdate[0])
                    startmonth = int(startdate[1])
                    startday = int(startdate[2])

                    endyear = int(enddate[0])
                    endmonth = int(enddate[1])
                    endday = int(enddate[2])

                    startdate = datetime.datetime(startyear, startmonth, startday)
                    enddate = datetime.datetime(endyear, endmonth, endday)
                    z = enddate-startdate

                    #print(z)

                    modelstart = startdate - (4*z)

                    modelend = startdate

                    print(modelstart)
                    print(modelend)

                    weekday00 = []
                    weekday0 = []
                    weekday1 = []
                    weekday2 = []
                    weekday3 = []
                    weekday4 = []
                    weekday5 = []
                    weekday6 = []

                    weekday = []
                    weekend = []

                    weekdaynumber = []
                    weekendnumber = []

                    weekdaydatetime = []
                    weekenddatetime = []

                    modelstart2 = modelstart
                    modelstart3 = modelstart
                    modelend3 = modelend
                    


                    while modelstart2 != modelend + datetime.timedelta(days=1):
                        AA = modelstart2

                        AAday = AA.weekday()

                        #print(AA)
                        #print(AAday)

                        if AAday < 5:
                            weekday.append(str(AA))
                            weekdaynumber.append(AAday)
                            weekdaydatetime.append(AA)
                        else:
                            weekend.append(str(AA))
                            weekendnumber.append(AAday)
                            weekenddatetime.append(AA)
                            

                        modelstart2 = modelstart2 + datetime.timedelta(days=1)



                    print(weekday)

                    print(weekend)

                    print(weekdaynumber)

                    print(weekendnumber)

                    print(weekdaydatetime)

                    print(weekenddatetime)

                    

                    modelstart = str(modelstart)
                    modelstart = "'" + modelstart + "'"

                    modelend = str(modelend)
                    modelend = "'" + modelend + "'"

                    #print(modelstart)

                    #print(modelend)


                    a = 0
                    aa = 0

                    modelweekdaystart = []
                    modelweekdayend = []
                    modelweekendstart = []
                    modelweekendend = []

                    modelweekday = []
                    modelweekend = []

                    modelweekday2 = []
                    modelweekend2 = []

                    while modelstart3 != modelend3 + datetime.timedelta(days=1):

                        if len(weekday) == 0:
                            weekday = weekday
                            b = ''
                            d = -1
                            f = datetime.datetime.now()
                        else:

                            if len(weekday) > a:
                                b = weekday[a]
                                d = weekdaynumber[a]
                                f = weekdaydatetime[a]
                                
                            else:
                                b = weekday[0]
                                d = weekdaynumber[0]
                                f = datetime.datetime.now()

                        if len(weekend) == 0:
                            cc = ''
                            e = -1
                            g = datetime.datetime.now()
                            
                        else:
                            
                            if len(weekend) > aa:
                                cc = weekend[aa]
                                e = weekendnumber[aa]
                                g = weekenddatetime[aa]
                                
                            else:
                                cc = weekend[0]
                                e = weekendnumber[0]
                                g = datetime.datetime.now()
                            


                        if f > g:
                            #print(g)

                            modelweekend.append(cc)

                            if e == 6:
                                


                                #print(modelweekend)

                                g = g + datetime.timedelta(days=1)

                                modelweekend.append(str(g))

                                modelweekend2.append(modelweekend)

                                

                                modelweekend = []

                            
                                

                            
                            aa+=1


                        else:
                            #print(f)

                            modelweekday.append(b)

                            if d == 4:
                                #print(modelweekday)

                                f = f + datetime.timedelta(days=1)

                                modelweekday.append(str(f))

                                
                                

                                modelweekday2.append(modelweekday)

                                modelweekday = []

                            
                            a+=1


                        
                        modelstart3 = modelstart3 + datetime.timedelta(days=1)


                    if len(modelweekday) > 0:
                        
                        f = f + datetime.timedelta(days=1)

                        modelweekday.append(str(f))

                        modelweekday2.append(modelweekday)

                    if len(modelweekend) > 0:
                        
                        g = g + datetime.timedelta(days=1)

                        modelweekend.append(str(g))

                        modelweekend2.append(modelweekend)
                        

                    #print(modelweekday)
                    #print(modelweekend)

                    print(modelweekday2)
                    #print(modelweekday2)
                    print(modelweekend2)
                    #print(modelweekend2)



                    loopdataweekday = []

                    looptimeaxisweekday = []

                    loopdataweekend = []

                    looptimeaxisweekend = []

                    


                    a = 0
                    b = 0

                    #print(modelweekday2[3])

                    while a < len(modelweekday2):
                        start = modelweekday2[a][0]
                        end = modelweekday2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        print(start)
                        print(end)

                        

                        while b < len(EMStables):
                            check = EMStables[b]

                            if tablecheck == check:
                                query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                c.execute(query3loop)


                                dataset3loop = c.fetchall()

                                dataset4loop = np.array(dataset3loop)

                                print(len(dataset4loop))

                                c.execute(query4loop)

                                timeaxis3loop = c.fetchall()

                                print(len(timeaxis3loop))

                                b = len(EMStables) + 1

                            else:
                                dataset3loop = []
                                dataset4loop = np.array(dataset3loop)
                                timeaxis3loop = []


                            b +=1

                        

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekday.append(dataset4loop)
                                looptimeaxisweekday.append(timeaxis3loop)



                        a +=1

                    a = 0
                    b = 0

                    while a < len(modelweekend2):
                        start = modelweekend2[a][0]
                        end = modelweekend2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        while b < len(EMStables):
                            check = EMStables[b]

                            if tablecheck == check:
                                query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                c.execute(query3loop)


                                dataset3loop = c.fetchall()

                                dataset4loop = np.array(dataset3loop)

                                #print(len(dataset4loop))

                                c.execute(query4loop)

                                timeaxis3loop = c.fetchall()

                                #print(len(timeaxis3loop))

                                b = len(EMStables) + 1

                            else:
                                dataset3loop = []
                                dataset4loop = np.array(dataset3loop)
                                timeaxis3loop = []
                                


                            b +=1

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekend.append(dataset4loop)
                                looptimeaxisweekend.append(timeaxis3loop)

                        

                        #loopdataweekend.append(dataset4loop)

                        #looptimeaxisweekend.append(timeaxis3loop)



                        a +=1


                    #print(loopdataweekday)
                    #print(len(looptimeaxisweekday))
                    #print(loopdataweekend)
                    #print(looptimeaxisweekend)

                   # print(len(loopdataweekday))
                    #print(len(looptimeaxisweekday))
                   # print(len(loopdataweekend))
                    #print(len(looptimeaxisweekend))

                    #print(loopdataweekday[0])


                    


    ##########weekday data
                    a = 0

                    if len(loopdataweekday) == 0:
                        print('')
                        dataset444 = []
                    else:

                        dataset444 = loopdataweekday[0]

                    while a < len(loopdataweekday):

                        dataset111 = loopdataweekday[a]

                        #print(len(dataset111))

                        #print(dataset111[0])
                        #print(dataset444[0])

                        if np.all(dataset111 == dataset444):
                            print(np.all(dataset111 == dataset444))
                            dataset555 = dataset444

                        else:

                            dataset555 = np.concatenate([dataset555, dataset111])
                            dataset444 = np.concatenate([dataset444, dataset111])

                            #print(len(dataset444))
                            #print(len(dataset555))


                        a+=1


                    #print(dataset444)
                    #print(loopdataweekend[0])


################weekend data
                    a = 0

                    if len(loopdataweekend) == 0:
                        print('')
                        dataset4444 = []
                    else:

                        dataset4444 = loopdataweekend[0]

                    while a < len(loopdataweekend):

                        dataset1111 = loopdataweekend[a]

                        #print(len(dataset1111))

                        #print(dataset1111[0])
                        #print(dataset4444[0])

                        if np.all(dataset1111 == dataset4444):
                            #print(np.all(dataset1111 == dataset4444))
                            dataset5555 = dataset4444

                        else:

                            dataset5555 = np.concatenate([dataset5555, dataset1111])
                            dataset4444 = np.concatenate([dataset4444, dataset1111])

                            #print(len(dataset4444))
                            #print(len(dataset5555))


                        a+=1


                    #print(dataset4444)
                    #print(len(looptimeaxisweekday))
                    #print(looptimeaxisweekday[3])


        ##########weekday timeaxis
                    a = 0

                    if len(looptimeaxisweekday) == 0:
                        print('')
                        timeaxis444 = []
                    else:

                        timeaxis444 = looptimeaxisweekday[0]

                    while a < len(looptimeaxisweekday):

                        timeaxis111 = looptimeaxisweekday[a]

                        #print(len(timeaxis111))

                        #print(timeaxis111[0])
                        #print(timeaxis444[0])
                        #print(a)

                        if timeaxis111[0] == timeaxis444[0]:
                            timeaxis555 = timeaxis444

                        else:

                            timeaxis555 = timeaxis555 + timeaxis111
                            timeaxis444 = timeaxis444 + timeaxis111
                            

                            #print(len(timeaxis444))
                            #print(len(timeaxis555))


                        a+=1


                    #print(timeaxis444)
                    #print(looptimeaxisweekend[0][0])


################weekend timeaxis
                    a = 0

                    if len(looptimeaxisweekend) == 0:
                        print('')
                        timeaxis4444 = []
                    else:

                        timeaxis4444 = looptimeaxisweekend[0]

                    while a < len(looptimeaxisweekend):

                        timeaxis1111 = looptimeaxisweekend[a]

                        #print(len(timeaxis1111))

                        #print(timeaxis1111[0])
                        #print(timeaxis4444[0])

                        if timeaxis1111[0] == timeaxis4444[0]:
                            timeaxis5555 = timeaxis4444

                        else:

                            #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                            timeaxis5555 = timeaxis5555 + timeaxis1111
                            timeaxis4444 = timeaxis4444 + timeaxis1111

                            #print(len(timeaxis4444))
                            #print(len(timeaxis5555))


                        a+=1


                    #print(timeaxis4444)

                    print(len(timeaxis444))
                    print(len(dataset444))

                    print(len(timeaxis4444))
                    print(len(dataset4444))



                    x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                    x10fweekday['data'] = dataset444

                    labelsweekday = x10fweekday['timestamp']

                    valuesweekday = x10fweekday['data']

                    valuesweekday = np.array(valuesweekday)

                    #print(labelsweekday)
                    #print(valuesweekday)



                    

                    x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                    x10fweekend['data'] = dataset4444

                    labelsweekend = x10fweekend['timestamp']

                    valuesweekend = x10fweekend['data']

                    valuesweekend = np.array(valuesweekend)

                    #print(labelsweekend)
                    #print(valuesweekend)

                    weekendlabeldateday = []
                    weekdaylabeldateday = []



                    if len(labelsweekday) == 0:
                        print('')

                    else:
                        

                        a = 0
                        
                        X22 = 0
                        X33 = []
                        X777 = []
                        X778 = []
                        X779 = []
                        X77 = []


                        while a < len(labelsweekday):
                            X22 = labelsweekday[a]
                            X22 = X22.replace('[', '')
                            X22 = X22.replace(']', '')
                            X22 = X22.replace("'", "")
                            X22 = X22.replace(":", " ")
                            X22 = X22.replace("-", " ")
                            X22 = X22.replace("/", " ")
                            X22=X22.split()
                            X225 = X22[-3:-1]

                            X771 = X22[0]
                            X772 = X22[1]
                            X773 = X22[2]
                            
                            X777.append(X771)
                            X778.append(X772)
                            X779.append(X773)
                            
                            X33.append(X225)

                            weekdayyear = int(X22[0])
                            weekdaymonth = int(X22[1])
                            weekdayday = int(X22[2])

                            weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                            weekdaylabeldateday.append(weekdaylabeldate.weekday())
                            
                            a+=1

                        X44 = np.array(X33)



                    if len(valuesweekend) == 0:
                        print('')

                    else:



                        a = 0
                        
                        XX22 = 0
                        XX33 = []
                        XX777 = []
                        XX778 = []
                        XX779 = []
                        XX77 = []


                        while a < len(labelsweekend):
                            XX22 = labelsweekend[a]
                            XX22 = XX22.replace('[', '')
                            XX22 = XX22.replace(']', '')
                            XX22 = XX22.replace("'", "")
                            XX22 = XX22.replace(":", " ")
                            XX22 = XX22.replace("-", " ")
                            XX22 = XX22.replace("/", " ")
                            XX22=XX22.split()
                            XX225 = XX22[-3:-1]

                            XX771 = XX22[0]
                            XX772 = XX22[1]
                            XX773 = XX22[2]
                            
                            XX777.append(XX771)
                            XX778.append(XX772)
                            XX779.append(XX773)
                            
                            XX33.append(XX225)

                            weekendyear = int(XX22[0])
                            weekendmonth = int(XX22[1])
                            weekendday = int(XX22[2])

                            weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                            weekendlabeldateday.append(weekendlabeldate.weekday())

                            
                            a+=1

                        XX44 = np.array(XX33)


                    #print(X44)
                    #print(XX44)


                    print(len(weekdaylabeldateday))
                    print(weekdaylabeldateday)

                    print(len(valuesweekday))
                    print(valuesweekday)


                    a = 3

                    weekdayvaluesavg = []
                    weekdaylabelsavg = []
                    weekdaypredavg = []

                    while a < len(weekdaylabeldateday):
                        a1 = int(valuesweekday[a])
                        a2 = int(valuesweekday[a-1])
                        a3 = int(valuesweekday[a-2])
                        a4 = int(valuesweekday[a-3])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4)/4

                        #print(aavg)

                        if weekdaylabeldateday[a] == 5:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a = a + 4

                        else:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a +=1



                    print(len(weekdaylabeldateday))
                    print(len(weekdayvaluesavg))
                    print(len(weekdaylabelsavg))



                    print(len(weekendlabeldateday))
                    print(weekendlabeldateday)

                    print(len(valuesweekend))
                    print(valuesweekend)

                        

                    a = 3

                    weekendvaluesavg = []
                    weekendlabelsavg = []
                    weekendpredavg = []

                    while a < len(weekendlabeldateday):
                        a1 = int(valuesweekend[a])
                        a2 = int(valuesweekend[a-1])
                        a3 = int(valuesweekend[a-2])
                        a4 = int(valuesweekend[a-3])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4)/4

                        #print(aavg)

                        if weekendlabeldateday[a] == 0:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a = a + 4

                        else:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a +=1



                    weekdaypredavg = np.array(weekdaypredavg)
                    weekendpredavg = np.array(weekendpredavg)

                    print(len(weekendlabeldateday))
                    print(len(weekendvaluesavg))
                    print(len(weekendlabelsavg))

                    print(weekendlabeldateday)
                    print(weekendvaluesavg)
                    print(weekendlabelsavg)


                    #print(X44)
                    #print(XX44)

                    print(len(weekdaypredavg))
                    print(len(weekendpredavg))
                    ###################################################################






                    regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekday) == 0:
                        print('')
                        predvaluweekday = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekday = []

                    else:

                        regr.fit(X44, valuesweekday)
                        #regr.fit(weekdaypredavg, weekdayvaluesavg)
                        predictedweekday = regr.predict(X7)


                        print(predictedweekday)

                        #print(mean_squared_error(values5, predictedweekday))
                        #print(r2_score(values5, predictedweekday))
                       
                        i = len(predictedweekday)
                        k = 0
                        predvaluweekday = []
                        while k < i:
                            predvalweekday = predictedweekday[k]
                            predvaluweekday.append(predvalweekday)
                            k += 1
                        print(predvaluweekday)

                        print(len(predvaluweekday))




                    regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekend) == 0:
                        print('')
                        predvaluweekend = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekend = []

                    else:

                        regrf.fit(XX44, valuesweekend)
                        #regrf.fit(weekendpredavg, weekendvaluesavg)
                        predictedweekend = regrf.predict(X7)


                        print(predictedweekend)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekend)
                        k = 0
                        predvaluweekend = []
                        while k < i:
                            predvalweekend = predictedweekend[k]
                            predvaluweekend.append(predvalweekend)
                            k += 1
                        print(predvaluweekend)

                        print(len(predvaluweekend))
                        
                    

                    
                    

                    
                    
                    

                    ####################################



                    conn.close()

                    a = 0

                    titlefixtemp = ''

                    while a < len(EMStitlefix):
                        titlefix = str(EMStitlefix[a]).split('|')
                        titlefixcheck = int(titlefix[0])

                        if titlefixcheck == int(meter_id):
                            titlefixtemp = titlefix[1]

                            a = len(EMStitlefix) + 1
                        else:
                            a+=1

                    print(titlefixtemp)

                    if titlefixtemp == '':
                        titless2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems.replace('`', '')
                    else:
                        titless2 = str(titlefixtemp) + ' ' + parameterems.replace('`', '')


                    labels = x['timestamp']

                    values = x['data']


                    
                    i = len(values)
                    k = 0
                    valu = []
                    while k < i:
                        val = values[k]
                        valu.append(val)
                        k += 1
                    #print(valu)

                    z = len(labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = labels[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)

                    a = 0
                    X2 = 0
               

                    X227 = []
                    X228 = []
                    X229 = []
                    X22 = []
                    X2727 = []

                    while a < len(labels):
                        X2 = str(labels[a])
                        X2 = X2.replace('[', '')
                        X2 = X2.replace(']', '')
                        X2 = X2.replace("'", "")
                        X2 = X2.replace(":", " ")
                        X2 = X2.replace("-", " ")
                        X2 = X2.replace("/", " ")
                        X2=X2.split()
                        X25 = X2[-3:-1]

                        X221 = X2[0]
                        X222 = X2[1]
                        X223 = X2[2]
                        
                        X227.append(X221)
                        X228.append(X222)
                        X229.append(X223)
                        a+=1


                    #print(X227[0])
                    #print(X228[0])
                    #print(X229[0])



                    a = 0

                    while a < len(X227):
                        

                        X2227 = int(X227[a])
                        X2228 = int(X228[a])
                        X2229 = int(X229[a])
                        
                        X22222 = datetime.date(X2227, X2228, X2229)

                        X22222 = X22222.weekday()

                        X2727.append(X22222)

                        a+=1
                        
                    #print(X77)
                    #print(X2727)

                    legend = titless2
                    ylabel = parameterems.replace('`', '')

                    value_max = x['data'].max() + 1
                    value_min = x['data'].min()
                    if value_min == 0:
                        value_min = value_min
                    else:
                        value_min = value_min - 1
                    line_labels=labe
                    line_values= valu

                    #print(residualstartdate)
                    #print(residualenddate)

                    


                    #residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    a=0

                    weekendvalu = []
                    weekdayvalu = []

                    while a < len(valu):
                        if X2727[a] == 5:
                            weekendvalu.append(valu[a])

                        elif X2727[a] == 6:
                            weekendvalu.append(valu[a])

                        else:
                            weekdayvalu.append(valu[a])
                        a+=1
                        

                    weekdaystddev = np.std(weekdayvalu)
                    weekendstddev = np.std(weekendvalu)

                    print(weekdayvalu)
                    print(weekendvalu)
                    print(weekdaystddev)
                    print(weekendstddev)

                    print(X2727)
                    


                    if len(valuesweekday) == 0:
                        print('hi')


                        avgg = np.mean(valu)
                        medavgg = np.median(valu)
                        stddev = np.std(valu)
                        #print(avgg)
                        #print(medavgg)
                        #print(stddev)

                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                        z = avgg + (3*stddev)
                        zz = avgg - (3*stddev)

                        while v < len(valu):
                            if valu[v] > z:
                                #print('bigger')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            elif valu[v] < zz:
                                #print('smaller')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                
                                if v == 0:
                                    print('')
                                else:
                                    valus[v-1] = valu[v-1]

                                    
                                
                            v += 1

                    elif len(predvaluweekend) == 0:

                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            
                        while v < len(valu):
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                            v +=1
                    else:
                        
                        
                            
                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            

                        while v < len(valu):
                            if X2727[v] == 6:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1

                            elif X2727[v] == 5:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1


                            else:
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1




                        
                    #print(outliers)
                    #print(valus)
                    #print(valu)

                    #print(len(outliers))
                    #print(len(valus))
                    #print(len(valu))

                    #print(z)
                    #print(zz)
                        
                    #print(valus)
                    #line_values=valus
                    #print(line_values)
                    #line_outliers = outliers

                    if len(valuesweekday) == 0:
                        line_values=valus
                        line_outliers = outliers
                    elif len(labels5) == 0:
                        line_values=valus
                        line_outliers = outliers
                    
            
                    else:
                        line_values=valu
                        line_outliers = predvaluweekday

                    line_values=valu
                    line_outliers = outliers
                    #print(valus)
                    #print(predvalu)
                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))

                    #print(stddev)

                    


                    


                    residualsklearndfvalues = pd.DataFrame({'timestamp':labe, titless2:valu})
                    residualsklearndfoutliers = pd.DataFrame({'timestamp':labe, titless2:outliers})
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                    residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                


                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                    '''if len(valuesweekday) == 0:
                        print('')
                    elif len(valuesweekend) == 0:
                        print('')
                    else:

                        print(mean_squared_error(values5, predictedweekday))
                        print(r2_score(values5, predictedweekday))
                        print(mean_squared_error(values5, predictedweekend))
                        print(r2_score(values5, predictedweekend))'''



                    print(meter_id)

                    residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                    ###################################

                    if valu == []:
                        print('0 data')
                    else:

                        residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                        print(residualsklearndfvalues[titless2])

                        residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]

                        residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                        print(residualsklearndfvalues)

                        testarr = np.array(residualsklearndfvalues[titless2])

                        z = len(testarr)
                        y = 0
                        valtest = []
                        while y < z:
                            val = testarr[y]
                            if np.isnan(val) == True:
                                valtest.append('f')
                            else:
                                
                                valtest.append(int(val))
                            y += 1
                        testarrvalus = valtest

                        print(testarrvalus)
                        print(len(testarrvalus))

                        testarrlabe = residualsklearndfvalues.reset_index()
                        testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                        z = len(testarrlabe)
                        y = 0
                        labetest = []
                        while y < z:
                            lab = testarrlabe[y]
                            labetest.append(lab)
                            y += 1
                        testarrlabe = labetest
                        print(testarrlabe)
                        print(len(testarrlabe))
                        print(len(line_values))

                        line_values = testarrvalus
                        line_labels = testarrlabe



                        residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')

                        residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]

                        residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                        testarroutliers = np.array(residualsklearndfoutliers[titless2])

                        print(testarroutliers)

                        z = len(testarroutliers)
                        y = 0
                        outtest = []
                        while y < z:
                            out = testarroutliers[y]
                            if out == 'f':
                                outtest.append('f')
                            elif np.isnan(out) == True:
                                outtest.append('f')
                            else:
                                
                                outtest.append(int(out))
                            y += 1
                        testarroutliers = outtest

                        print(testarroutliers)
                        print(len(testarroutliers))

                        line_outliers = testarroutliers

                        residualsklearndfvalues = pd.DataFrame({'time':line_labels, titless2:line_values})
                        residualsklearndfoutliers = pd.DataFrame({'time':line_labels, titless2:line_outliers})
                        residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf = pd.DataFrame({'time':line_labels, titless2:line_values})


                        #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, titless2:line_values})
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, titless2:line_outliers})
                    residualdf = pd.DataFrame({'time':line_labels, titless2:line_values})

                    print(labe)

                    if valu == []:
                        titless2 = 'Error No Data Available for ' + str(titlefixtemp)
                        #print(titless2)
                        return render_template('view 19 index.html', outlier=line_outliers, title=titless2,min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel)

                    else:
                        
                    
                        return render_template('view 19.html', outlier=line_outliers, title=titless2,min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel)


                elif datatype == 'Synetica':
                    print(datatype)

                    Syntitlefix = ["MC044-L01/M3|Faraday Lifeboat Electricity", "MC044-L01/M6|Chiller No 1 Electricity", "MC044-L01/M8|Chiller No 2 Electricity", "MC044-L01/M7|MCCP Meter", "MC044-L01/M1|DB LCP", "MC044-L01/M2|UPS Output", "MC044-L01/M4|UPS Output Rectifier", "MC044-L02/M21R856|Central Services Immersion Heater", "MC044-L01/M5|Faraday Building Gas","MC076-L01/M6|Engineering Water","MC076-L01/M3|Engineering Gas Meter","MC076-L01/M9R20|Engineering Heat Meter","MC048-L01/M1|Chaplaincy Centre Electricity", "MC048-L01/M2|Chaplaincy Centre Kitchen Electricity","MC048-L01/M3|Chaplaincy Centre Water", "MC048-L01/M4|Chaplaincy Centre Kitchen Water","MC048-L01/M5|Chaplaincy Centre Heat Meter","MC003_L02_M1|Bailrigg House Electricity","MC003_L02_M4|Bailrigg House Water","MC003_L02_M3|Bailrigg House Gas","AP081-L01/M2|Barker House Farm Water","AP081-L01/M3|Barker House Farm Gas","MC030-L01/M3|Bowland Annexe House Electricity","MC042-L01/M10R0|Bowland Annexe Heat Meter","MC042-L01/M9R3205|Bowland Ash Electricity","MC042-L01/M1|Bowland Ash Water","MC042-L01/M11R0|Bowland Ash Heat Meter","MC030-L01/M2|Bowland Ash Gas","MC014-L01/M1|Bowland Hall 1 - 7 Electricity", "MC014_L02_M1|Bowland Hall 8-15 Electricity","MC014-L01/M2|Bowland Hall 1 - 7 Water", "MC014_L02_M2|Bowland Hall 8-15 Water","MC043-L01/M3|Bowland North Electricity","MC043-L01/M2|Bowland North Water","MC043-L01/M1|Bowland North Heat Meter","MC062-L01/M25R2064|Bowland Tower MCCP Panel", "MC062-L01/M26R2068|Bowland Tower Sprinkler", "MC062-L01/M7|Bowland Tower Dis Board", "MC062-L01/M27R2072|Bowland Tower D & E Lighting", "MC062-L01/M28R2076|Bowland Tower D & E Total", "MC062-L01/M36R2060|Bowland Tower F, G & H Lighting", "MC062-L01/M37R2064|Bowland Tower F, G & H Total", "MC062-L01/M29R2080|Bowland Tower J, K & L Lighting", "MC062-L01/M30R2084|Bowland Tower J, K & L Total", "MC062-L01/M34R2052|Bowland Tower M, N & O Lighting", "MC062-L01/M35R2056|Bowland Tower M, N & O Total", "MC062-L01/M4|Bowland Tower E Flat 16/17", "MC062-L01/M21R2048|Bowland Tower South F 18", "MC062-L01/M22R2052|Bowland Tower S F19/20", "MC062-L01/M1|Bowland Tower East B Flr", "MC062-L01/M2|Bowland Tower East C Flr", "MC062-L01/M13R2064|Bowland Tower South B Flr", "MC062-L01/M24R2060|Bowland Tower South C Flr","MC062-L01/M14R2068|Bowland Tower Water","MC062-L01/M17R2080|Bowland Tower Sth and E Wing Heat Meter", "MC062-L01/M16R2076|Slaidburn House Heat Meter","MC202-L01/M12R999|Charles Carter A Floor A1 Total", "MC202-L01/M13R999|Charles Carter A Floor A1 Lighting", "MC202-L01/M14R999|Charles Carter A Floor A2 Total", "MC202-L01/M15R999|Charles Carter A Floor A2 Lighting", "MC202-L01/M16R999|Charles Carter B Floor B1 Total", "MC202-L01/M17R999|Charles Carter B Floor B1 Lighting", "MC202-L01/M18R999|Charles Carter B Floor B2 Total", "MC202-L01/M19R999|Charles Carter B Floor B2 Lighting", "MC202-L01/M10R72|Charles Carter Plant Room DB", "MC202-L01/M11R72|Charles Carter Comms Plant Room", "MC202-L01/M20R999|Charles Carter C Floor C1 Total", "MC202-L01/M21R999|Charles Carter C Floor C1 Lighting", "MC202-L01/M22R999|Charles Carter C Floor C2 Total", "MC202-L01/M23R999|Charles Carter C Floor C2 Lighting", "MC202-L01/M24R999|Charles Carter D Floor D1 Total", "MC202-L01/M25R999|Charles Carter D Floor D1 Lighting", "MC202-L01/M26R999|Charles Carter D Floor D2 Total", "MC202-L01/M27R999|Charles Carter D Floor D2 Lighting","MC202_L01_M1|Charles Carter Water","MC202_L01_M2|Charles Carter Heat Meter","MC032-L02/M1|County South Flats 5, 6 & 7", "MC032-L01/M16R999|County South DB D2 Lighting", "MC032-L02/M11R999|County South DB C2 Power", "MC032-L02/M12R999|County South DB C2 Lighting", "MC032-L01/M11R999|County South DB B1 Power", "MC032-L01/M12R999|County South DB B1 Lighting", "MC032-L01/M13R999|County South DB C1 Power", "MC032-L01/M14R999|County South DB C1 Lighting", "MC032-L01/M15R999|County South DB D1 Power", "MC032-L03/M1|County South Flats 1 2 3 4", "MC032-L03/M13R999|County South DB D3 Power", "MC032-L03/M14R999|County South DB D3 Lighting", "MC032-L03/M11R999|County South DB C3 Power", "MC032-L03/M12R999|County South DB C3 Lighting", "MC032-L03/M9R999|County South DB B3 Power", "MC032-L03/M10R999|County South DB B3 Lighting", "MC032-L01/M1|County South Flat 10 11 12 13 14 ", "MC032-L02/M13R999|County South BD D2 Power", "MC032-L02/M14R999|County South BD D2 Lighting", "MC032-L011/M8|County South Plant Room Lighting", "MC032-L011/M7|County South Plant Room Power", "MC032-L09/M1|County South Plant Room", "MC032-L04/M1|County South BB01 Riser", "MC032-L04/M2|County South BB02 Riser", "MC032-L04/M3|County South BB03 Riser", "MC032-L04/M10R999|County South DB A1 Power", "MC032-L04/M9R999|County South DB A1 Lighting", "MC032-L04/M8|County South Main Incomer", "MC032-L011/M11R52|County South Kitchen Immersion Heater","MC134-L02/M2|County South Res 75 - 77 Water","MC032-L011/M6|County South Laundrette Heat Meter","MC032-L09/M10R2052|County South Laundrette Gas", "MC134-L02/M1|County South Res 75 - 77","MC126-L01/M1|Fylde Pilling Water","MC078-L02/M1|George Fox Electricity", "MC078-L03/M2|George Fox Immersion Heater Ground Floor Electricity", "MC078-L03/M3|George Fox Immersion Heater 1st Floor Electricity","MC078-L02/M3|George Fox Water","MC031-L01/M3|Great Hall Electricity","MC031-L01/M1|Great Hall Water","MC031-L01/M4|Great Hall Gas","MC070-L04/M5|Biology Basement No 1 Immersion Heater", "MC070-L04/M6|Biology Basement No 2 Immersion Heater", "MC070-L01/M1|IENS Phase 1 Electricity", "MC070-L01/M2|NERC Phase 1 IENS Re Furb", "MC070-L01/M7|Biology Phase 1 No 1 Immersion Heater", "MC070-L01/M8|Biology Phase 1 No 2 Immersion Heater","MC070-L01/M3|IENS Phase 1 Water", "MC070-L03/M1|IENS Phase 2 Water - NERC","MC070-L01/M9R20|IENS Phase 1 Heat Meter", "MC070-L04/M10R20|IENS Phase 2 Heat Meter","MC070-L01/M4|IENS Phase 1 Gas", "MC070-L02/M6|IENS Phase 2 Gas - NERC","MC102-L01/M3|Infolab Electricity", "MC102-L01/M5|Infolab Chiller No 1 Electricity", "MC102-L01/M6|Infolab Chiller No 2 Electricity","MC102-L01/M4|Infolab Water","MC102-L01/M1|Plant Room Gas","MC070-L04/M3|LEC 2 NERC Gas","MC065-L01/M13R5099|DB A1P", "MC065-L01/M14R5099|DB B1L", "MC065-L01/M15R5099|DB B1P", "MC065-L01/M19R5099|DB B2P", "MC065-L01/M12R5099|DB A1L", "MC065-L01/M18R5099|DB B2L", "MC065-L01/M16R5099|DB A2L", "MC065-L01/M17R5099|DB A2P", "MC065-L04/M10R45099|DB C2P", "MC065-L04/M9R45099|DB C2L","MC204-L02/M3|Steam Room", "MC204-L02/M12R2060|AHU 1", "MC204-L02/M13R2064|AHU 2", "MC204-L02/M14R2068|Floating Floor", "MC204-L02/M4|MCCP 1", "MC204-L02/M1|MCCP 2", "MC204-L02/M9R2048|Passenger Lift", "MC204-L02/M6|Sauna", "MC204-L01/M9R999|BasePlRmlgs 01-L", "MC204-L01/M10R999|BasePlRm P DB01P", "MC204-L01/M11R999|Wet CH L DB-02-L", "MC204-L01/M12R999|Wet Ch P DB-02-P", "MC204-L02/M7|DB External", "MC204-L02/M15R2072|DB 5", "MC204-L03/M9R52|Main Electric Sub No 12 Sports Centre", "MC204-L02/M16R2076|DB 6", "MC204-L02/M8|Comms DB", "MC204-L02/M10R2052|Generator", "MC204-L02/M5|Pool Filter", "MC204-L02/M16R2076|Ground Floor Dry Lighting", "MC204-L02/M2|Ground Floor Dry Power", "MC204-L01/M15R999|Ground Floor Fitness Lighting", "MC204-L01/M16R999|Grond Floor Fitness Power", "MC204-L01/M17R999|Roof Lighting", "MC204-L01/M18R999|Roof Power","MC204-L01/M1|Sports Centre Water","MC204-L01/M5|CT Heating DHW Primary", "MC204-L01/M6|MTHW Heating Primary", "MC204-L01/M7|CT Heating Secondary", "MC204-L01/M8|VT Heating Secondary","MC204-L01/M2|Main Hall Gas Meter", "MC204-L01/M3|Gas Boilers", "MC204-L01/M4|Main Gas Meter across the Road","MC075-L02/M1|Management No 1 Immersion Heater", "MC075-L02/M2|Management No 2 Immersion Heater", "MC203-L01/M4|Management Phase 2 Adj Lift 1 Electricity","MC075-L02/M3|Management School Phase 1 Heat Meter","MC062-L01/M40R20|Slaidburn House Electricity", "MC061-L01/M5|LUSU Shop Electricity","MC001-L01/M3|The Croft Electricity","MC001-L01/M1|The Croft Water","MC001-L01/M2|The Croft Gas","MC051-L01/M1|University House 1 Phase 1", "MC051-L01/M3|University House 1 Phase 2", "MC051-L01/M6|University House Immersion Heater","MC051-L01/M5|University House Water","MC051-L01/M4|University House Heat Meter","MC077-L01/M1|Whewell Building Electricity","MC077-L01/M2|Whewell Building Water","MC200-L01/M9R2048|DB 1C", "MC200-L01/M10R2052|BMS Panel", "MC200-L01/M11R2056|Lift", "MC200-L01/M12R2060|Chiller Units", "MC200-L01/M1|DB 1A", "MC200-L01/M2|DB 1B", "MC200-L01/M3|DB 2A", "MC200-L01/M4|DB 2B", "MC200-L01/M5|DB 3A", "MC200-L01/M6|DB 3B", "MC200-L01/M7|Dimmer Rack No 1", "MC200-L01/M8|Dimmer Rack No 2","MC200-L01/M13R2064|LICA Heat Meter","MC061-L04/M23R52|CHP Elct Input","MC061-L01/M14R20|CHP Heat Meter", "MC061-L04/M6|Biomass Heat Meter","MC061-L01/M8|MCCP Electric", "MC061-L01/M1|Circulation Pump No 1", "MC061-L01/M2|Circulation Pump No 2", "MC061-L01/M3|Circulation Pump No 3", "MC061-L01/M4|Circulation Pump No 4","MC061-L01/M6|Water Meter RHS Rear", "MC061-L01/M5|Water Meter LHS Rear","MC171-L01/M9R999|Post Graduate Statistics Electricity","MC171-L01/M1|Post Graduate Statistics Water","MC171-L01/M21R20|Post Graduate Statistics Heat Meter","MC067-L01/M9R52|Pre School Centre Electricity","MC067-L01/M1|Pre School Centre Water","MC067-L01/M2|Pre School Centre Gas","MC050-L01/M1|Security Office Electricity","MC061-L04/M24R52|No 1 Transformer Sub 1 Energy Centre", "MC061-L04/M26R52|No 2 Transformer Sub 1 Energy Centre", "MC061-L04/M14R2060|Boiler House CHP Gas","MC061-L04/M1|Boiler Gas", "MC061-L04/M2|Furness and Fylde Residence", "MC061-L04/M13R2056|Firm Gas", "MC061-L04/M1|3 Gas Boilers","MC199-L01/M11R2048|Chiller No 2", "MC199-L01/M3|LV3-NE Supply", "MC199-L01/M6|ISS Total", "MC199-L01/M13R2056|LV2-ESS Supply", "MC199-L01/M14R2060|Chiller No 1","MC013-L01/M2|No 1 Transformer Sub 3 Gt Hall", "MC013-L01/M4|No 2 Transformer Sub 3 Gt Hall", "MC013-L01/M3|LEC Workshops NE Corner","MC203-L01/M10R1280|No 1 Transformer Sub 5 Grizedale College", "MC203-L01/M11R1280|No 2 Transformer Sub 5 Grizedale College","MC102-L04/M9R52|No 1 Transformer Sub 6 Info Lab", "MC102-L04/M10R52|No 2 Transformer Sub 6 Info Lab","MC138-L01/M9R52|No 1 Transformer Sub 7 Alex Park", "MC138-L01/M12R52|No 2 Transformer Sub 7 Alex Park","MC068-L01/M13R52|No 1 Transformer Sub 8 Lec 1", "MC068-L01/M14R52|Lec 3 No 1 Transformer No 10 Sub Station","MC140-L01/M14R52|No 1 Transformer SS Furness Residence","MC199-L01/M1|Non Ess (MCCN)", "MC199-L01/M4|LV4-NE Supply", "MC199-L01/M10R52|Incomer No 2", "MC199-L01/M12R2052|Standby Gener", "MC071-L02/M1|Flat 1 Comsumer Unit", "MC071-L02/M2|Flat 2 Comsumer Unit", "MC071-L02/M3|Flat 3 Comsumer Unit", "MC071-L02/M4|Flat 4 Comsumer Unit", "MC071-L02/M13R2064|Flat 5 Comsumer Unit", "MC071-L02/M14R2068|Flat 6 Comsumer Unit", "MC071-L02/M15R2072|Flat 7 Comsumer Unit", "MC071-L02/M23R2056|Power Section DB LCDB 021", "MC071-L02/M24R2060|Lighting Section DB LCDB 021", "MC071-L02/M25R2064|Power Section DB NDB 02", "MC071-L02/M26R2068|Lighting Section DB NDB 02", "MC071-L02/M27R2072|Power Section DB LBDB 021", "MC071-L02/M28R2076|Lighting Section DB LBDB 021", "MC071-L02/M29R2080|Power Section DB NDB 01", "MC071-L02/M30R2084|Lighting Section DB NDB 01", "MC071-L02/M31R2088|Power Section DB LADB 021", "MC071-L02/M32R2092|Lighting Section DB LADB 021", "MC071-L01/M18R2084|SW Bus Bar", "MC071-L01/M17R2080|NE Bus Bar", "MC071-L01/M41R2080|Elect A Floor", "MC071-L01/M4|NW Pass Lift", "MC071-L01/M19R2088|South Block DB DB 4X", "MC071-L01/M34R2052|PWR Foyer GDB 3", "MC071-L01/M35R2056|Lgt Foyer GDB 3", "MC071-L01/M3|North East Lift", "MC071-L01/M32R2092|Power DB LBDB 011", "MC071-L01/M34R2052|Power Foyer DB GDB 003", "MC071-L01/M35R2056|Lighting Foyer DB GDB 003", "MC071-L01/M36R2060|Power DB LADB 011", "MC071-L01/M37R2064|Lighting DB LADB 011","MC131-L01/M3|Furness Hawkshead Water", "MC071-L02/M5|Flat 1 Water Meter", "MC071-L02/M6|Flat 2 Water Meter", "MC071-L02/M7|Flat 3 Water Meter", "MC071-L02/M8|Flat 4 Water Meter", "MC071-L02/M16R2076|Flat 5 Water Meter", "MC071-L02/M17R2080|Flat 6 Water Meter", "MC071-L02/M18R2084|Flat 7 Water Meter", "MC071-L01/M38R2068|Main Water Meter", "MC071-L01/M40R2076|Pressurisation Make up Water", "MC071-L01/M38R2068|Furness 140 Main Water IN ","MC071-L02/M9R2048|Flat 1 Heat Meter", "MC071-L02/M10R2052|Flat 2 Heat Meter", "MC071-L02/M11R2056|Flat 3 Heat Meter", "MC071-L02/M12R2060|Flat 4 Heat Meter", "MC071-L02/M19R2088|Flat 5 Heat Meter", "MC071-L02/M20R2092|Flat 6 Heat Meter", "MC071-L02/M21R2048|Flat 7 Heat Meter", "MC071-L01/M23R2056|LPHW DHWS Heat Meter","LV1 UPS 1 Campus Servers DB/E/S4B|Campus Services DB-E-S4B", "LV1 UPS 1 Regional Networking and Services DB/E/S3B|Regional Network and Services DB-E-S3B", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1B|Regional Campus Co-Lo DB-E-S1B", "LV1 UPS 1 Campus Network DB/E/S2B|Campus Network DB-E-S2B", "LV1 UPS 1 Building Comms DB/E/S5B|Building Coms DB-E-S5B", "LV1 UPS 1 Campus Servers DB/E/S4A|Campus Servers DB-E-S4A", "LV1 UPS 1 Regional Networking and Services DB/E/S3A|Regional Networking Services DB-E-S3A", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1A|Regional and Campus Co Lo DB-E-S1A", "LV1 UPS 1 Campus Network DB/E/S2A|Campus Network DB-E-S2A", "LV1 UPS 1 Building Comms DB/E/S5A|Building Coms DB-E-S5A", "LV2 - ESS Supply From LV1 -ESS|LV2 ESS Main M", "LV2 - Essential Mechanical Control Centre 2/6|Ess Mech Control Centre", "LV2 - ESS CB/E/M2 2/8|DB-E-M2", "LV2 - ESS UPS Future|Future UPS", "LV1 -UPS1 Incomer No1|UPSLV-US-1", "LV2 - ESS UPS 2/4|UPSLV-US-4","ISS Main Water Meter|ISS Water Meter","ISS Main Heat Meter|ISS Heat Meter"]   

            
                    startdate = ''
                    enddate = ''
                    try:
                        meter_id = request.form.get('meterselection')
                        
                        parameterems = request.form.get('paramselection')
                        param = parameterems
                        parameterems = str(parameterems)
                        startdate = request.form.get('starttime')
                        enddate = request.form.get('endtime')
                        #print(startdate)
                        #print(enddate)
                    except:
                        print('hi')
                        meter_id = 'MC044-L01/M1'
                        parameterems = '`reading`'
                        parameterems = str(parameterems)
                    
                    print(type(parameterems))
                    
                    if meter_id == None:
                        meter_id = 'MC044-L01/M1'
                    if param == None:
                        print('hi')
                        parameterems = '`reading`'
                    if startdate == '':
                        startdate = "'2018-11-08 00:00:00'"
                    if enddate == '':
                        enddate = "'2018-11-09 01:00:00'"
                    parameterems = parameterems.replace('`','')
                    parameterems = '`' + parameterems + '`'
                    residualstartdate = startdate
                    residualenddate = enddate
                    startdate = str(startdate).replace('T',' ')
                    #startdate = "'2018-11-08 00:00:00'"
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    #enddate = "'2018-11-09 01:00:00'"
                    enddate = "'" + enddate + "'"
                    startdate = startdate.replace("'","")
                    enddate = enddate.replace("'","")
                    residualstartdate = startdate.replace(' ','T')
                    residualenddate = enddate.replace(' ','T')
                    #print(residualstartdate)
                    #print(residualenddate)
                    startdate = "'" + startdate + "'"    
                    enddate = "'" + enddate + "'"
                    
                    print(parameterems)
                    print(meter_id)

                    table = '[' + 'Syntest' + str(meter_id) + ']'

                    SYNtablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Syntables.csv")

                    SYNtables = SYNtablesdf['tables']

                    SYNtables = np.array(SYNtables)

                    tablecheck = 'Syntest' + str(meter_id)

                    print(table)
                    print(tablecheck)

                    print(SYNtables[0])



                    conn = sqlite3.connect('SynOUT.db')


                    c = conn.cursor()

                    a = 0

                    while a < len(SYNtables):
                        check = SYNtables[a]

                        if tablecheck == check:
                            query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                            query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                            c.execute(query)

                            dataset = c.fetchall()


                            dataset2 = np.array(dataset)


                            c.execute(query2)

                            timeaxis = c.fetchall()
                            timeaxis2 = np.array(timeaxis)

                            a = len(SYNtables) + 1


                        else:
                            dataset2 = []
                            timeaxis2 = []
                            timeaxis = []
                            dataset2 = np.array(dataset2)
                            timeaxis2 = np.array(timeaxis2)
                            print('')



                        a+=1

                    
                    x = pd.DataFrame(timeaxis, columns=['timestamp'])
                    x['data'] = dataset2

                    x['timestamp'] = timeaxis2

                    xxx = x['timestamp']

                    x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                    #x2 = x.set_index('timestamp')

                    


                    

                    #################################### Modelling section

                    labels5 = xxx

                    values5 = x['data']

                    values5 = np.array(values5)


                    a = 0
                    X5 = 0
                    X6 = []
                    XYear = []
                    XMonth= []
                    XDay= []
                    XHour= []
                    XMin= []
                    Xsec= []

                    while a < len(labels5):
                        X5 = labels5[a]
                        X5 = X5.replace('[', '')
                        X5 = X5.replace(']', '')
                        X5 = X5.replace("'", "")
                        X5 = X5.replace(":", " ")
                        X5 = X5.replace("-", " ")
                        X5 = X5.replace("/", " ")
                        X5=X5.split()
                        X55 = X5[-3:-1]
                        X6.append(X55)
                        a+=1


                    X7 = np.array(X6)


                    #################################### Smart model datetime


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.replace('-',' ')
                    startdate = startdate.replace(':',' ')
                    startdate = startdate.replace("'"," ")

                    enddate = enddate.replace('-',' ')
                    enddate = enddate.replace(':',' ')
                    enddate = enddate.replace("'"," ")


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.split()
                    enddate = enddate.split()

                    #print(startdate)
                    #print(enddate)

                    startyear = int(startdate[0])
                    startmonth = int(startdate[1])
                    startday = int(startdate[2])

                    endyear = int(enddate[0])
                    endmonth = int(enddate[1])
                    endday = int(enddate[2])

                    startdate = datetime.datetime(startyear, startmonth, startday)
                    enddate = datetime.datetime(endyear, endmonth, endday)
                    z = enddate-startdate

                    #print(z)

                    modelstart = startdate - (4*z)

                    modelend = startdate

                    print(modelstart)
                    print(modelend)

                    weekday00 = []
                    weekday0 = []
                    weekday1 = []
                    weekday2 = []
                    weekday3 = []
                    weekday4 = []
                    weekday5 = []
                    weekday6 = []

                    weekday = []
                    weekend = []

                    weekdaynumber = []
                    weekendnumber = []

                    weekdaydatetime = []
                    weekenddatetime = []

                    modelstart2 = modelstart
                    modelstart3 = modelstart
                    modelend3 = modelend
                    


                    while modelstart2 != modelend + datetime.timedelta(days=1):
                        AA = modelstart2

                        AAday = AA.weekday()

                        #print(AA)
                        #print(AAday)

                        if AAday < 5:
                            weekday.append(str(AA))
                            weekdaynumber.append(AAday)
                            weekdaydatetime.append(AA)
                        else:
                            weekend.append(str(AA))
                            weekendnumber.append(AAday)
                            weekenddatetime.append(AA)
                            

                        modelstart2 = modelstart2 + datetime.timedelta(days=1)



                    print(weekday)

                    print(weekend)

                    print(weekdaynumber)

                    print(weekendnumber)

                    print(weekdaydatetime)

                    print(weekenddatetime)

                    

                    modelstart = str(modelstart)
                    modelstart = "'" + modelstart + "'"

                    modelend = str(modelend)
                    modelend = "'" + modelend + "'"

                    #print(modelstart)

                    #print(modelend)


                    a = 0
                    aa = 0

                    modelweekdaystart = []
                    modelweekdayend = []
                    modelweekendstart = []
                    modelweekendend = []

                    modelweekday = []
                    modelweekend = []

                    modelweekday2 = []
                    modelweekend2 = []

                    while modelstart3 != modelend3 + datetime.timedelta(days=1):

                        if len(weekday) == 0:
                            weekday = weekday
                            b = ''
                            d = -1
                            f = datetime.datetime.now()
                        else:

                            if len(weekday) > a:
                                b = weekday[a]
                                d = weekdaynumber[a]
                                f = weekdaydatetime[a]
                                
                            else:
                                b = weekday[0]
                                d = weekdaynumber[0]
                                f = datetime.datetime.now()
                        if len(weekend) == 0:
                            cc = ''
                            e = -1
                            g = datetime.datetime.now()
                            
                        else:
                            
                            if len(weekend) > aa:
                                cc = weekend[aa]
                                e = weekendnumber[aa]
                                g = weekenddatetime[aa]
                                
                            else:
                                cc = weekend[0]
                                e = weekendnumber[0]
                                g = datetime.datetime.now()
                                


                        if f > g:
                            #print(g)

                            modelweekend.append(cc)

                            if e == 6:
                                


                                #print(modelweekend)

                                g = g + datetime.timedelta(days=1)

                                modelweekend.append(str(g))

                                modelweekend2.append(modelweekend)

                                

                                modelweekend = []

                            
                                

                            
                            aa+=1


                        else:
                            #print(f)

                            modelweekday.append(b)

                            if d == 4:
                                #print(modelweekday)

                                f = f + datetime.timedelta(days=1)

                                modelweekday.append(str(f))

                                
                                

                                modelweekday2.append(modelweekday)

                                modelweekday = []

                            
                            a+=1


                        
                        modelstart3 = modelstart3 + datetime.timedelta(days=1)


                    if len(modelweekday) > 0:
                        
                        f = f + datetime.timedelta(days=1)

                        modelweekday.append(str(f))

                        modelweekday2.append(modelweekday)

                    if len(modelweekend) > 0:
                        
                        g = g + datetime.timedelta(days=1)

                        modelweekend.append(str(g))

                        modelweekend2.append(modelweekend)
                        

                    #print(modelweekday)
                    #print(modelweekend)

                    print(modelweekday2)
                    #print(modelweekday2)
                    print(modelweekend2)
                    #print(modelweekend2)



                    loopdataweekday = []

                    looptimeaxisweekday = []

                    loopdataweekend = []

                    looptimeaxisweekend = []

                    


                    a = 0
                    b = 0

                    #print(modelweekday2[3])

                    while a < len(modelweekday2):
                        start = modelweekday2[a][0]
                        end = modelweekday2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        print(start)
                        print(end)

                        while b < len(SYNtables):
                            check = SYNtables[b]

                            if tablecheck == check:
                                query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                c.execute(query3loop)


                                dataset3loop = c.fetchall()

                                dataset4loop = np.array(dataset3loop)

                                print(len(dataset4loop))

                                c.execute(query4loop)

                                timeaxis3loop = c.fetchall()

                                print(len(timeaxis3loop))

                                b = len(SYNtables) + 1


                            else:
                                dataset3loop = []
                                dataset4loop = np.array(dataset3loop)
                                timeaxis3loop = []
                                print('')



                            b+=1

                        

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekday.append(dataset4loop)
                                looptimeaxisweekday.append(timeaxis3loop)



                        a +=1

                    a = 0
                    b = 0

                    while a < len(modelweekend2):
                        start = modelweekend2[a][0]
                        end = modelweekend2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"


                        while b < len(SYNtables):
                            check = SYNtables[b]

                            if tablecheck == check:
                                query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                                c.execute(query3loop)


                                dataset3loop = c.fetchall()

                                dataset4loop = np.array(dataset3loop)

                                #print(len(dataset4loop))

                                c.execute(query4loop)

                                timeaxis3loop = c.fetchall()

                                #print(len(timeaxis3loop))

                                b = len(SYNtables) + 1


                            else:
                                dataset3loop = []
                                dataset4loop = np.array(dataset3loop)
                                timeaxis3loop = []
                                print('')



                            b+=1

                        

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekend.append(dataset4loop)
                                looptimeaxisweekend.append(timeaxis3loop)

                        

                        #loopdataweekend.append(dataset4loop)

                        #looptimeaxisweekend.append(timeaxis3loop)



                        a +=1


                    #print(loopdataweekday)
                    #print(len(looptimeaxisweekday))
                    #print(loopdataweekend)
                    #print(looptimeaxisweekend)

                   # print(len(loopdataweekday))
                    #print(len(looptimeaxisweekday))
                   # print(len(loopdataweekend))
                    #print(len(looptimeaxisweekend))

                    #print(loopdataweekday[0])


                    


    ##########weekday data
                    a = 0

                    if len(loopdataweekday) == 0:
                        print('')
                        dataset444 = []
                    else:

                        dataset444 = loopdataweekday[0]

                    while a < len(loopdataweekday):

                        dataset111 = loopdataweekday[a]

                        #print(len(dataset111))

                        #print(dataset111[0])
                        #print(dataset444[0])

                        if np.all(dataset111 == dataset444):
                            print(np.all(dataset111 == dataset444))
                            dataset555 = dataset444

                        else:

                            dataset555 = np.concatenate([dataset555, dataset111])
                            dataset444 = np.concatenate([dataset444, dataset111])

                            #print(len(dataset444))
                            #print(len(dataset555))


                        a+=1


                    #print(dataset444)
                    #print(loopdataweekend[0])


################weekend data
                    a = 0

                    if len(loopdataweekend) == 0:
                        print('')
                        dataset4444 = []
                    else:

                        dataset4444 = loopdataweekend[0]

                    while a < len(loopdataweekend):

                        dataset1111 = loopdataweekend[a]

                        #print(len(dataset1111))

                        #print(dataset1111[0])
                        #print(dataset4444[0])

                        if np.all(dataset1111 == dataset4444):
                            #print(np.all(dataset1111 == dataset4444))
                            dataset5555 = dataset4444

                        else:

                            dataset5555 = np.concatenate([dataset5555, dataset1111])
                            dataset4444 = np.concatenate([dataset4444, dataset1111])

                            #print(len(dataset4444))
                            #print(len(dataset5555))


                        a+=1


                    #print(dataset4444)
                    #print(len(looptimeaxisweekday))
                    #print(looptimeaxisweekday[3])


        ##########weekday timeaxis
                    a = 0

                    if len(looptimeaxisweekday) == 0:
                        print('')
                        timeaxis444 = []
                    else:

                        timeaxis444 = looptimeaxisweekday[0]

                    while a < len(looptimeaxisweekday):

                        timeaxis111 = looptimeaxisweekday[a]

                        #print(len(timeaxis111))

                        #print(timeaxis111[0])
                        #print(timeaxis444[0])
                        #print(a)

                        if timeaxis111[0] == timeaxis444[0]:
                            timeaxis555 = timeaxis444

                        else:

                            timeaxis555 = timeaxis555 + timeaxis111
                            timeaxis444 = timeaxis444 + timeaxis111
                            

                            #print(len(timeaxis444))
                            #print(len(timeaxis555))


                        a+=1


                    #print(timeaxis444)
                    #print(looptimeaxisweekend[0][0])


################weekend timeaxis
                    a = 0

                    if len(looptimeaxisweekend) == 0:
                        print('')
                        timeaxis4444 = []
                    else:

                        timeaxis4444 = looptimeaxisweekend[0]

                    while a < len(looptimeaxisweekend):

                        timeaxis1111 = looptimeaxisweekend[a]

                        #print(len(timeaxis1111))

                        #print(timeaxis1111[0])
                        #print(timeaxis4444[0])

                        if timeaxis1111[0] == timeaxis4444[0]:
                            timeaxis5555 = timeaxis4444

                        else:

                            #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                            timeaxis5555 = timeaxis5555 + timeaxis1111
                            timeaxis4444 = timeaxis4444 + timeaxis1111

                            #print(len(timeaxis4444))
                            #print(len(timeaxis5555))


                        a+=1


                    #print(timeaxis4444)

                    print(len(timeaxis444))
                    print(len(dataset444))

                    print(len(timeaxis4444))
                    print(len(dataset4444))



                    x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                    x10fweekday['data'] = dataset444

                    labelsweekday = x10fweekday['timestamp']

                    valuesweekday = x10fweekday['data']

                    valuesweekday = np.array(valuesweekday)

                    #print(labelsweekday)
                    #print(valuesweekday)



                    

                    x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                    x10fweekend['data'] = dataset4444

                    labelsweekend = x10fweekend['timestamp']

                    valuesweekend = x10fweekend['data']

                    valuesweekend = np.array(valuesweekend)

                    #print(labelsweekend)
                    #print(valuesweekend)

                    weekendlabeldateday = []
                    weekdaylabeldateday = []



                    if len(labelsweekday) == 0:
                        print('')

                    else:
                        

                        a = 0
                        
                        X22 = 0
                        X33 = []
                        X777 = []
                        X778 = []
                        X779 = []
                        X77 = []


                        while a < len(labelsweekday):
                            X22 = labelsweekday[a]
                            X22 = X22.replace('[', '')
                            X22 = X22.replace(']', '')
                            X22 = X22.replace("'", "")
                            X22 = X22.replace(":", " ")
                            X22 = X22.replace("-", " ")
                            X22 = X22.replace("/", " ")
                            X22=X22.split()
                            X225 = X22[-3:-1]

                            X771 = X22[0]
                            X772 = X22[1]
                            X773 = X22[2]
                            
                            X777.append(X771)
                            X778.append(X772)
                            X779.append(X773)
                            
                            X33.append(X225)

                            weekdayyear = int(X22[0])
                            weekdaymonth = int(X22[1])
                            weekdayday = int(X22[2])

                            weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                            weekdaylabeldateday.append(weekdaylabeldate.weekday())
                            
                            a+=1

                        X44 = np.array(X33)



                    if len(valuesweekend) == 0:
                        print('')

                    else:



                        a = 0
                        
                        XX22 = 0
                        XX33 = []
                        XX777 = []
                        XX778 = []
                        XX779 = []
                        XX77 = []


                        while a < len(labelsweekend):
                            XX22 = labelsweekend[a]
                            XX22 = XX22.replace('[', '')
                            XX22 = XX22.replace(']', '')
                            XX22 = XX22.replace("'", "")
                            XX22 = XX22.replace(":", " ")
                            XX22 = XX22.replace("-", " ")
                            XX22 = XX22.replace("/", " ")
                            XX22=XX22.split()
                            XX225 = XX22[-3:-1]

                            XX771 = XX22[0]
                            XX772 = XX22[1]
                            XX773 = XX22[2]
                            
                            XX777.append(XX771)
                            XX778.append(XX772)
                            XX779.append(XX773)
                            
                            XX33.append(XX225)

                            weekendyear = int(XX22[0])
                            weekendmonth = int(XX22[1])
                            weekendday = int(XX22[2])

                            weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                            weekendlabeldateday.append(weekendlabeldate.weekday())

                            
                            a+=1

                        XX44 = np.array(XX33)


                    #print(X44)
                    #print(XX44)


                    print(len(weekdaylabeldateday))
                    print(weekdaylabeldateday)

                    print(len(valuesweekday))
                    print(valuesweekday)


                    a = 12

                    weekdayvaluesavg = []
                    weekdaylabelsavg = []
                    weekdaypredavg = []

                    while a < len(weekdaylabeldateday):
                        a1 = int(valuesweekday[a])
                        a2 = int(valuesweekday[a-1])
                        a3 = int(valuesweekday[a-2])
                        a4 = int(valuesweekday[a-3])
                        a5 = int(valuesweekday[a-4])
                        a6 = int(valuesweekday[a-5])
                        a7 = int(valuesweekday[a-6])
                        a8 = int(valuesweekday[a-7])
                        a9 = int(valuesweekday[a-8])
                        a10 = int(valuesweekday[a-9])
                        a11 = int(valuesweekday[a-10])
                        a12 = int(valuesweekday[a-11])
                        a13 = int(valuesweekday[a-12])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13)/13

                        #print(aavg)

                        if weekdaylabeldateday[a] == 5:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a = a + 13

                        else:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a +=1



                    print(len(weekdaylabeldateday))
                    print(len(weekdayvaluesavg))
                    print(len(weekdaylabelsavg))



                    print(len(weekendlabeldateday))
                    print(weekendlabeldateday)

                    print(len(valuesweekend))
                    print(valuesweekend)

                        

                    a = 12

                    weekendvaluesavg = []
                    weekendlabelsavg = []
                    weekendpredavg = []

                    while a < len(weekendlabeldateday):
                        a1 = int(valuesweekend[a])
                        a2 = int(valuesweekend[a-1])
                        a3 = int(valuesweekend[a-2])
                        a4 = int(valuesweekend[a-3])
                        a5 = int(valuesweekend[a-4])
                        a6 = int(valuesweekend[a-5])
                        a7 = int(valuesweekend[a-6])
                        a8 = int(valuesweekend[a-7])
                        a9 = int(valuesweekend[a-8])
                        a10 = int(valuesweekend[a-9])
                        a11 = int(valuesweekend[a-10])
                        a12 = int(valuesweekend[a-11])
                        a13 = int(valuesweekend[a-12])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13)/13

                        #print(aavg)

                        if weekendlabeldateday[a] == 0:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a = a + 13

                        else:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a +=1



                    weekdaypredavg = np.array(weekdaypredavg)
                    weekendpredavg = np.array(weekendpredavg)

                    print(len(weekendlabeldateday))
                    print(len(weekendvaluesavg))
                    print(len(weekendlabelsavg))

                    print(weekendlabeldateday)
                    print(weekendvaluesavg)
                    print(weekendlabelsavg)


                    #print(X44)
                    #print(XX44)

                    print(len(weekdaypredavg))
                    print(len(weekendpredavg))
                    ###################################################################






                    regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekday) == 0:
                        print('')
                        predvaluweekday = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekday = []

                    else:

                        regr.fit(X44, valuesweekday)
                        #regr.fit(weekdaypredavg, weekdayvaluesavg)
                        predictedweekday = regr.predict(X7)


                        print(predictedweekday)

                        #print(mean_squared_error(values5, predictedweekday))
                        #print(r2_score(values5, predictedweekday))
                       
                        i = len(predictedweekday)
                        k = 0
                        predvaluweekday = []
                        while k < i:
                            predvalweekday = predictedweekday[k]
                            predvaluweekday.append(predvalweekday)
                            k += 1
                        print(predvaluweekday)

                        print(len(predvaluweekday))




                    regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekend) == 0:
                        print('')
                        predvaluweekend = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekend = []

                    else:

                        regrf.fit(XX44, valuesweekend)
                        #regrf.fit(weekendpredavg, weekendvaluesavg)
                        predictedweekend = regrf.predict(X7)


                        print(predictedweekend)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekend)
                        k = 0
                        predvaluweekend = []
                        while k < i:
                            predvalweekend = predictedweekend[k]
                            predvaluweekend.append(predvalweekend)
                            k += 1
                        print(predvaluweekend)

                        print(len(predvaluweekend))
                        
                    


                    

                    
                    
                    

                    ####################################



                    conn.close()


                    a = 0

                    titlefixtemp = ''

                    while a < len(Syntitlefix):
                        titlefix = str(Syntitlefix[a]).split('|')
                        titlefixcheck = titlefix[0]

                        if titlefixcheck == meter_id:
                            titlefixtemp = titlefix[1]

                            a = len(Syntitlefix) + 1
                        else:
                            a+=1

                    print('titlefixtemp')
                    print(titlefixtemp)

                    if titlefixtemp == '':
                        titless2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems.replace('`', '')
                    else:
                        titless2 = str(titlefixtemp) + ' ' + parameterems.replace('`', '')

                    print(titlefixtemp)

                    labels = x['timestamp']

                    values = x['data']


                    
                    i = len(values)
                    k = 0
                    valu = []
                    while k < i:
                        val = values[k]
                        valu.append(int(val))
                        k += 1
                    #print(valu)

                    z = len(labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = labels[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)

                    a = 0
                    X2 = 0
               

                    X227 = []
                    X228 = []
                    X229 = []
                    X22 = []
                    X2727 = []

                    while a < len(labels):
                        X2 = str(labels[a])
                        X2 = X2.replace('[', '')
                        X2 = X2.replace(']', '')
                        X2 = X2.replace("'", "")
                        X2 = X2.replace(":", " ")
                        X2 = X2.replace("-", " ")
                        X2 = X2.replace("/", " ")
                        X2=X2.split()
                        X25 = X2[-3:-1]

                        X221 = X2[0]
                        X222 = X2[1]
                        X223 = X2[2]
                        
                        X227.append(X221)
                        X228.append(X222)
                        X229.append(X223)
                        a+=1


                    #print(X227[0])
                    #print(X228[0])
                    #print(X229[0])



                    a = 0

                    while a < len(X227):
                        

                        X2227 = int(X227[a])
                        X2228 = int(X228[a])
                        X2229 = int(X229[a])
                        
                        X22222 = datetime.date(X2227, X2228, X2229)

                        X22222 = X22222.weekday()

                        X2727.append(X22222)

                        a+=1
                        
                    #print(X77)
                    #print(X2727)

                    legend = titless2
                    ylabel = parameterems.replace('`', '')

                    value_max = x['data'].max() + 1
                    value_min = x['data'].min()
                    if value_min == 0:
                        value_min = value_min
                    else:
                        value_min = value_min - 1
                    line_labels=labe
                    line_values= valu

                    #print(residualstartdate)
                    #print(residualenddate)

                    


                    #residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    a=0

                    weekendvalu = []
                    weekdayvalu = []

                    while a < len(valu):
                        if X2727[a] == 5:
                            weekendvalu.append(valu[a])

                        elif X2727[a] == 6:
                            weekendvalu.append(valu[a])

                        else:
                            weekdayvalu.append(valu[a])
                        a+=1
                        

                    weekdaystddev = np.std(weekdayvalu)
                    weekendstddev = np.std(weekendvalu)

                    print(weekdayvalu)
                    print(weekendvalu)
                    print(weekdaystddev)
                    print(weekendstddev)
                    


                    if len(valuesweekday) == 0:
                        print('hi')


                        avgg = np.mean(valu)
                        medavgg = np.median(valu)
                        stddev = np.std(valu)
                        #print(avgg)
                        #print(medavgg)
                        #print(stddev)

                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                        z = avgg + (3*stddev)
                        zz = avgg - (3*stddev)

                        while v < len(valu):
                            if valu[v] > z:
                                #print('bigger')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            elif valu[v] < zz:
                                #print('smaller')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                
                                if v == 0:
                                    print('')
                                else:
                                    valus[v-1] = valu[v-1]

                                    
                                
                            v += 1

                    elif len(predvaluweekend) == 0:

                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            
                        while v < len(valu):
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                            v +=1

                    else:
                        
                        
                            
                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            

                        while v < len(valu):
                            if X2727[v] == 6:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1

                            elif X2727[v] == 5:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1


                            else:
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1




                        
                    #print(outliers)
                    #print(valus)
                    #print(valu)

                    #print(len(outliers))
                    #print(len(valus))
                    #print(len(valu))

                    #print(z)
                    #print(zz)
                        
                    #print(valus)
                    #line_values=valus
                    #print(line_values)
                    #line_outliers = outliers

                    if len(valuesweekday) == 0:
                        line_values=valus
                        line_outliers = outliers
                    elif len(labels5) == 0:
                        line_values=valus
                        line_outliers = outliers
                    
            
                    else:
                        line_values=valu
                        line_outliers = predvaluweekday

                    line_values=valu
                    line_outliers = outliers
                    #print(valus)
                    #print(predvalu)
                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))

                    #print(stddev)

                    


                    


                    residualsklearndfvalues = pd.DataFrame({'timestamp':labe, titless2:valu})
                    residualsklearndfoutliers = pd.DataFrame({'timestamp':labe, titless2:outliers})
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                    residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                


                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                    if len(valuesweekday) == 0:
                        print('')
                    elif len(valuesweekend) == 0:
                        print('')
                    else:

                        print(mean_squared_error(values5, predictedweekday))
                        print(r2_score(values5, predictedweekday))
                        print(mean_squared_error(values5, predictedweekend))
                        print(r2_score(values5, predictedweekend))

                    
                    print(valu)
                    
                    print(outliers)

                    print(meter_id)

                    residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                    if valu == []:
                        print('0 data')
                    else:


                        residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                        print(residualsklearndfvalues[titless2])

                        residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                        residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                        print(residualsklearndfvalues)

                        testarr = np.array(residualsklearndfvalues[titless2])

                        z = len(testarr)
                        y = 0
                        valtest = []
                        while y < z:
                            val = testarr[y]
                            if np.isnan(val) == True:
                                valtest.append('f')
                            else:
                                
                                valtest.append(int(val))
                            y += 1
                        testarrvalus = valtest

                        print(testarrvalus)
                        print(len(testarrvalus))

                        testarrlabe = residualsklearndfvalues.reset_index()
                        testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                        z = len(testarrlabe)
                        y = 0
                        labetest = []
                        while y < z:
                            lab = testarrlabe[y]
                            labetest.append(lab)
                            y += 1
                        testarrlabe = labetest
                        print(testarrlabe)
                        print(len(testarrlabe))
                        print(len(line_values))

                        line_values = testarrvalus
                        line_labels = testarrlabe



                        residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')

                        residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]

                        residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                        testarroutliers = np.array(residualsklearndfoutliers[titless2])

                        print(testarroutliers)

                        z = len(testarroutliers)
                        y = 0
                        outtest = []
                        while y < z:
                            out = testarroutliers[y]
                            print(out)
                            if out == 'f':
                                outtest.append('f')
                            elif np.isnan(out) == True:
                                outtest.append('f')
                            else:
                                
                                outtest.append(int(out))
                            y += 1
                        testarroutliers = outtest

                        print(testarroutliers)
                        print(len(testarroutliers))

                        line_outliers = testarroutliers

                        residualsklearndfvalues = pd.DataFrame({'time':line_labels, titless2:line_values})
                        residualsklearndfoutliers = pd.DataFrame({'time':line_labels, titless2:line_outliers})
                        residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf = pd.DataFrame({'time':line_labels, titless2:line_values})


                        #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, titless2:line_values})
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, titless2:line_outliers})
                    residualdf = pd.DataFrame({'time':line_labels, titless2:line_values})
                        
                            

                    if valu == []:
                        titless2 = 'Error No Data Available for ' + str(titlefixtemp)
                        #print(titless2)
                        return render_template('view 19 index.html', outlier=line_outliers, title=titless2,min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel)

                    else:
                        
                    
                        return render_template('view 19.html', outlier=line_outliers, title=titless2,min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel)
                

                elif datatype == 'Wifi':
                    print(datatype)

                    try:
                        Building_name = request.form.get('buildingselection')
                        #print(Building_name)
                        Floor_name = request.form.get('meterselection')
                        #print(Floor_name)
                        #parameterwifi = request.form.get('parameters')
                        parameterwifi = request.form.get('paramselection')
                        #print(parameterwifi)
                        startdate = request.form.get('starttime')
                        enddate = request.form.get('endtime')
                        #print(startdate)
                        #print(enddate)
                    except:
                        Building_name = 'Pendle'
                        Floor_name = 'C floor'
                        parameterwifi = '`Authenticated Client Count`'
                    if Building_name == None:
                        Building_name = 'Pendle'
                    if Floor_name == None:
                        Floor_name = 'C floor'
                    if parameterwifi == None:
                        parameterwifi = '`Authenticated Client Count`'
                    if startdate == None:
                        startdate = "'2018-11-08 00:00:00'"
                    if enddate == None:
                        enddate = "'2018-11-08 01:00:00'"

                  
                    Building_name_title = Building_name
                    Floor_name_title = Floor_name
                    residualstartdate = startdate
                    residualenddate = enddate        
                    #parameterwifi = 'Associated Client Count'
                    Bulding_name = str(Building_name)
                    Floor_name = str(Floor_name)
                    Building_name = Building_name.replace('(','\\(')
                    Building_name = Building_name.replace(')','\\)')
                    parameterwifi = str(parameterwifi)
                    parameterwifi = parameterwifi.replace('`','')
                    parameterwifititle = parameterwifi
                    parameterwifi = '`' + parameterwifi + '`'
                    
                    startdate = str(startdate).replace('T',' ')
                    #startdate = "'2018-11-08 00:00:00'"
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    #enddate = "'2018-11-09 01:00:00'"
                    enddate = "'" + enddate + "'"
                    #print(startdate)
                    #print(enddate)
                    if startdate == "''":
                        startdate = "'2018-11-08 00:00:00'"
                    if enddate == "''":
                        enddate = "'2018-11-09 01:00:00'"
                    startdate = startdate.replace("'", "")
                    enddate = enddate.replace("'","")
                    residualstartdate = startdate.replace(' ','T')
                    residualenddate = enddate.replace(' ','T')
                    #print(residualstartdate)
                    #print(residualenddate)
                    startdate = "'" + startdate + "'"
                    enddate = "'" + enddate + "'" 
                    #print(startdate)
                    #print(enddate)

                    print(parameterwifi)
                    print(parameterwifititle)

                    if parameterwifi == '`Total Client Count`':
                        #parameterwifi = '`Associated Client Count`'
                        parameterwifititle = 'Total Client Count'
                        print(parameterwifi)
                        print(parameterwifititle)
                    else:
                        print('n')

                    
                    
                    table = '[' + 'wifitest' + Building_name_title.upper() + Floor_name_title.upper() + ']'

                    print(table)

                    wifitablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Wifitables.csv")

                    wifitables = wifitablesdf['tables']

                    wifitables = np.array(wifitables)

                    tablecheck = 'wifitest' + Building_name_title.upper() + Floor_name_title.upper()

                    print(table)
                    print(tablecheck)

                    print(str(wifitables[0]).replace('|', ''))
                    

                    conn = sqlite3.connect('/Users/Luke/ENGR301/For Cloud and GitHub/test2.db')

                    c = conn.cursor()

                    a = 0

                    while a < len(wifitables):
                        check = wifitables[a]
                        check = str(check).replace('|', '')

                        if tablecheck == check:

                    

                            query = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                            query2 = "SELECT `time` FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                            c.execute(query)




                            dataset = c.fetchall()

                            dataset2 = np.array(dataset)

                            c.execute(query2)

                            timeaxis = c.fetchall()

                            a = len(wifitables) + 1

                        else:
                            dataset = []
                            dataset2 = np.array(dataset)
                            timeaxis = []


                            
                        a+=1

                    x = pd.DataFrame(timeaxis, columns=['time'])
                    x['data'] = dataset2

                    xxx = x['time']

                    x['time'] = pd.to_datetime(x['time'], format = '%Y-%m-%d %H:%M:%S')

                    x2 = x.set_index('time')


                    ####################################

                    labels5 = xxx

                    values5 = x['data']

                    values5 = np.array(values5)

                    x5 = pd.DataFrame(timeaxis, columns=['time'])
                    x5['data'] = values5


                    a = 0
                    X5 = 0
                    X6 = []
                    XYear = []
                    XMonth= []
                    XDay= []
                    XHour= []
                    XMin= []
                    Xsec= []

                    while a < len(labels5):
                        X5 = str(labels5[a])
                        X5 = X5.replace('[', '')
                        X5 = X5.replace(']', '')
                        X5 = X5.replace("'", "")
                        X5 = X5.replace(":", " ")
                        X5 = X5.replace("-", " ")
                        X5 = X5.replace("/", " ")
                        X5=X5.split()
                        X55 = X5[-3:-1]
                        X6.append(X55)
                        a+=1


                    X7 = np.array(X6)

                    
                    ############################

                    #################################### Smart model datetime


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.replace('-',' ')
                    startdate = startdate.replace(':',' ')
                    startdate = startdate.replace("'"," ")

                    enddate = enddate.replace('-',' ')
                    enddate = enddate.replace(':',' ')
                    enddate = enddate.replace("'"," ")


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.split()
                    enddate = enddate.split()

                    #print(startdate)
                    #print(enddate)

                    startyear = int(startdate[0])
                    startmonth = int(startdate[1])
                    startday = int(startdate[2])

                    endyear = int(enddate[0])
                    endmonth = int(enddate[1])
                    endday = int(enddate[2])

                    startdate = datetime.datetime(startyear, startmonth, startday)
                    enddate = datetime.datetime(endyear, endmonth, endday)
                    z = enddate-startdate

                    #print(z)

                    modelstart = startdate - (4*z)

                    modelend = startdate

                    print(modelstart)
                    print(modelend)

                    weekday00 = []
                    weekday0 = []
                    weekday1 = []
                    weekday2 = []
                    weekday3 = []
                    weekday4 = []
                    weekday5 = []
                    weekday6 = []

                    weekday = []
                    weekend = []

                    weekdaynumber = []
                    weekendnumber = []

                    weekdaydatetime = []
                    weekenddatetime = []

                    modelstart2 = modelstart
                    modelstart3 = modelstart
                    modelend3 = modelend
                    


                    while modelstart2 != modelend + datetime.timedelta(days=1):
                        AA = modelstart2

                        AAday = AA.weekday()

                        #print(AA)
                        #print(AAday)

                        if AAday < 5:
                            weekday.append(str(AA))
                            weekdaynumber.append(AAday)
                            weekdaydatetime.append(AA)
                        else:
                            weekend.append(str(AA))
                            weekendnumber.append(AAday)
                            weekenddatetime.append(AA)
                            

                        modelstart2 = modelstart2 + datetime.timedelta(days=1)



                    print(weekday)

                    print(weekend)

                    print(weekdaynumber)

                    print(weekendnumber)

                    print(weekdaydatetime)

                    print(weekenddatetime)

                    

                    modelstart = str(modelstart)
                    modelstart = "'" + modelstart + "'"

                    modelend = str(modelend)
                    modelend = "'" + modelend + "'"

                    #print(modelstart)

                    #print(modelend)


                    a = 0
                    aa = 0

                    modelweekdaystart = []
                    modelweekdayend = []
                    modelweekendstart = []
                    modelweekendend = []

                    modelweekday = []
                    modelweekend = []

                    modelweekday2 = []
                    modelweekend2 = []

                    while modelstart3 != modelend3 + datetime.timedelta(days=1):

                        

                        if len(weekday) == 0:
                            weekday = weekday
                            b = ''
                            d = -1
                            f = datetime.datetime.now()
                        else:

                            if len(weekday) > a:
                                b = weekday[a]
                                d = weekdaynumber[a]
                                f = weekdaydatetime[a]
                                
                            else:
                                b = weekday[0]
                                d = weekdaynumber[0]
                                f = datetime.datetime.now()

                        if len(weekend) == 0:
                            cc = ''
                            e = -1
                            g = datetime.datetime.now()
                            
                        else:
                            
                            if len(weekend) > aa:
                                cc = weekend[aa]
                                e = weekendnumber[aa]
                                g = weekenddatetime[aa]
                                
                            else:
                                cc = weekend[0]
                                e = weekendnumber[0]
                                g = datetime.datetime.now()
                            


                        if f > g:
                            #print(g)

                            modelweekend.append(cc)

                            if e == 6:
                                


                                #print(modelweekend)

                                g = g + datetime.timedelta(days=1)

                                modelweekend.append(str(g))

                                modelweekend2.append(modelweekend)

                                

                                modelweekend = []

                            
                                

                            
                            aa+=1


                        else:
                            #print(f)

                            modelweekday.append(b)

                            if d == 4:
                                #print(modelweekday)

                                f = f + datetime.timedelta(days=1)

                                modelweekday.append(str(f))

                                
                                

                                modelweekday2.append(modelweekday)

                                modelweekday = []

                            
                            a+=1


                        
                        modelstart3 = modelstart3 + datetime.timedelta(days=1)


                    if len(modelweekday) > 0:
                        
                        f = f + datetime.timedelta(days=1)

                        modelweekday.append(str(f))

                        modelweekday2.append(modelweekday)

                    if len(modelweekend) > 0:
                        
                        g = g + datetime.timedelta(days=1)

                        modelweekend.append(str(g))

                        modelweekend2.append(modelweekend)
                        

                    #print(modelweekday)
                    #print(modelweekend)

                    print(modelweekday2)
                    #print(modelweekday2)
                    print(modelweekend2)
                    #print(modelweekend2)



                    loopdataweekday = []

                    looptimeaxisweekday = []

                    loopdataweekend = []

                    looptimeaxisweekend = []

                    


                    a = 0
                    b = 0

                    while a < len(modelweekday2):
                        start = modelweekday2[a][0]
                        end = modelweekday2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"


                        while b < len(wifitables):
                            check = wifitables[b]

                            check = str(check).replace('|', '')

                            if tablecheck == check:
                                query3loop = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                                query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                                c.execute(query3loop)


                                dataset3loop = c.fetchall()

                                dataset4loop = np.array(dataset3loop)

                                print(len(dataset4loop))

                                c.execute(query4loop)

                                timeaxis3loop = c.fetchall()

                                print(len(timeaxis3loop))

                                b = len(wifitables) + 1

                            else:
                                dataset3loop = []
                                dataset4loop = np.array(dataset3loop)
                                timeaxis3loop = []


                                
                            b+=1

           
                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekday.append(dataset4loop)
                                looptimeaxisweekday.append(timeaxis3loop)



                        a +=1

                    a = 0
                    b = 0

                    while a < len(modelweekend2):
                        start = modelweekend2[a][0]
                        end = modelweekend2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"


                        while b < len(wifitables):
                            check = wifitables[b]
                            check = str(check).replace('|', '')

                            if tablecheck == check:
                                query3loop = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                                query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                                c.execute(query3loop)


                                dataset3loop = c.fetchall()

                                dataset4loop = np.array(dataset3loop)

                                print(len(dataset4loop))

                                c.execute(query4loop)

                                timeaxis3loop = c.fetchall()

                                print(len(timeaxis3loop))

                                b = len(wifitables) + 1

                            else:
                                dataset3loop = []
                                dataset4loop = np.array(dataset3loop)
                                timeaxis3loop = []


                                
                            b+=1

                       

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekend.append(dataset4loop)
                                looptimeaxisweekend.append(timeaxis3loop)



                        a +=1


                    #print(loopdataweekday)
                    print(len(looptimeaxisweekday))
                    #print(loopdataweekend)
                    #print(looptimeaxisweekend)

                   # print(len(loopdataweekday))
                    #print(len(looptimeaxisweekday))
                   # print(len(loopdataweekend))
                    #print(len(looptimeaxisweekend))


                    


    ##########weekday data
                    a = 0

                    if len(loopdataweekday) == 0:
                        print('')
                        dataset444 = []
                    else:

                        dataset444 = loopdataweekday[0]

                    while a < len(loopdataweekday):

                        dataset111 = loopdataweekday[a]

                        print(len(dataset111))

                        print(dataset111[0])
                        print(dataset444[0])

                        if np.all(dataset111 == dataset444):
                            print(np.all(dataset111 == dataset444))
                            dataset555 = dataset444

                        else:

                            dataset555 = np.concatenate([dataset555, dataset111])
                            dataset444 = np.concatenate([dataset444, dataset111])

                            print(len(dataset444))
                            print(len(dataset555))


                        a+=1


                    #print(dataset444)


################weekend data
                    a = 0

                    if len(loopdataweekend) == 0:
                        print('')
                        dataset4444 = []
                    else:

                        dataset4444 = loopdataweekend[0]

                    while a < len(loopdataweekend):

                        dataset1111 = loopdataweekend[a]

                        print(len(dataset1111))

                        print(dataset1111[0])
                        print(dataset4444[0])

                        if np.all(dataset1111 == dataset4444):
                            print(np.all(dataset1111 == dataset4444))
                            dataset5555 = dataset4444

                        else:

                            dataset5555 = np.concatenate([dataset5555, dataset1111])
                            dataset4444 = np.concatenate([dataset4444, dataset1111])

                            print(len(dataset4444))
                            print(len(dataset5555))


                        a+=1


                    #print(dataset4444)


        ##########weekday timeaxis
                    a = 0

                    if len(looptimeaxisweekday) == 0:
                        print('')
                        timeaxis444 = []
                    else:

                        timeaxis444 = looptimeaxisweekday[0]

                    while a < len(looptimeaxisweekday):

                        timeaxis111 = looptimeaxisweekday[a]

                        print(len(timeaxis111))

                        print(timeaxis111[0])
                        print(timeaxis444[0])

                        if timeaxis111[0] == timeaxis444[0]:
                            timeaxis555 = timeaxis444

                        else:

                            timeaxis555 = timeaxis555 + timeaxis111
                            timeaxis444 = timeaxis444 + timeaxis111
                            

                            print(len(timeaxis444))
                            print(len(timeaxis555))


                        a+=1


                    #print(timeaxis444)


################weekend timeaxis
                    a = 0

                    if len(looptimeaxisweekend) == 0:
                        print('')
                        timeaxis4444 = []
                    else:

                        timeaxis4444 = looptimeaxisweekend[0]

                    

                    while a < len(looptimeaxisweekend):

                        timeaxis1111 = looptimeaxisweekend[a]

                        print(len(timeaxis1111))

                        print(timeaxis1111[0])
                        print(timeaxis4444[0])

                        if timeaxis1111[0] == timeaxis4444[0]:
                            timeaxis5555 = timeaxis4444

                        else:

                            #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                            timeaxis5555 = timeaxis5555 + timeaxis1111
                            timeaxis4444 = timeaxis4444 + timeaxis1111

                            print(len(timeaxis4444))
                            print(len(timeaxis5555))


                        a+=1


                    #print(timeaxis4444)

                    print(len(timeaxis444))
                    print(len(dataset444))

                    print(len(timeaxis4444))
                    print(len(dataset4444))



                    x10fweekday = pd.DataFrame(timeaxis444, columns=['time'])
                    x10fweekday['data'] = dataset444

                    labelsweekday = x10fweekday['time']

                    valuesweekday = x10fweekday['data']

                    valuesweekday = np.array(valuesweekday)

                    #print(labelsweekday)
                    #print(valuesweekday)



                    

                    x10fweekend = pd.DataFrame(timeaxis4444, columns=['time'])
                    x10fweekend['data'] = dataset4444

                    labelsweekend = x10fweekend['time']

                    valuesweekend = x10fweekend['data']

                    valuesweekend = np.array(valuesweekend)

                    #print(labelsweekend)
                    #print(valuesweekend)

                    weekdaylabeldateday = []
                    weekendlabeldateday = []



                    if len(labelsweekday) == 0:
                        print('')

                    else:
                        

                        a = 0
                        
                        X22 = 0
                        X33 = []
                        X777 = []
                        X778 = []
                        X779 = []
                        X77 = []


                        while a < len(labelsweekday):
                            X22 = labelsweekday[a]
                            X22 = X22.replace('[', '')
                            X22 = X22.replace(']', '')
                            X22 = X22.replace("'", "")
                            X22 = X22.replace(":", " ")
                            X22 = X22.replace("-", " ")
                            X22 = X22.replace("/", " ")
                            X22=X22.split()
                            X225 = X22[-3:-1]

                            X771 = X22[0]
                            X772 = X22[1]
                            X773 = X22[2]
                            
                            X777.append(X771)
                            X778.append(X772)
                            X779.append(X773)
                            
                            X33.append(X225)

                            weekdayyear = int(X22[0])
                            weekdaymonth = int(X22[1])
                            weekdayday = int(X22[2])

                            weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                            weekdaylabeldateday.append(weekdaylabeldate.weekday())

                            
                            a+=1

                        X44 = np.array(X33)



                    if len(valuesweekend) == 0:
                        print('')

                    else:



                        a = 0
                        
                        XX22 = 0
                        XX33 = []
                        XX777 = []
                        XX778 = []
                        XX779 = []
                        XX77 = []


                        while a < len(labelsweekend):
                            XX22 = labelsweekend[a]
                            XX22 = XX22.replace('[', '')
                            XX22 = XX22.replace(']', '')
                            XX22 = XX22.replace("'", "")
                            XX22 = XX22.replace(":", " ")
                            XX22 = XX22.replace("-", " ")
                            XX22 = XX22.replace("/", " ")
                            XX22=XX22.split()
                            XX225 = XX22[-3:-1]

                            XX771 = XX22[0]
                            XX772 = XX22[1]
                            XX773 = XX22[2]
                            
                            XX777.append(XX771)
                            XX778.append(XX772)
                            XX779.append(XX773)
                            
                            XX33.append(XX225)

                            weekendyear = int(XX22[0])
                            weekendmonth = int(XX22[1])
                            weekendday = int(XX22[2])

                            weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                            weekendlabeldateday.append(weekendlabeldate.weekday())
                            
                            a+=1

                        XX44 = np.array(XX33)


                    #print(X44)
                    #print(XX44)










                    print(len(weekdaylabeldateday))
                   # print(weekdaylabeldateday)

                    print(len(valuesweekday))
                    #print(valuesweekday)


                    a = 25

                    weekdayvaluesavg = []
                    weekdaylabelsavg = []
                    weekdaypredavg = []

                    while a < len(weekdaylabeldateday):
                        a1 = int(valuesweekday[a])
                        a2 = int(valuesweekday[a-1])
                        a3 = int(valuesweekday[a-2])
                        a4 = int(valuesweekday[a-3])
                        a5 = int(valuesweekday[a-4])
                        a6 = int(valuesweekday[a-5])
                        a7 = int(valuesweekday[a-6])
                        a8 = int(valuesweekday[a-7])
                        a9 = int(valuesweekday[a-8])
                        a10 = int(valuesweekday[a-9])
                        a11 = int(valuesweekday[a-10])
                        a12 = int(valuesweekday[a-11])
                        a13 = int(valuesweekday[a-12])
                        a14 = int(valuesweekday[a-13])
                        a15 = int(valuesweekday[a-14])
                        a16 = int(valuesweekday[a-15])
                        a17 = int(valuesweekday[a-16])
                        a18 = int(valuesweekday[a-17])
                        a19 = int(valuesweekday[a-18])
                        a20 = int(valuesweekday[a-19])
                        a21 = int(valuesweekday[a-20])
                        a22 = int(valuesweekday[a-21])
                        a23 = int(valuesweekday[a-22])
                        a24 = int(valuesweekday[a-23])
                        a25 = int(valuesweekday[a-24])
                        a26 = int(valuesweekday[a-25])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                        

                        #print(aavg)

                        if weekdaylabeldateday[a] == 5:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a = a + 26

                        else:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a +=1



                    print(len(weekdaylabeldateday))
                    print(len(weekdayvaluesavg))
                    print(len(weekdaylabelsavg))



                    print(len(weekendlabeldateday))
                    #print(weekendlabeldateday)

                    print(len(valuesweekend))
                    #print(valuesweekend)

                        

                    a = 25

                    weekendvaluesavg = []
                    weekendlabelsavg = []
                    weekendpredavg = []

                    while a < len(weekendlabeldateday):
                        a1 = int(valuesweekend[a])
                        a2 = int(valuesweekend[a-1])
                        a3 = int(valuesweekend[a-2])
                        a4 = int(valuesweekend[a-3])
                        a5 = int(valuesweekend[a-4])
                        a6 = int(valuesweekend[a-5])
                        a7 = int(valuesweekend[a-6])
                        a8 = int(valuesweekend[a-7])
                        a9 = int(valuesweekend[a-8])
                        a10 = int(valuesweekend[a-9])
                        a11 = int(valuesweekend[a-10])
                        a12 = int(valuesweekend[a-11])
                        a13 = int(valuesweekend[a-12])
                        a14 = int(valuesweekend[a-13])
                        a15 = int(valuesweekend[a-14])
                        a16 = int(valuesweekend[a-15])
                        a17 = int(valuesweekend[a-16])
                        a18 = int(valuesweekend[a-17])
                        a19 = int(valuesweekend[a-18])
                        a20 = int(valuesweekend[a-19])
                        a21 = int(valuesweekend[a-20])
                        a22 = int(valuesweekend[a-21])
                        a23 = int(valuesweekend[a-22])
                        a24 = int(valuesweekend[a-23])
                        a25 = int(valuesweekend[a-24])
                        a26 = int(valuesweekend[a-25])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                        #print(aavg)

                        if weekendlabeldateday[a] == 0:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a = a + 26

                        else:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a +=1



                    weekdaypredavg = np.array(weekdaypredavg)
                    weekendpredavg = np.array(weekendpredavg)

                    print(len(weekendlabeldateday))
                    print(len(weekendvaluesavg))
                    print(len(weekendlabelsavg))

                    print(weekendlabeldateday)
                    print(weekendvaluesavg)
                    print(weekendlabelsavg)


                    #print(X44)
                    #print(XX44)

                    print(len(weekdaypredavg))
                    print(len(weekendpredavg))







                    regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekday) == 0:
                        print('')
                        predvaluweekday = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekday = []

                    else:

                        regr.fit(X44, valuesweekday)
                        #regr.fit(weekdaypredavg, weekdayvaluesavg)
                        predictedweekday = regr.predict(X7)


                        print(predictedweekday)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekday)
                        k = 0
                        predvaluweekday = []
                        while k < i:
                            predvalweekday = predictedweekday[k]
                            predvaluweekday.append(predvalweekday)
                            k += 1
                        print(predvaluweekday)

                        print(len(predvaluweekday))




                    regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekend) == 0:
                        print('')
                        predvaluweekend = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekend = []

                    else:

                        regrf.fit(XX44, valuesweekend)
                        #regrf.fit(weekendpredavg, weekendvaluesavg)
                        predictedweekend = regrf.predict(X7)


                        print(predictedweekend)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekend)
                        k = 0
                        predvaluweekend = []
                        while k < i:
                            predvalweekend = predictedweekend[k]
                            predvaluweekend.append(predvalweekend)
                            k += 1
                        print(predvaluweekend)

                        print(len(predvaluweekend))
                        
                    


                    predvalu = predvaluweekday

                    
                    
                    

                    ####################################





                    conn.close()


                    title2 = Building_name_title + ': ' + Floor_name_title + ' ' + parameterwifititle

                    xmin = residualstartdate.replace('T', ' ')
                    xmax = residualenddate.replace('T', ' ')

                    labels = x['time']

                    #values = x['data']
                    values = x5['data']

                    print(values)
                    print(values5)
                    



                    
                    i = len(values)
                    k = 0
                    valu = []
                    while k < i:
                        val = values[k]
                        valu.append(val)
                        k += 1
                    #print(valu)
                    print(len(valu))

                    z = len(labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = labels[y]
                        labe.append(lab)
                        y += 1
                    #print(labe[0])
                    #print(labels[0])


                    a = 0
                    X2 = 0
               

                    X227 = []
                    X228 = []
                    X229 = []
                    X22 = []
                    X2727 = []

                    while a < len(labels):
                        X2 = str(labels[a])
                        X2 = X2.replace('[', '')
                        X2 = X2.replace(']', '')
                        X2 = X2.replace("'", "")
                        X2 = X2.replace(":", " ")
                        X2 = X2.replace("-", " ")
                        X2 = X2.replace("/", " ")
                        X2=X2.split()
                        X25 = X2[-3:-1]

                        X221 = X2[0]
                        X222 = X2[1]
                        X223 = X2[2]
                        
                        X227.append(X221)
                        X228.append(X222)
                        X229.append(X223)
                        a+=1


                    #print(X227[0])
                    #print(X228[0])
                    #print(X229[0])



                    a = 0

                    while a < len(X227):
                        

                        X2227 = int(X227[a])
                        X2228 = int(X228[a])
                        X2229 = int(X229[a])
                        
                        X22222 = datetime.date(X2227, X2228, X2229)

                        X22222 = X22222.weekday()

                        X2727.append(X22222)

                        a+=1
                        
                    #print(X77)
                    #print(X2727)

                    value_max = x5['data'].max() + 1
                    value_min = x5['data'].min()
                    if value_min == 0:
                        value_min = value_min
                    else:
                        value_min = value_min - 1
                    line_labels=labe
                    line_values=valu

                    #residualdf = pd.DataFrame({'time':labe, title2:valu})


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    a=0

                    weekendvalu = []
                    weekdayvalu = []

                    while a < len(valu):
                        if X2727[a] == 5:
                            weekendvalu.append(valu[a])

                        elif X2727[a] == 6:
                            weekendvalu.append(valu[a])

                        else:
                            weekdayvalu.append(valu[a])
                        a+=1
                        

                    weekdaystddev = np.std(weekdayvalu)
                    weekendstddev = np.std(weekendvalu)

                    print(weekdayvalu)
                    print(weekendvalu)
                    print(weekdaystddev)
                    print(weekendstddev)


                    if len(valuesweekday) == 0:
                        #print('hi')


                        avgg = np.mean(valu)
                        medavgg = np.median(valu)
                        stddev = np.std(valu)
                        #print(avgg)
                        #print(medavgg)
                        #print(stddev)

                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                        z = avgg + (3*stddev)
                        zz = avgg - (3*stddev)

                        while v < len(valu):
                            if valu[v] > z:
                                #print('bigger')
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < zz:
                                #print('smaller')
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                

                                        
                                    
                            v += 1

                            
                    elif len(predvaluweekend) == 0:

                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            
                        while v < len(valu):
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                            v +=1

                    else:       
                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                                

                        while v < len(valu):

                            if X2727[v] == 6:
                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                            
                                        
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                            
                                        
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                            
                                    


                            elif X2727[v] == 5:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                            
                                        
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                            
                                        
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                            
                                    



                            else:
                                if valu[v] > (predvalu[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                            
                                        
                                    valus.append('f')

                                elif valu[v] < (predvalu[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                            
                                        
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                            
                                    
                            v += 1

                    



                        
                    #print(outliers)
                    #print(valus)
                    #print(valu)

                    #print(len(outliers))
                    #print(len(valus))
                    #print(len(valu))

                    #print(z)
                    #print(zz)

                    legend=title2
                        
                    #print(valus)
                    #line_values=valus
                    #print(line_values)
                    #line_outliers = outliers

                    if len(valuesweekday) == 0:
                        line_values=valus
                        line_outliers = outliers
                    elif len(labels5) == 0:
                        line_values=valus
                        line_outliers = outliers

                    else:
                        line_values=valu
                        line_outliers = predvalu

                        #print(valus[0])
                        #print(predvalu[0])
                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))


                    line_values=valu
                    #line_outliers = predvalu

                    #print(valus)
                    #print(predvalu)
                    #print(stddev)



                    line_values=valu
                    line_outliers = outliers

                    residualsklearndfvalues = pd.DataFrame({'time':labe, title2:line_values})
                    residualsklearndfoutliers = pd.DataFrame({'time':labe, title2:line_outliers})
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                    residualdf = pd.DataFrame({'time':labe, title2:line_values})


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                


                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                    
                    if len(valuesweekday) == 0:
                        print('')
                    elif len(valuesweekend) == 0:
                        print('')
                    else:
                        print(mean_squared_error(values5, predictedweekday))
                        print(r2_score(values5, predictedweekday))
                        print(mean_squared_error(values5, predictedweekend))
                        print(r2_score(values5, predictedweekend))


                    meter_id = Building_name_title + ' ' + Floor_name_title

                    print(meter_id)

                    residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")



                    if valu == []:
                        print('0 data')
                    else:

                        residualsklearndfvalues = residualsklearndfvalues.set_index('time')

                        residualsklearndfvalues.index = residualsklearndfvalues.index.map(lambda x: x.replace(second=0))
                        
                        print(residualsklearndfvalues[title2].head(30))

                        residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                        residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                        print(residualsklearndfvalues.head(75))

                        testarr = np.array(residualsklearndfvalues[title2])

                        z = len(testarr)
                        y = 0
                        valtest = []
                        while y < z:
                            val = testarr[y]
                            if np.isnan(val) == True:
                                valtest.append('f')
                            else:
                                
                                valtest.append(int(val))
                            y += 1
                        testarrvalus = valtest

                        print(testarrvalus)
                        print(len(testarrvalus))

                        testarrlabe = residualsklearndfvalues.reset_index()
                        testarrlabe = pd.to_datetime(testarrlabe['time'], format = '%Y-%m-%d %H:%M')

                        z = len(testarrlabe)
                        y = 0
                        labetest = []
                        while y < z:
                            lab = testarrlabe[y]
                            labetest.append(lab)
                            y += 1
                        testarrlabe = labetest
                        #print(testarrlabe)
                        #print(len(testarrlabe))
                        #print(len(line_values))

                        line_values = testarrvalus
                        line_labels = testarrlabe



                        residualsklearndfoutliers = residualsklearndfoutliers.set_index('time')
                        residualsklearndfoutliers.index = residualsklearndfoutliers.index.map(lambda x: x.replace(second=0))


                        residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]


                        residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                        testarroutliers = np.array(residualsklearndfoutliers[title2])

                        print(testarroutliers)

                        z = len(testarroutliers)
                        y = 0
                        outtest = []
                        while y < z:
                            out = testarroutliers[y]
                            if out == 'f':
                                outtest.append('f')
                            elif np.isnan(out) == True:
                                outtest.append('f')
                            else:
                                
                                outtest.append(int(out))
                            y += 1
                        testarroutliers = outtest

                        print(testarroutliers)
                        print(len(testarroutliers))

                        line_outliers = testarroutliers

                        print(line_outliers)
                        #print(line_labels)
                        print(line_values)
                        print(len(line_outliers))
                        #print(len(line_labels))
                        print(len(line_values))

                        residualsklearndfvalues = pd.DataFrame({'time':line_labels, title2:line_values})
                        residualsklearndfoutliers = pd.DataFrame({'time':line_labels, title2:line_outliers})
                        residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf = pd.DataFrame({'time':line_labels, title2:line_values})


                        #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, title2:line_values})
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, title2:line_outliers})
                    residualdf = pd.DataFrame({'time':line_labels, title2:line_values})

                        

                        

                    


                    
                    if valu == []:
                        title2 = 'Error No Data Available for Floor: ' + Building_name_title + ' ' + Floor_name_title
                        #print(title2)

                        return render_template('view 19 index.html', outlier=line_outliers, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax)


                    else:
                        return render_template('view 19.html',legend=legend, outlier=line_outliers, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle)




                    

        elif testbutton == 'add':

            datatype = request.form.get('Dataset')
            print(datatype)


            if datatype == 'EMS':
                    
                print('add')
                dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                oldvalues1 = dfold.iloc[:,2].values
                oldtimestamp = dfold.iloc[:,1].values
                oldtitle = dfold.columns[2]
                print(oldvalues1)
                print(oldtimestamp)
                print(oldtitle)

                oldylabelarray = str(oldtitle).split()
                #oldylabel = oldylabelarray[-1]

                if oldylabelarray[-1] == 'Count':
                    oldylabel = oldylabelarray[-3] + ' ' + oldylabelarray[-2] + ' ' + oldylabelarray[-1]
                else:
                    oldylabel = oldylabelarray[-1]

                

                #print(oldvalue_max)
                #print(oldvalue_min)
                #print(oldylabel)

                oldvalue_min = 0
                oldvalue_max = 0
                
                

                it = len(oldvalues1)
                kt = 0
                oldvalu = []
                while kt < it:
                    oldval = oldvalues1[kt]
                    if oldval == 'f':
                        oldvalu.append(oldval)
                    else:
                        oldvalu.append(int(oldval))
                    kt += 1
                #print(oldvalu)

                dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")

                dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                it = len(dfoldpredvalues1)
                kt = 0
                oldpredvalu = []
                while kt < it:
                    oldpredval = dfoldpredvalues1[kt]
                    if oldpredval == 'f':
                        oldpredvalu.append(oldpredval)
                    else:
                        oldpredvalu.append(int(float(oldpredval)))
                    kt += 1
                print(oldpredvalu)
                oldoutliers = oldpredvalu

                x = 0
                y=0

                v = 0

                print(oldvalu)

                while v < len(oldvalu):

                    if oldvalu[v] == 'f':
                        x = oldvalu[v]
                        
                    else:
                        x = oldvalu[v]
                        

                    if oldpredvalu[v] == 'f':
                        y = oldpredvalu[v]
                    else:
                        y = int(oldpredvalu[v])
                        

                    if x == 'f':
                        if y == 'f':
                            v=v
                        elif y > oldvalue_max:
                            oldvalue_max = y
                        elif y < oldvalue_min:
                            oldvalue_min = y
                        else:
                            v=v
                    else:
                        
                        if y == 'f':
                            if x > oldvalue_max:
                                oldvalue_max = x
                            elif x < oldvalue_min:
                                oldvalue_min = x
                            else:
                                v=v
                        else:
                            if x > y:
                                if x > oldvalue_max:
                                    oldvalue_max = x
                                elif y < oldvalue_min:
                                    oldvalue_min = y
                                else:
                                    v=v

                            elif y > x:
                                if x < oldvalue_min:
                                    oldvalue_min = x
                                elif y > oldvalue_max:
                                    oldvalue_max = y
                                else:
                                    v=v
                            else:
                                
                                if x < oldvalue_min:
                                    oldvalue_min = x
                                elif y > oldvalue_max:
                                    oldvalue_max = y
                                else:
                                    v=v
                                    

                    #print(x)
                    #print(y)
                    v+=1
                            


                
                dfold2 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                oldvalues2 = dfold2.iloc[:,2].values
                oldtimestamp2 = dfold2.iloc[:,1].values
                oldtitle2 = dfold2.columns[2]
                #print(oldvalues2)
                #print(oldtimestamp2)
                #print(oldtitle2)

                oldylabelarray2 = str(oldtitle2).split()

                if oldylabelarray2[-1] == 'Count':
                    oldylabel2 = oldylabelarray2[-3] + ' ' + oldylabelarray2[-2] + ' ' + oldylabelarray2[-1]
                else:
                    oldylabel2 = oldylabelarray2[-1]

                
                #print(oldvalue_max2)
                #print(oldvalue_min2)
                #print(oldylabel2)
                

                it = len(oldvalues2)
                kt = 0
                oldvalu2 = []
                while kt < it:
                    oldval2 = oldvalues2[kt]
                    if oldval2 == 'f':
                        oldvalu2.append(oldval2)
                    else:
                        oldvalu2.append(int(oldval2))
                    kt += 1
                #print(oldvalu2)

                oldoldvalu = oldvalu2

                oldoldz = len(oldtimestamp2)
                oldoldy = 0
                oldoldlabe = []
                while oldoldy < oldoldz:
                    oldoldlab = oldtimestamp2[oldoldy]
                    oldoldlabe.append(oldoldlab)
                    oldoldy += 1
                #print(oldoldlabe)

                dfold2pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfold2predvalues1 = dfold2pred.iloc[:,2].values

                it = len(dfold2predvalues1)
                kt = 0
                oldpred2valu = []
                while kt < it:
                    oldpred2val = dfold2predvalues1[kt]
                    if oldpred2val == 'f':
                        oldpred2valu.append(oldpred2val)
                    else:
                        oldpred2valu.append(int(oldpred2val))
                    kt += 1
                #print(oldpred2valu)

                oldoldoutliers = oldpred2valu

                oldvalue_min2 = 0
                oldvalue_max2 = 1



                v = 0
                x = 0
                y=0
                while v < len(oldvalu2):


                    if oldvalu2[v] == 'f':
                        x = oldvalu2[v]
                    else:
                        x = int(oldvalu2[v])

                    if oldpred2valu[v] == 'f':
                        y = oldpred2valu[v]
                    else:
                        y = int(oldpred2valu[v])
                        
                    if x == 'f':
                        if y == 'f':
                            print('')
                        elif y > oldvalue_max2:
                            oldvalue_max2 = y
                        elif y < oldvalue_min2:
                            oldvalue_min2 = y
                        else:
                            v=v
                    else:
                        if y == 'f':
                            if x > oldvalue_max2:
                                oldvalue_max2 = x
                            elif x < oldvalue_min2:
                                oldvalue_min2 = x
                        else:
                            if x > y:
                                if x > oldvalue_max2:
                                    oldvalue_max2 = x
                                elif y < oldvalue_min2:
                                    oldvalue_min2 = y
                                else:
                                    v=v

                            elif y > x:
                                if x < oldvalue_min2:
                                    oldvalue_min2 = x
                                elif y > oldvalue_max2:
                                    oldvalue_max2 = y
                                else:
                                    v=v
                            else:
                                
                                if x < oldvalue_min2:
                                    oldvalue_min2 = x
                                elif y > oldvalue_max2:
                                    oldvalue_max2 = y
                                else:
                                    v=v
                    v+=1


                



                




                EMStitlefix = ["101|The Croft Electricity", "233|The Croft Water", "234|The Croft Gas", "1|Campus Services", "2|Regional Network and Services", "3|Regional Campus Co-Lo", "4|Campus Network", "5|Building Coms B", "6|Campus Servers", "7|Regional Networking Services", "8|Regional and Campus Co Lo", "24|Campus Network", "25|Building Coms A", "26|Incomer No 2 From LV2 ESS", "27|Inc No1 ESS Sw", "28|LV2 ESS Main M", "29|Ess Mech Control Centre", "30|DB-E-M1", "31|DB-E-M2", "96|Chiller No 2", "97|LV3-NE Supply", "100|ISS Total", "132|LV2-ESS Supply", "133|Chiller No 1", "264|Future UPS", "267|UPSLV-US-1", "268|UPSLV-US-3", "269|UPSLV-US-4", "374|UPS2A", "266|ISS Water Meter", "265|ISS Heat Meter","9|Chaplaincy Centre", "10|Chaplaincy Centre Kitchen", "14|Chaplaincy Centre Immersion Heater","11|Chaplaincy Centre", "12|Chaplaincy Centre Kitchen", "13|Chaplaincy Centre Heat meter", "200|Bowland Annexe Electricity", "43|Bowland Annexe Water", "201|Bowland Annexe Heating", "44|Great Hall Immersion Heater 1", "45|Great Hall Immersion Heater 2", "197|Great Hall Electricity", "211|No 1 Transformer Sub 3 Great Hall", "213|No 2 Transformer Sub 3 Great Hall","41|Great Hall Water", "198|Great Hall Gas", "42|Great Hall Heating","37|Conference Centre Electricity","38|Conference Centre Natural Gas","33|Infolab Electricity", "35|Chiller 1", "36|Chiller 2", "39|Transformer Sub 6 Info Lab 1", "40|Transformer Sub 6 Info Lab 2","34|Water Meter","32|Plant Room Natural Gas", "15|Bowland Hall 1-7 Electricity", "515|Bowland Hall 8-15 Electricity", "16|Bowland Hall 1-7 Water", "516|Bowland Hall 8-15 Water","215|Bowland Hall 1-15 Gas", "47|IENS Phase 1 Electricity", "64|IENS Phase 2 Electricity","17|IENS Phase 2 Water","281|IENS Phase 1 Natural Gas", "19|IENS Phase 2 Natural Gas","21|Biology Basement No 1 Immersion Heater", "22|Biology Basement No 2 Immersion Heater", "23|Biology Basement Animal Rooms Immersion Heater", "46|IENS Phase 1 Electricity", "51|Biology Phase 1 Immersion Heater 1", "52|Biology Phase 1 Immersion Heater 2", "85|Transformer No. 1 Sub 8 LEC 1", "87|Bus Bar Greenhouses 1", "88|Bus Bar Greenhouses 2","48|IENS Phase 1 Water","49|IENS Phase 1 Gas","50|IENS Phase 1 Heat Meter", "18|IENS Phase 2 Heat Meter","86|LEC 3 No. 1 Transformer No. 10 Sub Station","20|LEC 3 Water", "282|LEC 3 Natural Gas","53|Transformer Sub 5 Grizedale College 1", "54|Transformer Sub 5 Grizedale College 2", "57|Grizedale Town House 1", "60|Grizedale Town House 2", "273|Grizedale Bar Electricity", "276|Grizedale Laundry", "279|Grizedale Laundry Lighting","274|Grizedale Bar Water", "277|Grizedale Laundry Water", "514|Grizedale Residences Water","275|Grizedale Bar Gas", "278|Grizedale Laundry Gas", "513|Grizedale Residences Natural Gas","280|Grizedale Bar 101-108","55|Management Phase 1 Electricity", "56|Management Extension Electricity", "107|Management Immersion Heater No 1", "108|Management Immersion Heater No 2", "129|Management Phase 2 Adj Lift 1 Electricity","139|Management School Water","106|Management School Phase 1 Heat Meter","58|Pendle Main 2","59|Charles Carter Building", "298|Charles Carter A Floor A1 Total", "299|Charles Carter A Floor A1 Lighting", "300|Charles Carter A Floor A2 Total", "301|Charles Carter A Floor A2 Lighting", "302|Charles Carter B Floor B1 Total", "303|Charles Carter B Floor B1 Lighting", "304|Charles Carter B Floor B2 Total", "305|Charles Carter B Floor B2 Lighting", "306|Charles Carter Plant Room DB", "307|Charles Carter Comms Plant Room", "308|Charles Carter Plant Room Total", "310|Charles Carter Mechanical Plant", "325|Charles Carter C Floor C1 Total", "326|Charles Carter C Floor C1 Lighting", "327|Charles Carter C Floor C2 Total", "328|Charles Carter C Floor C2 Lighting", "329|Charles Carter D Floor D1 Total", "330|Charles Carter D Floor D1 Lighting", "331|Charles Carter D Floor D2 Total", "332|Charles Carter D Floor D2 Lighting","311|Charles Carter Water Meter","309|Charles Carter Heat Meter","61|Lonsdale Laundrette Electricity","62|Lonsdale Laundrette Water","63|Lonsdale Laundrette Gas","65|CHP Electricity Input", "66|CHP Output Gen", "69|Biomass Boiler Electricity", "181|Boiler House CHP Gas","67|CHP Heat Meter", "68|Biomass Heat Meter","182|Boiler Gas", "184|Firm Gas", "185|3 Gas Boilers","70|Post Graduate Statistics Building Electricity","71|Post Graduate Statistics Building Water","72|Post Graduate Statistics Building Heat Meter","73|Maintenance Workshop 2 Electricity","151|Maintenance Workshops Water","316|Maintenance Workshops Heat Meter","74|Anne Helme Garage Electricity","75|Anne Helme Garage Water Meter","76|County South Flats 5, 6, 7", "77|County South DB D2 Power", "78|County South DB D2 Lighting", "79|County South DB C2 Power", "80|County South DB C2 Lighting", "116|County South DB B1 Power", "117|County South DB B1 Lighting", "118|County South DB C1 Power", "119|County South DB C1 Lighting", "120|County South DB D1 Power", "121|County South DB D1 Lighting", "171|County South Flats 1, 2, 3, 4", "172|County South DB D3 Power", "173|County South DB D3 Lighting", "174|County South DB C3 Power", "175|County South DB C3 Lighting", "176|County South DB B3 Power", "177|County South DB B3 Lighting", "210|County South Block 75 - 77", "214|County Town Houses and County South No. 3 Substation", "223|County South C20 Modem", "238|County South BD D2 Power", "239|County South BD D2 Lighting", "242|County South Plant Room Lighting", "243|County South Plant Room Power", "244|County South Plant Room", "246|County South IAS -Old Supply", "335|County South BB01 Riser", "336|County South BB02 Riser", "337|County South BB03 Riser", "338|County South LT Plant Room", "339|County South C20 Modem Comm DB", "340|County South Plant Room Panel", "341|County South DB A1 Power", "342|County South DB A1 Lighting", "343|County South Laundrette DB", "344|County South Existing Lift", "345|County South DB 2 Room A62", "346|County South FASS", "347|County South DB LK Room 107", "348|County South DB Ext Mech Power", "349|County South Main Incomer", "372|County South Kitchen Immersion Heater", "373|County South Laundry Immersion Heater","240|County South Laundrette Water", "334|County South Residences 75 - 77 Water","241|County South Laundrette Gas", "333|County South Residences 75 - 77 Gas","245|County South Plant Room Heat Meter","236|Fylde Residences Electricity","81|Fylde Lytham Water", "209|Fylde Pilling Water","183|Furness and Fylde Residence Gas","82|Uni Travel Corr Electricity", "83|Uni Travel Front Electricity","84|Uni Travel Water","89|Faraday Lifeboat Electricity", "91|Chiller No 1", "92|Chiller No 2", "93|MCCP Meter", "158|Central Services Immersion Heater", "155|DB LCP", "156|UPS Output", "157|UPS Output Rectifier","90|Faraday Building Gas","94|Bowland Ash Electricity", "205|Bowland Ash Immersion Heater 1", "204|Bowland Ash Immersion Heater 2", "206|Bowland Ash Muslim Prayer Room","199|Bowland Ash Water","203|Bowland Ash Gas", "202|Bowland Ash Heating", "95|Non Ess (MCCN)", "98|LV4-NE Supply", "99|Incomer No. 2", "130|Chiller No 3 Fut", "131|Standby Generator","102|Bowland North Electricity","103|Bowland North Water","104|Bowland North Heat Meter","235|No 1 Transformer SS Furness Residence", "237|Furness Residence Electricity", "286|Furness Perimeter Residence Electricity", "289|Furness Perimeter Residence Immersion Heater", "105|Furness Hawkshead Water", "208|Furness Colton Water", "287|Furness Perimeter Residence Water","288|Furness Perimeter Residence Heat Meter","109|Charity Shop Electricity Meter","110|Charity Shop Water Meter","111|LUSU Housing Electricity Meter","112|John Creed 1", "135|John Creed Immersion Heater","113|John Creed Residence 3 Blocks Water", "517|John Creed Residence 4 Blocks Water","134|John Creed Residences Heat Meter","216|LEC Workshops NE Corner Electricity","114|LEC Remote Workshop Water","115|LEC Remote Workshop Gas","122|Security Office Electricity","123|Robinsons Left Electricity Meter", "124|Robinsons Right Electricity Meter", "125|Robinsons Water Meter","187|Bowland Tower South and East Wing Electricity", "126|Bowland Tower Ent DB", "127|Bowland Tower MCCP Panel", "128|Bowland Tower Sprinkler", "190|Bowland Tower Dis Board", "192|Bowland Tower Plantroom Input 7", "262|Bowland Tower Electric", "394|Bowland Tower Floor D & E Lighting Electric", "395|Bowland Tower Floor D & E Total Electricity", "396|Bowland Tower Floor F, G & H Lighting Electric", "397|Bowland Tower Floor F, G & H Total Electricity", "398|Bowland Tower Floor J, K & L Lighting Electric", "399|Bowland Tower Floor J, K & L Total Electricity", "400|Bowland Tower Floor M, N & O Lighting Electric", "401|Bowland Tower Floor M, N & O Total Electricity", "417|Bowland Tower RmB41comms Electricity", "418|Bowland Tower E Flat16/17 Electricity", "419|Bowland Tower South Flat 18 Electricity", "420|Bowland Tower South Flat 19/20 Electricity", "421|Bowland Tower East B Floor Electricity", "422|Bowland Tower East C Floor Electricity", "423|Bowland Tower South B Floor Electricity", "424|Bowland Tower South C Floor Electricity","263|Bowland Tower Water", "162|Bowland Tower Water 2", "375|Bowland Tower Slaid Hot Water", "376|Bowland Tower Hot Water F","160|Bowland Tower South and East Wing Heating", "377|Bowland Tower Heating","136|Furness College Electricity", "460|Flat 1 Comsumer Unit", "461|Flat 2 Comsumer Unit", "462|Flat 3 Comsumer Unit", "463|Flat 4 Comsumer Unit", "382|Flat 5 Comsumer Unit", "383|Flat 6 Comsumer Unit", "384|Flat 7 Comsumer Unit", "385|Flat 8 Comsumer Unit", "407|Power Section DB LCDB 021", "408|Lighting Section DB LCDB 021", "409|Power Section DB NDB 02", "410|Lighting Section DB NDB 02", "411|Power Section DB LBDB 021", "412|Lighting Section DB LBDB 021", "413|Power Section DB NDB 01", "414|Lighting Section DB NDB 01", "415|Power Section DB LADB 021", "416|Lighting Section DB LADB 021", "437|A Floor Electricity", "438|A Floor Electricity Check", "444|SW Electrical Bus Bar", "445|NW Electrical Bus Bar", "446|South Block DB DB 4X", "447|Green Room DB", "448|Computer Shop", "449|The Venue", "450|NE Plant Room DB", "468|Foyer Area D8 GDB 003", "469|North East Lift", "470|Power DB LBDB 011", "471|Power Foyer DB GDB 003", "473|Lighting Foyer DB GDB 003", "474|Power DB LADB 011", "475|Lighting DB LADB 011", "431|SW Bus Bar", "432|NE Bus Bar", "433|South Bl DB 4X", "434|NE Plant Room DB", "439|NW Pass Lift", "440|SCR TV Room", "441|Bar Dis Board ", "442|Switch Room Dis B", "443|OSS Walk Lights", "452|Pwr LB DB 11", "453|Light LB DB 11", "454|PWR Foyer GDB 3", "455|Lgt Foyer GDB 3", "456|PWR LA DB 3", "457|Light LA DB 11", "458|CW DHW System", "472|NrthBL CFlrNDB02","464|Flat 1 Water Meter", "465|Flat 2 Water Meter", "466|Flat 3 Water Meter", "467|Flat 4 Water Meter", "402|Flat 6 Water Meter", "403|Flat 7 Water Meter", "436|Pressurisation Make up Water", "476|Cold Water Meter for DHWS", "477|Main Water Meter", "459|College 140 Main Water IN", "378|Flat 1 Heat Meter", "379|Flat 2 Heat Meter", "380|Flat 3 Heat Meter", "381|Flat 4 Heat Meter", "404|Flat 5 Heat Meter", "405|Flat 6 Heat Meter", "406|Flat 7 Heat Meter", "451|LPHW DHWS Heat Meter", "435|College 140 DHWS Heat Meter","142|Engineering Immersion Heater","141|Engineering Water","138|Engineering Gas Meter","137|Engineering Heat Meter","143|Barker House Farm Electricity","144 |Barker House Farm Water","145|Barker House Farm Natural Gas","207|Bailrigg House Electricity", "147|Bailrigg House Water", "146|Bailrigg House Gas", "148|Cartmel Laundrette Electricity","149|Cartmel Laundrette Water","150|Cartmel Laundrette Gas","229|Whewell Building Electricity","230|Whewell Building Water","217|University House Phase 1 Electricity", "218|University House Phase 2 Electricity", "219|University House Lift D Floor Electricity", "222|University House Immersion Hater Electricity","221|University House Water","220|University House Heat Meter", "247|Sultans Electricity","283|Sultans Water","284|Sultans Gas","285|Ketchup", "227|No 1 Transformer Sub 7 Alex Park", "228|No 2 Transformer Sub 7 Alex Park","290|Steam Room Electricity", "291|AHU 1", "292|AHU 2", "293|Floating Floor", "294|MCCP 1", "295|MCCP 2", "296|Passenger Lift", "297|Sauna", "351|Emergency Light", "352|BasePlRmlgs 01-L", "353|BasePlRm P DB01P", "354|Wet CH L DB-02-L", "355|Wet Ch P DB-02-P", "356|DB External", "357|DB 5", "358|Main Electric Sub No 12 Sports Centre", "359|DB 6", "360|DB-07-P", "361|Comms DB", "362|Generator", "363|Pool Filter", "425|Ground Floor Dry Lighting", "426|Ground Floor Dry Power", "427|Ground Floor Fitness Lighting", "428|Ground Floor Fitness Power", "429|Roof Lighting", "430|Roof Power", "386|Sports Centre Water", "140|Old Sports Centre Water","387|Main Hall Gas Meter", "388|Sports Centre Gas Boilers", "389|Main Gas Meter across the Road","390|CT Heating DHW Primary", "391|MTHW Heating Primary", "392|CT Heating Secondary", "393|VT Heating Secondary","224|Pre School Electricity","225|Pre School Water","226|Pre School Gas","169|Post Office Electricity", "170|Post Office Water","167|Diggles Electricity","168|Diggles Water","180|Orange Telephones Electricity","153|MCCP Electric", "154|3 Boilers H Out ", "312|Circulation Pump No 1", "313|Circulation Pump No 2", "314|Circulation Pump No 3", "315|Circulation Pump No 4", "178|No 1 Transformer Sub 1 Energy Centre", "179|No 2 Transformer Sub 1 Energy Centre", "317|Water Meter RHS Rear", "318|Water Meter LHS Rear","152|Energy Centre Oil","364|DB 1A", "365|DB 1B", "319|DB 1C", "366|DB 2A", "367|DB 2B", "368|DB 3A", "369|DB 3B", "320|BMS Panel", "321|Lift Electricity", "322|Chiller Units", "370|Dimmer Rack No 1", "371|Dimmer Rack No 2", "212|Total of LEC Workshops and LICA","324|LICA Water","323|LICA Heat Meter","270|Lancaster House Electric","271|Lancaster House Hotel Water","272|Lancaster House Hotel Gas","231|County Town Houses Water","232|County Town Houses Gas Meter","194|George Fox Electricity", "258|B27 Immersion Heater Ground Floor", "259|B27 Immersion Heater 1st Floor", "260|George Fox B Floor NE", "261|George Fox B Floor SW", "195|George Fox Water","257|George Fox B27 Heat Meter","255|Wongs Kitchen Electricity","196|Wongs Kitchen Water","256|Wongs Kitchen Gas","191|Greggs Electricity","193|Greggs Water","188|Create Electricity","189|Create Water","165|Hairdressers Electricity","186|Hairdressers Water No 1", "166|Hairdressers Water No 2","163|Ice Cream Shop Electricity","164|Ice Cream Shop Water","252|Slaidburn House Electricity","161|Slaidburn House Water","159|Slaidburn House Heat Meter","251|Spar No 1 Electricity", "250|Spar No 2 Electricity","253|Spar Water","249|T Mobile Electricity","248|Student Union Electricity", "350|Student Union Office Electricity","254|Student Union Shop Water","479|DB LG2LP", "480|DB LG3L", "482|DB LG3P", "483|DB A1P", "484|DB B1L", "485|DB B1P", "486|DB B2P", "487|DB A1L", "488|DB B2L", "489|DB A2L", "490|DB A2P", "491|DBCP4 COM2", "492|DB3LP", "493|MCP5", "494|DB C2P", "495|DB C2L", "496|MCP3", "497|DBD4LP", "499|DB LG4P", "500|DB LG4L", "501|DB LG5L", "502|DB LG5P", "504|MCP01", "506|DB COMMS", "507|MCP03", "508|DB C1L", "509|DB C1P", "510|DB D1LP", "511|MCP02", "512|DB D2LP", "481|Book WATER", "503|DIST HEAT EAST","478|Book HEAT", "505|DOM HOT WATER"]                           
            
                startdate = ''
                enddate = ''
                try:
                    meter_id = request.form.get('meterselection')
                    meter_id = int(meter_id)
                    parameterems = request.form.get('paramselection')
                    parameterems = str(parameterems)
                    startdate = request.form.get('starttime')
                    enddate = request.form.get('endtime')
                    building= request.form.get('buildingselection')
                    utility = request.form.get('utilityselection')
                    #print(startdate)
                    #print(enddate)
                except:
                    meter_id = 101
                    parameterems = '`consumption`'
                    parameterems = str(parameterems)
                    building = "The Croft"
                    utility = "Electricity"
                
                if meter_id == None:
                    meter_id = 101
                if parameterems == None:
                    parameterems = '`consumption`'
                if startdate == '':
                    startdate = "'2018-11-08 00:00:00'"
                if enddate == '':
                    enddate = "'2018-11-09 01:00:00'"

                if building == None:
                    building = "The Croft"
                if utility == None:
                    utility = "Electricity"
                parameterems = parameterems.replace('`','')
                parameterems = '`' + parameterems + '`'
                residualstartdate = startdate
                residualenddate = enddate
                startdate = str(startdate).replace('T',' ')
                #startdate = "'2018-11-08 00:00:00'"
                startdate = "'" + startdate + "'"
                enddate = str(enddate).replace('T',' ')
                #enddate = "'2018-11-09 01:00:00'"
                enddate = "'" + enddate + "'"
                startdate = startdate.replace("'","")
                enddate = enddate.replace("'","")
                residualstartdate = startdate.replace(' ','T')
                residualenddate = enddate.replace(' ','T')
                #print(residualstartdate)
                #print(residualenddate)
                startdate = "'" + startdate + "'"    
                enddate = "'" + enddate + "'"
                
                #print(parameterems)

                table = '[' + 'EMStest' + str(meter_id) + ']'

                EMStablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/EMStables.csv")

                EMStables = EMStablesdf['tables']

                EMStables = np.array(EMStables)

                tablecheck = 'EMStest' + str(meter_id)

                print(table)
                print(tablecheck)

                print(EMStables[81])

                print(len(EMStables))

                


                conn = sqlite3.connect('EMSOUT.db')

                c = conn.cursor()

                a = 0

                while a < len(EMStables):
                    check = EMStables[a]

                    if tablecheck == check:
                        print('a')
                        query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        a = len(EMStables) + 1

                    else:
                        dataset2 = []
                        timeaxis2 = []
                        timeaxis = []
                        dataset2 = np.array(dataset2)
                        timeaxis2 = np.array(timeaxis2)
                        



                    a+=1

                

                x = pd.DataFrame(timeaxis, columns=['timestamp'])
                x['data'] = dataset2

                x['timestamp'] = timeaxis2

                xxx = x['timestamp']

                x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                #x2 = x.set_index('timestamp')

                


                

                #################################### Modelling section

                labels5 = xxx

                values5 = x['data']

                values5 = np.array(values5)


                a = 0
                X5 = 0
                X6 = []
                XYear = []
                XMonth= []
                XDay= []
                XHour= []
                XMin= []
                Xsec= []

                while a < len(labels5):
                    X5 = labels5[a]
                    X5 = X5.replace('[', '')
                    X5 = X5.replace(']', '')
                    X5 = X5.replace("'", "")
                    X5 = X5.replace(":", " ")
                    X5 = X5.replace("-", " ")
                    X5 = X5.replace("/", " ")
                    X5=X5.split()
                    X55 = X5[-3:-1]
                    X6.append(X55)
                    a+=1


                X7 = np.array(X6)


                #################################### Smart model datetime


                #print(startdate)
                #print(enddate)

                startdate = startdate.replace('-',' ')
                startdate = startdate.replace(':',' ')
                startdate = startdate.replace("'"," ")

                enddate = enddate.replace('-',' ')
                enddate = enddate.replace(':',' ')
                enddate = enddate.replace("'"," ")


                #print(startdate)
                #print(enddate)

                startdate = startdate.split()
                enddate = enddate.split()

                #print(startdate)
                #print(enddate)

                startyear = int(startdate[0])
                startmonth = int(startdate[1])
                startday = int(startdate[2])

                endyear = int(enddate[0])
                endmonth = int(enddate[1])
                endday = int(enddate[2])

                startdate = datetime.datetime(startyear, startmonth, startday)
                enddate = datetime.datetime(endyear, endmonth, endday)
                z = enddate-startdate

                #print(z)

                modelstart = startdate - (4*z)

                modelend = startdate

                print(modelstart)
                print(modelend)

                weekday00 = []
                weekday0 = []
                weekday1 = []
                weekday2 = []
                weekday3 = []
                weekday4 = []
                weekday5 = []
                weekday6 = []

                weekday = []
                weekend = []

                weekdaynumber = []
                weekendnumber = []

                weekdaydatetime = []
                weekenddatetime = []

                modelstart2 = modelstart
                modelstart3 = modelstart
                modelend3 = modelend
                


                while modelstart2 != modelend + datetime.timedelta(days=1):
                    AA = modelstart2

                    AAday = AA.weekday()

                    #print(AA)
                    #print(AAday)

                    if AAday < 5:
                        weekday.append(str(AA))
                        weekdaynumber.append(AAday)
                        weekdaydatetime.append(AA)
                    else:
                        weekend.append(str(AA))
                        weekendnumber.append(AAday)
                        weekenddatetime.append(AA)
                        

                    modelstart2 = modelstart2 + datetime.timedelta(days=1)



                print(weekday)

                print(weekend)

                print(weekdaynumber)

                print(weekendnumber)

                print(weekdaydatetime)

                print(weekenddatetime)

                

                modelstart = str(modelstart)
                modelstart = "'" + modelstart + "'"

                modelend = str(modelend)
                modelend = "'" + modelend + "'"

                #print(modelstart)

                #print(modelend)


                a = 0
                aa = 0

                modelweekdaystart = []
                modelweekdayend = []
                modelweekendstart = []
                modelweekendend = []

                modelweekday = []
                modelweekend = []

                modelweekday2 = []
                modelweekend2 = []

                while modelstart3 != modelend3 + datetime.timedelta(days=1):

                    if len(weekday) == 0:
                        weekday = weekday
                        b = ''
                        d = -1
                        f = datetime.datetime.now()
                    else:

                        if len(weekday) > a:
                            b = weekday[a]
                            d = weekdaynumber[a]
                            f = weekdaydatetime[a]
                            
                        else:
                            b = weekday[0]
                            d = weekdaynumber[0]
                            f = datetime.datetime.now()

                    if len(weekend) == 0:
                        cc = ''
                        e = -1
                        g = datetime.datetime.now()
                        
                    else:
                        
                        if len(weekend) > aa:
                            cc = weekend[aa]
                            e = weekendnumber[aa]
                            g = weekenddatetime[aa]
                            
                        else:
                            cc = weekend[0]
                            e = weekendnumber[0]
                            g = datetime.datetime.now()
                        


                    if f > g:
                        #print(g)

                        modelweekend.append(cc)

                        if e == 6:
                            


                            #print(modelweekend)

                            g = g + datetime.timedelta(days=1)

                            modelweekend.append(str(g))

                            modelweekend2.append(modelweekend)

                            

                            modelweekend = []

                        
                            

                        
                        aa+=1


                    else:
                        #print(f)

                        modelweekday.append(b)

                        if d == 4:
                            #print(modelweekday)

                            f = f + datetime.timedelta(days=1)

                            modelweekday.append(str(f))

                            
                            

                            modelweekday2.append(modelweekday)

                            modelweekday = []

                        
                        a+=1


                    
                    modelstart3 = modelstart3 + datetime.timedelta(days=1)


                if len(modelweekday) > 0:
                    
                    f = f + datetime.timedelta(days=1)

                    modelweekday.append(str(f))

                    modelweekday2.append(modelweekday)

                if len(modelweekend) > 0:
                    
                    g = g + datetime.timedelta(days=1)

                    modelweekend.append(str(g))

                    modelweekend2.append(modelweekend)
                    

                #print(modelweekday)
                #print(modelweekend)

                print(modelweekday2)
                #print(modelweekday2)
                print(modelweekend2)
                #print(modelweekend2)



                loopdataweekday = []

                looptimeaxisweekday = []

                loopdataweekend = []

                looptimeaxisweekend = []

                


                a = 0
                b = 0

                #print(modelweekday2[3])

                while a < len(modelweekday2):
                    start = modelweekday2[a][0]
                    end = modelweekday2[a][-1]

                    

                    start = str(start)
                    end = str(end)

                    start = "'" + start + "'"
                    end = "'" + end + "'"

                    print(start)
                    print(end)

                    

                    while b < len(EMStables):
                        check = EMStables[b]

                        if tablecheck == check:
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            print(len(timeaxis3loop))

                            b = len(EMStables) + 1

                        else:
                            dataset3loop = []
                            dataset4loop = np.array(dataset3loop)
                            timeaxis3loop = []


                        b +=1

                    

                

                    

                    if len(dataset4loop) == 0:
                        print('0')

                    else:
                        if len(timeaxis3loop) == 0:
                            print('0')

                        else:

                            loopdataweekday.append(dataset4loop)
                            looptimeaxisweekday.append(timeaxis3loop)



                    a +=1

                a = 0
                b = 0

                while a < len(modelweekend2):
                    start = modelweekend2[a][0]
                    end = modelweekend2[a][-1]

                    

                    start = str(start)
                    end = str(end)

                    start = "'" + start + "'"
                    end = "'" + end + "'"

                    while b < len(EMStables):
                        check = EMStables[b]

                        if tablecheck == check:
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))

                            b = len(EMStables) + 1

                        else:
                            dataset3loop = []
                            dataset4loop = np.array(dataset3loop)
                            timeaxis3loop = []
                            


                        b +=1

                

                    

                    if len(dataset4loop) == 0:
                        print('0')

                    else:
                        if len(timeaxis3loop) == 0:
                            print('0')

                        else:

                            loopdataweekend.append(dataset4loop)
                            looptimeaxisweekend.append(timeaxis3loop)

                    

                    #loopdataweekend.append(dataset4loop)

                    #looptimeaxisweekend.append(timeaxis3loop)



                    a +=1


                #print(loopdataweekday)
                #print(len(looptimeaxisweekday))
                #print(loopdataweekend)
                #print(looptimeaxisweekend)

               # print(len(loopdataweekday))
                #print(len(looptimeaxisweekday))
               # print(len(loopdataweekend))
                #print(len(looptimeaxisweekend))

                #print(loopdataweekday[0])


                


##########weekday data
                a = 0

                if len(loopdataweekday) == 0:
                    print('')
                    dataset444 = []
                else:

                    dataset444 = loopdataweekday[0]

                while a < len(loopdataweekday):

                    dataset111 = loopdataweekday[a]

                    #print(len(dataset111))

                    #print(dataset111[0])
                    #print(dataset444[0])

                    if np.all(dataset111 == dataset444):
                        print(np.all(dataset111 == dataset444))
                        dataset555 = dataset444

                    else:

                        dataset555 = np.concatenate([dataset555, dataset111])
                        dataset444 = np.concatenate([dataset444, dataset111])

                        #print(len(dataset444))
                        #print(len(dataset555))


                    a+=1


                #print(dataset444)
                #print(loopdataweekend[0])


################weekend data
                a = 0

                if len(loopdataweekend) == 0:
                    print('')
                    dataset4444 = []
                else:

                    dataset4444 = loopdataweekend[0]

                while a < len(loopdataweekend):

                    dataset1111 = loopdataweekend[a]

                    #print(len(dataset1111))

                    #print(dataset1111[0])
                    #print(dataset4444[0])

                    if np.all(dataset1111 == dataset4444):
                        #print(np.all(dataset1111 == dataset4444))
                        dataset5555 = dataset4444

                    else:

                        dataset5555 = np.concatenate([dataset5555, dataset1111])
                        dataset4444 = np.concatenate([dataset4444, dataset1111])

                        #print(len(dataset4444))
                        #print(len(dataset5555))


                    a+=1


                #print(dataset4444)
                #print(len(looptimeaxisweekday))
                #print(looptimeaxisweekday[3])


    ##########weekday timeaxis
                a = 0

                if len(looptimeaxisweekday) == 0:
                    print('')
                    timeaxis444 = []
                else:

                    timeaxis444 = looptimeaxisweekday[0]

                while a < len(looptimeaxisweekday):

                    timeaxis111 = looptimeaxisweekday[a]

                    #print(len(timeaxis111))

                    #print(timeaxis111[0])
                    #print(timeaxis444[0])
                    #print(a)

                    if timeaxis111[0] == timeaxis444[0]:
                        timeaxis555 = timeaxis444

                    else:

                        timeaxis555 = timeaxis555 + timeaxis111
                        timeaxis444 = timeaxis444 + timeaxis111
                        

                        #print(len(timeaxis444))
                        #print(len(timeaxis555))


                    a+=1


                #print(timeaxis444)
                #print(looptimeaxisweekend[0][0])


################weekend timeaxis
                a = 0

                if len(looptimeaxisweekend) == 0:
                    print('')
                    timeaxis4444 = []
                else:

                    timeaxis4444 = looptimeaxisweekend[0]

                while a < len(looptimeaxisweekend):

                    timeaxis1111 = looptimeaxisweekend[a]

                    #print(len(timeaxis1111))

                    #print(timeaxis1111[0])
                    #print(timeaxis4444[0])

                    if timeaxis1111[0] == timeaxis4444[0]:
                        timeaxis5555 = timeaxis4444

                    else:

                        #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                        timeaxis5555 = timeaxis5555 + timeaxis1111
                        timeaxis4444 = timeaxis4444 + timeaxis1111

                        #print(len(timeaxis4444))
                        #print(len(timeaxis5555))


                    a+=1


                #print(timeaxis4444)

                print(len(timeaxis444))
                print(len(dataset444))

                print(len(timeaxis4444))
                print(len(dataset4444))



                x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                x10fweekday['data'] = dataset444

                labelsweekday = x10fweekday['timestamp']

                valuesweekday = x10fweekday['data']

                valuesweekday = np.array(valuesweekday)

                #print(labelsweekday)
                #print(valuesweekday)



                

                x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                x10fweekend['data'] = dataset4444

                labelsweekend = x10fweekend['timestamp']

                valuesweekend = x10fweekend['data']

                valuesweekend = np.array(valuesweekend)

                #print(labelsweekend)
                #print(valuesweekend)

                weekendlabeldateday = []
                weekdaylabeldateday = []



                if len(labelsweekday) == 0:
                    print('')

                else:
                    

                    a = 0
                    
                    X22 = 0
                    X33 = []
                    X777 = []
                    X778 = []
                    X779 = []
                    X77 = []


                    while a < len(labelsweekday):
                        X22 = labelsweekday[a]
                        X22 = X22.replace('[', '')
                        X22 = X22.replace(']', '')
                        X22 = X22.replace("'", "")
                        X22 = X22.replace(":", " ")
                        X22 = X22.replace("-", " ")
                        X22 = X22.replace("/", " ")
                        X22=X22.split()
                        X225 = X22[-3:-1]

                        X771 = X22[0]
                        X772 = X22[1]
                        X773 = X22[2]
                        
                        X777.append(X771)
                        X778.append(X772)
                        X779.append(X773)
                        
                        X33.append(X225)

                        weekdayyear = int(X22[0])
                        weekdaymonth = int(X22[1])
                        weekdayday = int(X22[2])

                        weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                        weekdaylabeldateday.append(weekdaylabeldate.weekday())
                        
                        a+=1

                    X44 = np.array(X33)



                if len(valuesweekend) == 0:
                    print('')

                else:



                    a = 0
                    
                    XX22 = 0
                    XX33 = []
                    XX777 = []
                    XX778 = []
                    XX779 = []
                    XX77 = []


                    while a < len(labelsweekend):
                        XX22 = labelsweekend[a]
                        XX22 = XX22.replace('[', '')
                        XX22 = XX22.replace(']', '')
                        XX22 = XX22.replace("'", "")
                        XX22 = XX22.replace(":", " ")
                        XX22 = XX22.replace("-", " ")
                        XX22 = XX22.replace("/", " ")
                        XX22=XX22.split()
                        XX225 = XX22[-3:-1]

                        XX771 = XX22[0]
                        XX772 = XX22[1]
                        XX773 = XX22[2]
                        
                        XX777.append(XX771)
                        XX778.append(XX772)
                        XX779.append(XX773)
                        
                        XX33.append(XX225)

                        weekendyear = int(XX22[0])
                        weekendmonth = int(XX22[1])
                        weekendday = int(XX22[2])

                        weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                        weekendlabeldateday.append(weekendlabeldate.weekday())

                        
                        a+=1

                    XX44 = np.array(XX33)


                #print(X44)
                #print(XX44)


                print(len(weekdaylabeldateday))
                print(weekdaylabeldateday)

                print(len(valuesweekday))
                print(valuesweekday)


                a = 3

                weekdayvaluesavg = []
                weekdaylabelsavg = []
                weekdaypredavg = []

                while a < len(weekdaylabeldateday):
                    a1 = int(valuesweekday[a])
                    a2 = int(valuesweekday[a-1])
                    a3 = int(valuesweekday[a-2])
                    a4 = int(valuesweekday[a-3])

                    #print(a4)

                    

                    aavg = (a1 + a2 + a3 + a4)/4

                    #print(aavg)

                    if weekdaylabeldateday[a] == 5:

                        weekdayvaluesavg.append(aavg)

                        weekdaylabelsavg.append(labelsweekday[a])

                        weekdaypredavg.append(X33[a])

                        a = a + 4

                    else:

                        weekdayvaluesavg.append(aavg)

                        weekdaylabelsavg.append(labelsweekday[a])

                        weekdaypredavg.append(X33[a])

                        a +=1



                print(len(weekdaylabeldateday))
                print(len(weekdayvaluesavg))
                print(len(weekdaylabelsavg))



                print(len(weekendlabeldateday))
                print(weekendlabeldateday)

                print(len(valuesweekend))
                print(valuesweekend)

                    

                a = 3

                weekendvaluesavg = []
                weekendlabelsavg = []
                weekendpredavg = []

                while a < len(weekendlabeldateday):
                    a1 = int(valuesweekend[a])
                    a2 = int(valuesweekend[a-1])
                    a3 = int(valuesweekend[a-2])
                    a4 = int(valuesweekend[a-3])

                    #print(a4)

                    

                    aavg = (a1 + a2 + a3 + a4)/4

                    #print(aavg)

                    if weekendlabeldateday[a] == 0:

                        weekendvaluesavg.append(aavg)

                        weekendlabelsavg.append(labelsweekend[a])

                        weekendpredavg.append(XX33[a])

                        a = a + 4

                    else:

                        weekendvaluesavg.append(aavg)

                        weekendlabelsavg.append(labelsweekend[a])

                        weekendpredavg.append(XX33[a])

                        a +=1



                weekdaypredavg = np.array(weekdaypredavg)
                weekendpredavg = np.array(weekendpredavg)

                print(len(weekendlabeldateday))
                print(len(weekendvaluesavg))
                print(len(weekendlabelsavg))

                print(weekendlabeldateday)
                print(weekendvaluesavg)
                print(weekendlabelsavg)


                #print(X44)
                #print(XX44)

                print(len(weekdaypredavg))
                print(len(weekendpredavg))
                ###################################################################






                regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                if len(valuesweekday) == 0:
                    print('')
                    predvaluweekday = []
                elif len(labels5) == 0:
                    print('')
                    predvaluweekday = []

                else:

                    regr.fit(X44, valuesweekday)
                    #regr.fit(weekdaypredavg, weekdayvaluesavg)
                    predictedweekday = regr.predict(X7)


                    print(predictedweekday)

                    #print(mean_squared_error(values5, predictedweekday))
                    #print(r2_score(values5, predictedweekday))
                   
                    i = len(predictedweekday)
                    k = 0
                    predvaluweekday = []
                    while k < i:
                        predvalweekday = predictedweekday[k]
                        predvaluweekday.append(predvalweekday)
                        k += 1
                    print(predvaluweekday)

                    print(len(predvaluweekday))




                regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                if len(valuesweekend) == 0:
                    print('')
                    predvaluweekend = []
                elif len(labels5) == 0:
                    print('')
                    predvaluweekend = []

                else:

                    regrf.fit(XX44, valuesweekend)
                    #regrf.fit(weekendpredavg, weekendvaluesavg)
                    predictedweekend = regrf.predict(X7)


                    print(predictedweekend)

                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))
                   
                    i = len(predictedweekend)
                    k = 0
                    predvaluweekend = []
                    while k < i:
                        predvalweekend = predictedweekend[k]
                        predvaluweekend.append(predvalweekend)
                        k += 1
                    print(predvaluweekend)

                    print(len(predvaluweekend))
                    
                

                
                

                
                
                

                ####################################



                conn.close()

                a = 0

                titlefixtemp = ''

                while a < len(EMStitlefix):
                    titlefix = str(EMStitlefix[a]).split('|')
                    titlefixcheck = int(titlefix[0])

                    if titlefixcheck == int(meter_id):
                        titlefixtemp = titlefix[1]

                        a = len(EMStitlefix) + 1
                    else:
                        a+=1

                print(titlefixtemp)

                if titlefixtemp == '':
                    titless2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems.replace('`', '')
                else:
                    titless2 = str(titlefixtemp) + ' ' + parameterems.replace('`', '')


                labels = x['timestamp']

                values = x['data']


                
                i = len(values)
                k = 0
                valu = []
                while k < i:
                    val = values[k]
                    valu.append(val)
                    k += 1
                #print(valu)

                z = len(labels)
                y = 0
                labe = []
                while y < z:
                    lab = labels[y]
                    labe.append(lab)
                    y += 1
                #print(labe)

                a = 0
                X2 = 0
           

                X227 = []
                X228 = []
                X229 = []
                X22 = []
                X2727 = []

                while a < len(labels):
                    X2 = str(labels[a])
                    X2 = X2.replace('[', '')
                    X2 = X2.replace(']', '')
                    X2 = X2.replace("'", "")
                    X2 = X2.replace(":", " ")
                    X2 = X2.replace("-", " ")
                    X2 = X2.replace("/", " ")
                    X2=X2.split()
                    X25 = X2[-3:-1]

                    X221 = X2[0]
                    X222 = X2[1]
                    X223 = X2[2]
                    
                    X227.append(X221)
                    X228.append(X222)
                    X229.append(X223)
                    a+=1


                #print(X227[0])
                #print(X228[0])
                #print(X229[0])



                a = 0

                while a < len(X227):
                    

                    X2227 = int(X227[a])
                    X2228 = int(X228[a])
                    X2229 = int(X229[a])
                    
                    X22222 = datetime.date(X2227, X2228, X2229)

                    X22222 = X22222.weekday()

                    X2727.append(X22222)

                    a+=1
                    
                #print(X77)
                #print(X2727)

                legend = titless2
                ylabel = parameterems.replace('`', '')

                value_max = x['data'].max() + 1
                value_min = x['data'].min()
                if value_min == 0:
                    value_min = value_min
                else:
                    value_min = value_min - 1
                line_labels=labe
                line_values= valu

                #print(residualstartdate)
                #print(residualenddate)

                


                #residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                a=0

                weekendvalu = []
                weekdayvalu = []

                while a < len(valu):
                    if X2727[a] == 5:
                        weekendvalu.append(valu[a])

                    elif X2727[a] == 6:
                        weekendvalu.append(valu[a])

                    else:
                        weekdayvalu.append(valu[a])
                    a+=1
                    

                weekdaystddev = np.std(weekdayvalu)
                weekendstddev = np.std(weekendvalu)

                print(weekdayvalu)
                print(weekendvalu)
                print(weekdaystddev)
                print(weekendstddev)

                print(X2727)
                


                if len(valuesweekday) == 0:
                    print('hi')


                    avgg = np.mean(valu)
                    medavgg = np.median(valu)
                    stddev = np.std(valu)
                    #print(avgg)
                    #print(medavgg)
                    #print(stddev)

                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                    z = avgg + (3*stddev)
                    zz = avgg - (3*stddev)

                    while v < len(valu):
                        if valu[v] > z:
                            #print('bigger')
                            outliers.append(valu[v])
                            if v == 0:
                                print('')
                            else:
                                outliers[v-1] = valu[v-1]
                            
                        
                            valus.append('f')

                        elif valu[v] < zz:
                            #print('smaller')
                            outliers.append(valu[v])
                            if v == 0:
                                print('')
                            else:
                                outliers[v-1] = valu[v-1]
                            
                        
                            valus.append('f')

                        else:
                            #print('is not')
                            outliers.append('f')
                            valus.append(valu[v])
                            
                            if v == 0:
                                print('')
                            else:
                                valus[v-1] = valu[v-1]

                                
                            
                        v += 1

                elif len(predvaluweekend) == 0:

                    stddev = np.std(valu)
                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                        
                    while v < len(valu):
                        if valu[v] > (predvaluweekday[v] + weekdaystddev):
                            #print('bigger')
                            #print((predvalweekdayu[v] + stddev))
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                            #print('smaller')
                            #print((predvalweekdayu[v] - stddev))
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        else:
                            #print('is not')
                            outliers.append('f')
                            valus.append(valu[v])
                        v +=1
                else:
                    
                    
                        
                    stddev = np.std(valu)
                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                        

                    while v < len(valu):
                        if X2727[v] == 6:

                            if valu[v] > (predvaluweekend[v] + weekendstddev):
                                #print('bigger weekend')
                                #print((predvaluweekend[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                #print('smaller weekend')
                                #print((predvaluweekend[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not weekend')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                
                            v += 1

                        elif X2727[v] == 5:

                            if valu[v] > (predvaluweekend[v] + weekendstddev):
                                #print('bigger weekend')
                                #print((predvaluweekend[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                #print('smaller weekend')
                                #print((predvaluweekend[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not weekend')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                
                            v += 1


                        else:
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                
                            v += 1




                    
                #print(outliers)
                #print(valus)
                #print(valu)

                #print(len(outliers))
                #print(len(valus))
                #print(len(valu))

                #print(z)
                #print(zz)
                    
                #print(valus)
                #line_values=valus
                #print(line_values)
                #line_outliers = outliers

                if len(valuesweekday) == 0:
                    line_values=valus
                    line_outliers = outliers
                elif len(labels5) == 0:
                    line_values=valus
                    line_outliers = outliers
                
        
                else:
                    line_values=valu
                    line_outliers = predvaluweekday

                line_values=valu
                line_outliers = outliers
                #print(valus)
                #print(predvalu)
                #print(mean_squared_error(values5, predicted))
                #print(r2_score(values5, predicted))

                #print(stddev)
                


                dfnewest1 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                newest1values1 = dfnewest1.iloc[:,2].values
                newest1timestamp = dfnewest1.iloc[:,1].values
                newest1title = dfnewest1.columns[2]
                #print(newest1values1)
                #print(newest1timestamp)
                #print(newest1title)

                dfnewest2 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                newest2values1 = dfnewest2.iloc[:,2].values
                newest2timestamp = dfnewest2.iloc[:,1].values
                newest2title = dfnewest2.columns[2]
                #print(newest2values1)
                #print(newest2timestamp)
                #print(newest2title)


                dfnewest3 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                newest3values1 = dfnewest3.iloc[:,2].values
                newest3timestamp = dfnewest3.iloc[:,1].values
                newest3title = dfnewest3.columns[2]
                #print(newest3values1)
                #print(newest3timestamp)
                #print(newest3title)



                dfnewest33pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                dfnewest33predvalues1 = dfnewest33pred.iloc[:,2].values

                newest33it = len(dfnewest33predvalues1)
                newest33kt = 0
                newest33predvalu = []
                while newest33kt < newest33it:
                    newest33predval = dfnewest33predvalues1[newest33kt]
                    newest33predvalu.append(newest33predval)
                    newest33kt += 1


                dfnewest22pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfnewest22predvalues1 = dfnewest22pred.iloc[:,2].values

                newest22it = len(dfnewest22predvalues1)
                newest22kt = 0
                newest22predvalu = []
                while newest22kt < newest22it:
                    newest22predval = dfnewest22predvalues1[newest22kt]
                    newest22predvalu.append(newest22predval)
                    newest22kt += 1


                dfnewest11pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                dfnewest11predvalues1 = dfnewest11pred.iloc[:,2].values

                newest11it = len(dfnewest11predvalues1)
                newest11kt = 0
                newest11predvalu = []
                while newest11kt < newest11it:
                    newest11predval = dfnewest11predvalues1[newest11kt]
                    newest11predvalu.append(newest11predval)
                    newest11kt += 1


                test1 = newest11predvalu
                test2 = newest22predvalu
                test3 = newest33predvalu

                newest33axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                newest33value_max = newest33axisdf.iloc[0,2]
                newest33value_min = newest33axisdf.iloc[0,1]

                #print(test1[0])
                #print(test1[0])
                #print(test1[0])
                #print(test2[0])
                #print(test2[0])
                #print(test2[0])
                #print(test3[0])
                #print(test3[0])
                #print(test3[0])

                residualsklearndfoutliers4 = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                residualsklearndfoutliers5 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest22predvalu})

                if newest3title == newest2title:
                    residualsklearndfoutliers6 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest22predvalu})
                else:
                    residualsklearndfoutliers6 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest33predvalu})


                

                print(line_values)
                print(line_outliers)
                print(oldoldlabe)
                print(oldpred2valu)
                print(oldoldlabe)
                print(oldpredvalu)

                '''residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:line_outliers})

                if oldtitle2 == oldtitle:
                    residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                    residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpred2valu})

                else:
                    
                    residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                    residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                        
                residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")


                residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
                residualaxisvaluesdf3 = pd.DataFrame({'min':[oldvalue_min2], 'max':[oldvalue_max2]}) #oldold


                residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                

                residualdf = pd.DataFrame({'timestamp':oldoldlabe, titless2:line_values})
                residualdf2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldvalu}) #old
                residualdf3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldvalu2}) #oldold
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")'''

                newest1it = len(newest1values1)
                newest1kt = 0
                newest1valu2 = []
                while newest1kt < newest1it:
                    newest1val2 = newest1values1[newest1kt]
                    newest1valu2.append(newest1val2)
                    newest1kt += 1
                #print(newest1valu2)

                newest1valu = newest1valu2

                newest2it = len(newest2values1)
                newest2kt = 0
                newest2valu2 = []
                while newest2kt < newest2it:
                    newest2val2 = newest2values1[newest2kt]
                    newest2valu2.append(newest2val2)
                    newest2kt += 1
                #print(newest2valu2)

                newest2valu = newest2valu2
                
                newest3it = len(newest3values1)
                newest3kt = 0
                newest3valu2 = []
                while newest3kt < newest3it:
                    newest3val2 = newest3values1[newest3kt]
                    newest3valu2.append(newest3val2)
                    newest3kt += 1
                #print(newest3valu2)

                newest3valu = newest3valu2

                print(newest1title)
                print(newest2title)
                print(newest3title)

                newest3ylabel = newest3title.split()
                print(newest3title)

                newest3ylabel = newest3ylabel[-1]
                print(newest3title[-1])
                

                print(newest1valu)
                print(newest2valu)
                print(newest3valu)

                print(newest11predvalu)
                print(newest22predvalu)
                print(newest33predvalu)


                print('xxxxxxxxxxxxxxxxxx')
                print(line_values)
                print(oldvalu2)
                print(oldoldlabe)
                print(line_labels)

                oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                oldoldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                oldmeter_id = oldmeter_id.iloc[0,1]
                oldoldmeter_id = oldoldmeter_id.iloc[0,1]
                oldoldoldmeter_id = oldoldoldmeter_id.iloc[0,1]

                print(meter_id)
                print(oldmeter_id)
                print(oldoldmeter_id)
                print(oldoldoldmeter_id)

                residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                residualaxismeterid2 = pd.DataFrame({'meter_id':[oldmeter_id]})
                residualaxismeterid3 = pd.DataFrame({'meter_id':[oldoldmeter_id]})
                residualaxismeterid4 = pd.DataFrame({'meter_id':[oldoldoldmeter_id]})
                
                residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                residualsklearndfvalues = pd.DataFrame({'timestamp':labe, titless2:valu})
                residualsklearndfoutliers = pd.DataFrame({'timestamp':labe, titless2:outliers})
                
                

                residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
                residualaxisvaluesdf3 = pd.DataFrame({'min':[oldvalue_min2], 'max':[oldvalue_max2]}) #oldold            


                residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                if len(valuesweekday) == 0:
                    print('')
                elif len(valuesweekend) == 0:
                    print('')
                else:

                    print(mean_squared_error(values5, predictedweekday))
                    print(r2_score(values5, predictedweekday))
                    print(mean_squared_error(values5, predictedweekend))
                    print(r2_score(values5, predictedweekend))

                
                print(valu)
                
                print(outliers)

                print(meter_id)

                residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                if valu == []:
                    print('0 data')
                    oldoldvalus = oldvalu2
                    oldvalus = oldvalu
                    residualsklearndfvalues = pd.DataFrame({'time':oldoldlabe, oldtitle:oldvalu})
                    residualsklearndfvalues2 = pd.DataFrame({'time':oldoldlabe, oldtitle2:oldvalu2})
                    residualsklearndfvalues3 = pd.DataFrame({'time':oldoldlabe, newest3title:newest3valu2})

                    residualdf = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldvalu})
                    residualdf2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldvalu2}) #old
                    residualdf3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest3valu2}) #oldold


                    
                    residualsklearndfoutliers = pd.DataFrame({'time':oldoldlabe, oldtitle:oldoutliers})
                    residualsklearndfoutliers2 = pd.DataFrame({'time':oldoldlabe, oldtitle2:oldoldoutliers})
                    residualsklearndfoutliers3 = pd.DataFrame({'time':oldoldlabe, newest3title:newest33predvalu})
                else:


                    residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                    print(residualsklearndfvalues[titless2])

                    residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]

                    residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                    print(residualsklearndfvalues)

                    testarr = np.array(residualsklearndfvalues[titless2])

                    z = len(testarr)
                    y = 0
                    valtest = []
                    while y < z:
                        val = testarr[y]
                        if np.isnan(val) == True:
                            valtest.append('f')
                        else:
                            
                            valtest.append(int(val))
                        y += 1
                    testarrvalus = valtest

                    print(testarrvalus)
                    print(len(testarrvalus))

                    testarrlabe = residualsklearndfvalues.reset_index()
                    testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                    z = len(testarrlabe)
                    y = 0
                    labetest = []
                    while y < z:
                        lab = testarrlabe[y]
                        labetest.append(lab)
                        y += 1
                    testarrlabe = labetest
                    print(testarrlabe)
                    print(len(testarrlabe))
                    print(len(line_values))

                    line_values = testarrvalus
                    line_labels = testarrlabe



                    residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')
                    residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]
                    
                    residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                    testarroutliers = np.array(residualsklearndfoutliers[titless2])

                    print(testarroutliers)

                    z = len(testarroutliers)
                    y = 0
                    outtest = []
                    while y < z:
                        out = testarroutliers[y]
                        if out == 'f':
                            outtest.append('f')
                        elif np.isnan(out) == True:
                            outtest.append('f')
                        else:
                            
                            outtest.append(int(out))
                        y += 1
                    testarroutliers = outtest

                    print(testarroutliers)
                    print(len(testarroutliers))

                    line_outliers = testarroutliers
                    outliers = testarroutliers

                    oldstarttemp1 = datetime.datetime.strptime(str(oldoldlabe[0]), '%Y-%m-%d %H:%M:%S')
                    newstarttemp1 = datetime.datetime.strptime(str(line_labels[0]), '%Y-%m-%d %H:%M:%S')

                    line_labelstemp2 = []

                    if (oldstarttemp1 - newstarttemp1) < datetime.timedelta(seconds=-59):
                        line_labelstemp2.append(oldstarttemp1)


                            
                    elif (oldstarttemp1 - newstarttemp1) > datetime.timedelta(seconds=59):
                        line_labelstemp2.append(newstarttemp1)
                    else:
                        line_labelstemp2.append(newstarttemp1)



                    oldendtemp1 = datetime.datetime.strptime(str(oldoldlabe[-1]), '%Y-%m-%d %H:%M:%S')
                    newendtemp1 = datetime.datetime.strptime(str(line_labels[-1]), '%Y-%m-%d %H:%M:%S')

                    if (oldendtemp1 - newendtemp1) < datetime.timedelta(seconds=-59):
                        print('1')
                        print(oldendtemp1)
                        print(newendtemp1)
                        line_labelstemp2.append(newendtemp1)

                            
                    elif (oldendtemp1 - newendtemp1) > datetime.timedelta(seconds=59):
                        print('2')
                        print(oldendtemp1)
                        print(newendtemp1)
                        line_labelstemp2.append(oldendtemp1)

                    else:
                        line_labelstemp2.append(newendtemp1)



                    test = pd.DataFrame({'time':line_labelstemp2})

                    test = test.set_index('time')
                    test.index = test.index.map(lambda x: x.replace(second=0))

                    test = test[~test.index.duplicated()]
                    
                    test = test.resample('T').asfreq()

                    test2 = test.index.floor('S')

                    a = 0
                    b=0
                    c=0

                    print(len(test2))
                    print(len(line_labels))
                    print(len(oldoldlabe))

                    print(test2[0])
                    print(line_labels[0])
                    print(oldoldlabe[0])

                    print(str(oldoldlabe[0]) == str(test2[0]))

                    line_valuestemp = []
                    oldvalustemp= []
                    oldoldvalustemp= []
                    line_labelstemp= []
                    outlierstemp= []
                    oldoutlierstemp= []
                    oldoldoutlierstemp= []
                    oldoldlabetemp = []

                    oldvalus = oldvalu
                    oldoldvalus = oldvalu2

                    while a < len(test2):

                        if b == len(line_labels):
                            line_valuestemp.append(test2[a])
                            line_labelstemp.append('f')
                            outlierstemp.append('f')

                        else:
                            
                            if test2[a] == line_labels[b]:
                                line_valuestemp.append(line_values[b])
                                line_labelstemp.append(line_labels[b])
                                outlierstemp.append(outliers[b])

                                b+=1
                                

                            else:
                                line_valuestemp.append(test2[a])
                                line_labelstemp.append('f')
                                outlierstemp.append('f')

                        if c == len(oldoldlabe):
                            oldvalustemp.append('f')
                            oldoldvalustemp.append('f')
                            oldoutlierstemp.append('f')
                            oldoldoutlierstemp.append('f')
                            oldoldlabetemp.append(test2[a])
                        else:
                            
                            if str(test2[a]) == str(oldoldlabe[c]):
                                oldvalustemp.append(oldvalus[c])
                                oldoldvalustemp.append(oldoldvalus[c])
                                oldoutlierstemp.append(oldoutliers[c])
                                oldoldoutlierstemp.append(oldoldoutliers[c])
                                oldoldlabetemp.append(oldoldlabe[c])

                                c+=1

                            else:
                                oldvalustemp.append('f')
                                oldoldvalustemp.append('f')
                                oldoutlierstemp.append('f')
                                oldoldoutlierstemp.append('f')
                                oldoldlabetemp.append(test2[a])


                        a+=1


                    line_values = line_valuestemp
                    oldvalu = oldvalustemp
                    oldvalu2 = oldoldvalustemp
                    line_labels = line_labelstemp
                    outliers = outlierstemp
                    oldoutliers = oldoutlierstemp
                    oldoldoutliers = oldoldoutlierstemp
                    oldoldlabe = oldoldlabetemp
                    line_outliers = outliers

                    print(len(line_labels))
                    print(len(line_values))
                    print(len(line_outliers))
                    #print(len())
                    #print(len())

                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, titless2:line_values})
                    residualsklearndfvalues2 = pd.DataFrame({'time':line_labels, oldtitle:oldvalu})
                    residualsklearndfvalues3 = pd.DataFrame({'time':line_labels, oldtitle2:oldvalu2})

                    residualdf = pd.DataFrame({'timestamp':line_labels, titless2:line_values})
                    residualdf2 = pd.DataFrame({'timestamp':line_labels, oldtitle:oldvalu}) #old
                    residualdf3 = pd.DataFrame({'timestamp':line_labels, oldtitle2:oldvalu2}) #oldold


                    
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, titless2:line_outliers})
                    residualsklearndfoutliers2 = pd.DataFrame({'time':line_labels, oldtitle:oldoutliers})
                    residualsklearndfoutliers3 = pd.DataFrame({'time':line_labels, oldtitle2:oldoldoutliers})
                    
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    residualsklearndfvalues2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    residualsklearndfvalues3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    residualsklearndfvalues2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfvalues3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes3.csv")

                

      
                if valu == []:
                    if oldvalu==oldvalu2:
                        titless2 = 'Error No Data Available for '+ str(titlefixtemp)
                        print(titless2)

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")

                        
                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                                
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")

                        residualaxismeterid2 = pd.DataFrame({'meter_id':[oldmeter_id]})
                        residualaxismeterid3 = pd.DataFrame({'meter_id':[oldoldmeter_id]})
                        residualaxismeterid4 = pd.DataFrame({'meter_id':[oldoldoldmeter_id]})
                        
                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                        
                        
                        return render_template('view 19.html', oldlabels = oldoldlabe, outlier=oldoldoutliers, title=titless2,min=oldvalue_min2, max=oldvalue_max2, labels=oldoldlabe, values=oldoldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle2, ylabel=oldylabel)


                    elif newest2title == newest3title:
                        titless2 = 'Error No Data Available for ' + str(titlefixtemp)
                        print('10')


                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})

                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        
                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")



                        return render_template('view 19 2 lines.html',oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2, xmin=xmin, xmax=xmax)

                    else:
                        print('11')

                        titless2 = 'Error No Data Available for ' + str(titlefixtemp)


                        residualaxisvaluesdf = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #newest
                        residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min2], 'max':[oldvalue_max2]}) #old
                        residualaxisvaluesdf3 = pd.DataFrame({'min':[newest33value_min], 'max':[newest33value_max]}) #oldold

                        residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})

                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest1valu})
                        residualdf2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest2valu})
                        residualdf3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest3valu})

                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                        
                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")


                        return render_template('view 19 3 lines.html', oldoldoutlier=newest33predvalu, oldoutlier=newest22predvalu, outlier=newest11predvalu, oldvalues=newest2valu, oldtitle=newest2title, oldmin=oldvalue_min2, oldmax=oldvalue_max2, oldoldvalues=newest3valu, oldoldtitle=newest3title, oldoldmin=newest33value_min, oldoldmax=newest33value_max, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=oldoldlabe, values=newest1valu, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=oldylabel, oldylabel=oldylabel2, oldoldylabel=newest3ylabel)

                else:
                    
                    if oldvalu==oldvalu2:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
     
                            return render_template('view 19.html', outlier=oldoldoutliers, title=titless2,min=oldvalue_min2, max=oldvalue_max2, labels=oldoldlabe, values=oldoldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle2, ylabel=oldylabel)


                        else:
                            print('hello')
                            #print(oldoldlabe)
                            #print(line_labels)
                            
                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoutliers, outlier=line_outliers, oldvalues=oldvalu2, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)

                    elif newest1title == newest2title:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('1.1?')
                            print(newest1title)
                            print(newest2title)
                            print(newest3title)




                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2)


                        elif titless2 == oldtitle:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('2.1?')


                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)
                        else:
                            print('1???????')
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel2, oldoldylabel=oldylabel)


                    elif newest1title == newest3title:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('1.2')

                            print(oldoldlabe)

                            print(oldoldoutliers)
                            print(oldoutliers)
                            print(oldoldvalus)
                            print(oldvalus)
                            print(line_labels)




                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2)


                        elif titless2 == oldtitle:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('2.2')


                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)
                        else:
                            print('2???????')
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=oldoldlabe, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel2, oldoldylabel=oldylabel)


                    elif newest2title == newest3title:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('1.3')

                            print(oldoldlabe)

                            print(oldoldoutliers)
                            print(oldoutliers)
                            print(oldoldvalus)
                            print(oldvalus)
                            print(line_labels)




                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2)


                        elif titless2 == oldtitle:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('2.3')


                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':labe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)
                        else:
                            print('3???????')
                            
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=line_outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, oldoldvalues=oldoldvalus, oldoldtitle=oldtitle2, oldoldmin=oldvalue_min2, oldoldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=oldoldlabe, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel, oldoldylabel=oldylabel2)


                

                    else:

                        if titless2 == newest2title:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            
                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1values1):


                                if newest1values1[v] == 'f':
                                    x = newest1values1[v]
                                else:
                                    x = int(newest1values1[v])

                                if newest11predvalu[v] == 'f':
                                    y = newest11predvalu[v]
                                else:
                                    y = int(newest11predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            if newest1value_min2 == 0:
                                newest1value_min2 = newest1value_min2
                            else:
                                newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            #print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            #print(newest1labe)





                            #print(newest1valus)
                            #print(newest1outliers)

                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            newest2value_max2 = 1
                            newest2value_min2 = 0


                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2values1):


                                if newest2values1[v] == 'f':
                                    x = newest2values1[v]
                                else:
                                    x = int(newest2values1[v])

                                if newest22predvalu[v] == 'f':
                                    y = newest22predvalu[v]
                                else:
                                    y = int(newest22predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            if newest2value_min2 == 0:
                                newest2value_min2 = newest2value_min2
                            else:
                                newest2value_min2 = newest2value_min2 - 1

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            #print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            #print(newest2labe)

                            


                            #print(newest2valus)
                            #print(newest2outliers)


                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3values1):


                                if newest3values1[v] == 'f':
                                    x = newest3values1[v]
                                else:
                                    x = int(newest3values1[v])

                                if newest33predvalu[v] == 'f':
                                    y = newest33predvalu[v]
                                else:
                                    y = int(newest33predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            if newest3value_min2 == 0:
                                newest3value_min2 = newest3value_min2
                            else:
                                newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            #print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            #print(newest3labe)


                            
                            print('18')

                            dfnewest33predvalues1 = dfnewest33pred.iloc[:,2].values

                            it = len(dfnewest33predvalues1)
                            kt = 0
                            newest33predvalu = []
                            while kt < it:
                                newest33predval = dfnewest33predvalues1[kt]
                                newest33predvalu.append(newest33predval)
                                kt += 1
                            #print(newest33predvalu[0])

                            dfnewest33predvalues1 = dfnewest33pred.iloc[:,2].values

                            it = len(dfnewest22predvalues1)
                            kt = 0
                            newest22predvalu = []
                            while kt < it:
                                newest22predval = dfnewest22predvalues1[kt]
                                newest22predvalu.append(newest22predval)
                                kt += 1
                            #print(newest22predvalu[0])

                            dfnewest11predvalues1 = dfnewest11pred.iloc[:,2].values

                            it = len(dfnewest11predvalues1)
                            kt = 0
                            newest11predvalu = []
                            while kt < it:
                                newest11predval = dfnewest11predvalues1[kt]
                                newest11predvalu.append(newest11predval)
                                kt += 1
                            #print(newest11predvalu[0])



                            

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")


                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest33predvalu})
                                
                            residualsklearndfoutliers4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers5.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers6.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            


                            newest1outliers = newest11predvalu
                            newest2outliers = newest22predvalu
                            newest3outliers = newest33predvalu

                            newest1valus = newest1values1
                            newest2valus = newest2values1
                            newest3valus = newest3values1

                            print(newest1valu)
                            print(newest2valu)
                            print(newest3valu)
                            print(newest11predvalu)
                            print(newest22predvalu)
                            print(newest33predvalu)


               

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})

                        
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            

                            return render_template('view 19 3 lines.html', oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valus, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valus, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=titless2, min=newest1value_min2, max=newest1value_max2, labels=newest3labe, values=newest1valus, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)

                        elif titless2 == newest3title:

                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)

                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1values1):


                                if newest1values1[v] == 'f':
                                    x = newest1values1[v]
                                else:
                                    x = int(newest1values1[v])

                                if newest11predvalu[v] == 'f':
                                    y = newest11predvalu[v]
                                else:
                                    y = int(newest11predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            if newest1value_min2 == 0:
                                newest1value_min2 = newest1value_min2
                            else:
                                newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)


                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            newest2value_max2 = 1
                            newest2value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2values1):


                                if newest2values1[v] == 'f':
                                    x = newest2values1[v]
                                else:
                                    x = int(newest2values1[v])

                                if newest22predvalu[v] == 'f':
                                    y = newest22predvalu[v]
                                else:
                                    y = int(newest22predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            if newest2value_min2 == 0:
                                newest2value_min2 = newest2value_min2
                            else:
                                newest2value_min2 = newest2value_min2 - 1

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)




                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3values1):


                                if newest3values1[v] == 'f':
                                    x = newest3values1[v]
                                else:
                                    x = int(newest3values1[v])

                                if newest33predvalu[v] == 'f':
                                    y = newest33predvalu[v]
                                else:
                                    y = int(newest33predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            if newest3value_min2 == 0:
                                newest3value_min2 = newest3value_min2
                            else:
                                newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)



                            
                            print('6.5')

                            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                            it = len(dfoldoldpredvalues1)
                            kt = 0
                            oldoldpredvalu = []
                            while kt < it:
                                oldoldpredval = dfoldoldpredvalues1[kt]
                                oldoldpredvalu.append(oldoldpredval)
                                kt += 1
                            #print(oldoldpredvalu)

                            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                            it = len(dfoldpredvalues1)
                            kt = 0
                            oldpredvalu = []
                            while kt < it:
                                oldpredval = dfoldpredvalues1[kt]
                                oldpredvalu.append(oldpredval)
                                kt += 1
                            #print(oldpredvalu)

                            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            dfpredvalues1 = dfpred.iloc[:,2].values

                            it = len(dfpredvalues1)
                            kt = 0
                            predvalu = []
                            while kt < it:
                                predval = dfpredvalues1[kt]
                                predvalu.append(predval)
                                kt += 1
                            #print(predvalu)

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})

                            #print(residualsklearndfoutliers)
                            #print(residualsklearndfoutliers2)
                            #print(residualsklearndfoutliers3)
                                
                            #residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            #residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            #residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            #newest1outliers = newest11predvalu
                            #newest2outliers = newest22predvalu
                            #newest3outliers = newest33predvalu

                            #newest1valus = newest1valu
                            #newest2valus = newest2valu
                            #newest3valus = newest3valu

                            #print(newest1outliers[0])
                            #print(newest2outliers[0])
                            #print(newest3outliers[0])
                            #print(newest1title)
                            #print(newest2title)
                            #print(newest3title)

                            newest1outliers = newest11predvalu
                            newest2outliers = newest22predvalu
                            newest3outliers = newest33predvalu

                            newest1valus = newest1values1
                            newest2valus = newest2values1
                            newest3valus = newest3values1

                            print(newest1valu)
                            print(newest2valu)
                            print(newest3valu)
                            print(newest11predvalu)
                            print(newest22predvalu)
                            print(newest33predvalu)


               

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})

                        
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 3 lines.html', oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valus, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valus, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=titless2, min=newest1value_min2, max=newest1value_max2, labels=newest3labe, values=newest1valus, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)


                        elif titless2 == newest1title:

                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)

                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1values1):


                                if newest1values1[v] == 'f':
                                    x = newest1values1[v]
                                else:
                                    x = int(newest1values1[v])

                                if newest11predvalu[v] == 'f':
                                    y = newest11predvalu[v]
                                else:
                                    y = int(newest11predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            if newest1value_min2 == 0:
                                newest1value_min2 = newest1value_min2
                            else:
                                newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)


                       


                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            newest2value_max2 = 1
                            newest2value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2values1):


                                if newest2values1[v] == 'f':
                                    x = newest2values1[v]
                                else:
                                    x = int(newest2values1[v])

                                if newest22predvalu[v] == 'f':
                                    y = newest22predvalu[v]
                                else:
                                    y = int(newest22predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            if newest2value_min2 == 0:
                                newest2value_min2 = newest2value_min2
                            else:
                                newest2value_min2 = newest2value_min2 - 1

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)





                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3values1):


                                if newest3values1[v] == 'f':
                                    x = newest3values1[v]
                                else:
                                    x = int(newest3values1[v])

                                if newest33predvalu[v] == 'f':
                                    y = newest33predvalu[v]
                                else:
                                    y = int(newest33predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            if newest3value_min2 == 0:
                                newest3value_min2 = newest3value_min2
                            else:
                                newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)


               

                            
                            
                            print('5')

                            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                            it = len(dfoldoldpredvalues1)
                            kt = 0
                            oldoldpredvalu = []
                            while kt < it:
                                oldoldpredval = dfoldoldpredvalues1[kt]
                                oldoldpredvalu.append(oldoldpredval)
                                kt += 1
                            #print(oldoldpredvalu)

                            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                            it = len(dfoldpredvalues1)
                            kt = 0
                            oldpredvalu = []
                            while kt < it:
                                oldpredval = dfoldpredvalues1[kt]
                                oldpredvalu.append(oldpredval)
                                kt += 1
                            #print(oldpredvalu)

                            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            dfpredvalues1 = dfpred.iloc[:,2].values

                            it = len(dfpredvalues1)
                            kt = 0
                            predvalu = []
                            while kt < it:
                                predval = dfpredvalues1[kt]
                                predvalu.append(predval)
                                kt += 1
                            #print(predvalu)

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                                
                            #residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/SKLearn/Residualsklearndfoutliers.csv")
                            #residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/SKLearn/Residualsklearndfoutliers2.csv")
                            #residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/SKLearn/Residualsklearndfoutliers3.csv")

                            #newest1outliers = newest11predvalu
                            #newest2outliers = newest22predvalu
                            #newest3outliers = newest33predvalu

                            #newest1valus = newest1valu
                            #newest2valus = newest2valu
                            #newest3valus = newest3valu

                            #print(newest1outliers[0])
                            #print(newest2outliers[0])
                            #print(newest3outliers[0])
                            #print(newest1title)
                            #print(newest2title)
                            #print(newest3title)

                            newest1outliers = newest11predvalu
                            newest2outliers = newest22predvalu
                            newest3outliers = newest33predvalu

                            newest1valus = newest1valu
                            newest2valus = newest2valu
                            newest3valus = newest3valu

                            print(newest1valu)
                            print(newest2valu)
                            print(newest3valu)
                            print(newest11predvalu)
                            print(newest22predvalu)
                            print(newest33predvalu)


               

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})


               


                        
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            

                            return render_template('view 19 3 lines.html', oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valus, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valus, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=titless2, min=newest1value_min2, max=newest1value_max2, labels=newest3labe, values=newest1valus, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)


                        else:
                            print('6')
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=line_outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, oldoldvalues=oldoldvalus, oldoldtitle=oldtitle2, oldoldmin=oldvalue_min2, oldoldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=oldoldlabe, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel2, oldoldylabel=oldylabel)
            elif datatype == 'Synetica':
                    
                print('add')
                dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                oldvalues1 = dfold.iloc[:,2].values
                oldtimestamp = dfold.iloc[:,1].values
                oldtitle = dfold.columns[2]
                #print(oldvalues1)
                #print(oldtimestamp)
                #print(oldtitle)

                oldylabelarray = str(oldtitle).split()
                #oldylabel = oldylabelarray[-1]

                if oldylabelarray[-1] == 'Count':
                    oldylabel = oldylabelarray[-3] + ' ' + oldylabelarray[-2] + ' ' + oldylabelarray[-1]
                else:
                    oldylabel = oldylabelarray[-1]

                

                #print(oldvalue_max)
                #print(oldvalue_min)
                #print(oldylabel)

                oldvalue_min = 0
                oldvalue_max = 0
                
                

                it = len(oldvalues1)
                kt = 0
                oldvalu = []
                while kt < it:
                    oldval = oldvalues1[kt]
                    if oldval == 'f':
                        oldvalu.append(oldval)
                    else:
                        oldvalu.append(int(oldval))
                    kt += 1
                #print(oldvalu)


                oldz = len(oldtimestamp)
                oldy = 0
                oldlabe = []
                while oldy < oldz:
                    oldlab = oldtimestamp[oldy]
                    oldlabe.append(oldlab)
                    oldy += 1
                #print(oldlabe)

                dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")

                dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                it = len(dfoldpredvalues1)
                kt = 0
                oldpredvalu = []
                while kt < it:
                    oldpredval = dfoldpredvalues1[kt]
                    if oldpredval == 'f':
                        oldpredvalu.append(oldpredval)
                    else:
                        oldpredvalu.append(int(float(oldpredval)))
                    kt += 1
                #print(oldpredvalu)
                oldoutliers = oldpredvalu

                x = 0
                y=0

                v = 0

                #print(oldvalu)

                while v < len(oldvalu):

                    if oldvalu[v] == 'f':
                        x = oldvalu[v]
                        
                    else:
                        x = oldvalu[v]
                        x = int(x)

                    if oldpredvalu[v] == 'f':
                        y = oldpredvalu[v]
                    else:
                        y = oldpredvalu[v]
                        y = int(float(y))

                    if x == 'f':
                        if y == 'f':
                            v=v
                        elif y > oldvalue_max:
                            oldvalue_max = y
                        elif y < oldvalue_min:
                            oldvalue_min = y
                        else:
                            v=v
                    else:
                        if y == 'f':
                            if x > oldvalue_max:
                                oldvalue_max = x
                            elif x < oldvalue_min:
                                oldvalue_min = x
                            else:
                                v=v
                        else:
                            if x > y:
                                if x > oldvalue_max:
                                    oldvalue_max = x
                                elif y < oldvalue_min:
                                    oldvalue_min = y
                                else:
                                    v=v

                            elif y > x:
                                if x < oldvalue_min:
                                    oldvalue_min = x
                                elif y > oldvalue_max:
                                    oldvalue_max = y
                                else:
                                    v=v
                            else:
                                
                                if x < oldvalue_min:
                                    oldvalue_min = x
                                elif y > oldvalue_max:
                                    oldvalue_max = y
                                else:
                                    v=v
                                    

                    #print(x)
                    #print(y)
                    v+=1
                            


                
                dfold2 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                oldvalues2 = dfold2.iloc[:,2].values
                oldtimestamp2 = dfold2.iloc[:,1].values
                oldtitle2 = dfold2.columns[2]
                #print(oldvalues2)
                #print(oldtimestamp2)
                #print(oldtitle2)

                oldylabelarray2 = str(oldtitle2).split()

                if oldylabelarray2[-1] == 'Count':
                    oldylabel2 = oldylabelarray2[-3] + ' ' + oldylabelarray2[-2] + ' ' + oldylabelarray2[-1]
                else:
                    oldylabel2 = oldylabelarray2[-1]

                

                #print(oldvalue_max2)
                #print(oldvalue_min2)
                #print(oldylabel2)
                

                it = len(oldvalues2)
                kt = 0
                oldvalu2 = []
                while kt < it:
                    oldval2 = oldvalues2[kt]
                    if oldval2 == 'f':
                        oldvalu2.append(oldval2)
                    else:
                        oldvalu2.append(int(oldval2))
                    kt += 1
                #print(oldvalu2)

                oldoldvalu = oldvalu2

                oldoldz = len(oldtimestamp2)
                oldoldy = 0
                oldoldlabe = []
                while oldoldy < oldoldz:
                    oldoldlab = oldtimestamp2[oldoldy]
                    oldoldlabe.append(oldoldlab)
                    oldoldy += 1
                #print(oldoldlabe)

                dfold2pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfold2predvalues1 = dfold2pred.iloc[:,2].values

                it = len(dfold2predvalues1)
                kt = 0
                oldpred2valu = []
                while kt < it:
                    oldpred2val = dfold2predvalues1[kt]
                    if oldpred2val == 'f':
                        oldpred2valu.append(oldpred2val)
                    else:
                        oldpred2valu.append(int(oldpred2val))
                    kt += 1
                #print(oldpred2valu)
                oldoldoutliers = oldpred2valu

                oldvalue_min2 = 0
                oldvalue_max2 = 1



                v = 0
                x = 0
                y=0
                while v < len(oldvalu2):


                    if oldvalu2[v] == 'f':
                        x = oldvalu2[v]
                    else:
                        x = int(oldvalu2[v])

                    if oldpred2valu[v] == 'f':
                        y = oldpred2valu[v]
                    else:
                        y = int(oldpred2valu[v])
                        
                    if x == 'f':
                        if y == 'f':
                            print('')
                        elif y > oldvalue_max2:
                            oldvalue_max2 = y
                        elif y < oldvalue_min2:
                            oldvalue_min2 = y
                        else:
                            v=v
                    else:
                        if y == 'f':
                            if x > oldvalue_max2:
                                oldvalue_max2 = x
                            elif x < oldvalue_min2:
                                oldvalue_min2 = x
                        else:
                            if x > y:
                                if x > oldvalue_max2:
                                    oldvalue_max2 = x
                                elif y < oldvalue_min2:
                                    oldvalue_min2 = y
                                else:
                                    v=v

                            elif y > x:
                                if x < oldvalue_min2:
                                    oldvalue_min2 = x
                                elif y > oldvalue_max2:
                                    oldvalue_max2 = y
                                else:
                                    v=v
                            else:
                                
                                if x < oldvalue_min2:
                                    oldvalue_min2 = x
                                elif y > oldvalue_max2:
                                    oldvalue_max2 = y
                                else:
                                    v=v
                    v+=1


                








                startdate = ''
                enddate = ''
                try:
                    meter_id = request.form.get('meterselection')
                    
                    parameterems = request.form.get('paramselection')
                    param = parameterems
                    parameterems = str(parameterems)
                    startdate = request.form.get('starttime')
                    enddate = request.form.get('endtime')
                    #print(startdate)
                    #print(enddate)
                except:
                    print('hi')
                    meter_id = 'MC044-L01/M1'
                    parameterems = '`reading`'
                    parameterems = str(parameterems)
                
                print(type(parameterems))
                
                if meter_id == None:
                    meter_id = 'MC044-L01/M1'
                if param == None:
                    print('hi')
                    parameterems = '`reading`'
                if startdate == '':
                    startdate = "'2018-11-08 00:00:00'"
                if enddate == '':
                    enddate = "'2018-11-09 01:00:00'"
                parameterems = parameterems.replace('`','')
                parameterems = '`' + parameterems + '`'
                residualstartdate = startdate
                residualenddate = enddate
                startdate = str(startdate).replace('T',' ')
                #startdate = "'2018-11-08 00:00:00'"
                startdate = "'" + startdate + "'"
                enddate = str(enddate).replace('T',' ')
                #enddate = "'2018-11-09 01:00:00'"
                enddate = "'" + enddate + "'"
                startdate = startdate.replace("'","")
                enddate = enddate.replace("'","")
                residualstartdate = startdate.replace(' ','T')
                residualenddate = enddate.replace(' ','T')
                #print(residualstartdate)
                #print(residualenddate)
                startdate = "'" + startdate + "'"    
                enddate = "'" + enddate + "'"
                
                print(parameterems)
                print(meter_id)

                table = '[' + 'Syntest' + str(meter_id) + ']'

                SYNtablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Syntables.csv")

                SYNtables = SYNtablesdf['tables']

                SYNtables = np.array(SYNtables)

                tablecheck = 'Syntest' + str(meter_id)

                print(table)
                print(tablecheck)

                print(SYNtables[0])

                Syntitlefix = ["MC044-L01/M3|Faraday Lifeboat Electricity", "MC044-L01/M6|Chiller No 1 Electricity", "MC044-L01/M8|Chiller No 2 Electricity", "MC044-L01/M7|MCCP Meter", "MC044-L01/M1|DB LCP", "MC044-L01/M2|UPS Output", "MC044-L01/M4|UPS Output Rectifier", "MC044-L02/M21R856|Central Services Immersion Heater", "MC044-L01/M5|Faraday Building Gas","MC076-L01/M6|Engineering Water","MC076-L01/M3|Engineering Gas Meter","MC076-L01/M9R20|Engineering Heat Meter","MC048-L01/M1|Chaplaincy Centre Electricity", "MC048-L01/M2|Chaplaincy Centre Kitchen Electricity","MC048-L01/M3|Chaplaincy Centre Water", "MC048-L01/M4|Chaplaincy Centre Kitchen Water","MC048-L01/M5|Chaplaincy Centre Heat Meter","MC003_L02_M1|Bailrigg House Electricity","MC003_L02_M4|Bailrigg House Water","MC003_L02_M3|Bailrigg House Gas","AP081-L01/M2|Barker House Farm Water","AP081-L01/M3|Barker House Farm Gas","MC030-L01/M3|Bowland Annexe House Electricity","MC042-L01/M10R0|Bowland Annexe Heat Meter","MC042-L01/M9R3205|Bowland Ash Electricity","MC042-L01/M1|Bowland Ash Water","MC042-L01/M11R0|Bowland Ash Heat Meter","MC030-L01/M2|Bowland Ash Gas","MC014-L01/M1|Bowland Hall 1 - 7 Electricity", "MC014_L02_M1|Bowland Hall 8-15 Electricity","MC014-L01/M2|Bowland Hall 1 - 7 Water", "MC014_L02_M2|Bowland Hall 8-15 Water","MC043-L01/M3|Bowland North Electricity","MC043-L01/M2|Bowland North Water","MC043-L01/M1|Bowland North Heat Meter","MC062-L01/M25R2064|Bowland Tower MCCP Panel", "MC062-L01/M26R2068|Bowland Tower Sprinkler", "MC062-L01/M7|Bowland Tower Dis Board", "MC062-L01/M27R2072|Bowland Tower D & E Lighting", "MC062-L01/M28R2076|Bowland Tower D & E Total", "MC062-L01/M36R2060|Bowland Tower F, G & H Lighting", "MC062-L01/M37R2064|Bowland Tower F, G & H Total", "MC062-L01/M29R2080|Bowland Tower J, K & L Lighting", "MC062-L01/M30R2084|Bowland Tower J, K & L Total", "MC062-L01/M34R2052|Bowland Tower M, N & O Lighting", "MC062-L01/M35R2056|Bowland Tower M, N & O Total", "MC062-L01/M4|Bowland Tower E Flat 16/17", "MC062-L01/M21R2048|Bowland Tower South F 18", "MC062-L01/M22R2052|Bowland Tower S F19/20", "MC062-L01/M1|Bowland Tower East B Flr", "MC062-L01/M2|Bowland Tower East C Flr", "MC062-L01/M13R2064|Bowland Tower South B Flr", "MC062-L01/M24R2060|Bowland Tower South C Flr","MC062-L01/M14R2068|Bowland Tower Water","MC062-L01/M17R2080|Bowland Tower Sth and E Wing Heat Meter", "MC062-L01/M16R2076|Slaidburn House Heat Meter","MC202-L01/M12R999|Charles Carter A Floor A1 Total", "MC202-L01/M13R999|Charles Carter A Floor A1 Lighting", "MC202-L01/M14R999|Charles Carter A Floor A2 Total", "MC202-L01/M15R999|Charles Carter A Floor A2 Lighting", "MC202-L01/M16R999|Charles Carter B Floor B1 Total", "MC202-L01/M17R999|Charles Carter B Floor B1 Lighting", "MC202-L01/M18R999|Charles Carter B Floor B2 Total", "MC202-L01/M19R999|Charles Carter B Floor B2 Lighting", "MC202-L01/M10R72|Charles Carter Plant Room DB", "MC202-L01/M11R72|Charles Carter Comms Plant Room", "MC202-L01/M20R999|Charles Carter C Floor C1 Total", "MC202-L01/M21R999|Charles Carter C Floor C1 Lighting", "MC202-L01/M22R999|Charles Carter C Floor C2 Total", "MC202-L01/M23R999|Charles Carter C Floor C2 Lighting", "MC202-L01/M24R999|Charles Carter D Floor D1 Total", "MC202-L01/M25R999|Charles Carter D Floor D1 Lighting", "MC202-L01/M26R999|Charles Carter D Floor D2 Total", "MC202-L01/M27R999|Charles Carter D Floor D2 Lighting","MC202_L01_M1|Charles Carter Water","MC202_L01_M2|Charles Carter Heat Meter","MC032-L02/M1|County South Flats 5, 6 & 7", "MC032-L01/M16R999|County South DB D2 Lighting", "MC032-L02/M11R999|County South DB C2 Power", "MC032-L02/M12R999|County South DB C2 Lighting", "MC032-L01/M11R999|County South DB B1 Power", "MC032-L01/M12R999|County South DB B1 Lighting", "MC032-L01/M13R999|County South DB C1 Power", "MC032-L01/M14R999|County South DB C1 Lighting", "MC032-L01/M15R999|County South DB D1 Power", "MC032-L03/M1|County South Flats 1 2 3 4", "MC032-L03/M13R999|County South DB D3 Power", "MC032-L03/M14R999|County South DB D3 Lighting", "MC032-L03/M11R999|County South DB C3 Power", "MC032-L03/M12R999|County South DB C3 Lighting", "MC032-L03/M9R999|County South DB B3 Power", "MC032-L03/M10R999|County South DB B3 Lighting", "MC032-L01/M1|County South Flat 10 11 12 13 14 ", "MC032-L02/M13R999|County South BD D2 Power", "MC032-L02/M14R999|County South BD D2 Lighting", "MC032-L011/M8|County South Plant Room Lighting", "MC032-L011/M7|County South Plant Room Power", "MC032-L09/M1|County South Plant Room", "MC032-L04/M1|County South BB01 Riser", "MC032-L04/M2|County South BB02 Riser", "MC032-L04/M3|County South BB03 Riser", "MC032-L04/M10R999|County South DB A1 Power", "MC032-L04/M9R999|County South DB A1 Lighting", "MC032-L04/M8|County South Main Incomer", "MC032-L011/M11R52|County South Kitchen Immersion Heater","MC134-L02/M2|County South Res 75 - 77 Water","MC032-L011/M6|County South Laundrette Heat Meter","MC032-L09/M10R2052|County South Laundrette Gas", "MC134-L02/M1|County South Res 75 - 77","MC126-L01/M1|Fylde Pilling Water","MC078-L02/M1|George Fox Electricity", "MC078-L03/M2|George Fox Immersion Heater Ground Floor Electricity", "MC078-L03/M3|George Fox Immersion Heater 1st Floor Electricity","MC078-L02/M3|George Fox Water","MC031-L01/M3|Great Hall Electricity","MC031-L01/M1|Great Hall Water","MC031-L01/M4|Great Hall Gas","MC070-L04/M5|Biology Basement No 1 Immersion Heater", "MC070-L04/M6|Biology Basement No 2 Immersion Heater", "MC070-L01/M1|IENS Phase 1 Electricity", "MC070-L01/M2|NERC Phase 1 IENS Re Furb", "MC070-L01/M7|Biology Phase 1 No 1 Immersion Heater", "MC070-L01/M8|Biology Phase 1 No 2 Immersion Heater","MC070-L01/M3|IENS Phase 1 Water", "MC070-L03/M1|IENS Phase 2 Water - NERC","MC070-L01/M9R20|IENS Phase 1 Heat Meter", "MC070-L04/M10R20|IENS Phase 2 Heat Meter","MC070-L01/M4|IENS Phase 1 Gas", "MC070-L02/M6|IENS Phase 2 Gas - NERC","MC102-L01/M3|Infolab Electricity", "MC102-L01/M5|Infolab Chiller No 1 Electricity", "MC102-L01/M6|Infolab Chiller No 2 Electricity","MC102-L01/M4|Infolab Water","MC102-L01/M1|Plant Room Gas","MC070-L04/M3|LEC 2 NERC Gas","MC065-L01/M13R5099|DB A1P", "MC065-L01/M14R5099|DB B1L", "MC065-L01/M15R5099|DB B1P", "MC065-L01/M19R5099|DB B2P", "MC065-L01/M12R5099|DB A1L", "MC065-L01/M18R5099|DB B2L", "MC065-L01/M16R5099|DB A2L", "MC065-L01/M17R5099|DB A2P", "MC065-L04/M10R45099|DB C2P", "MC065-L04/M9R45099|DB C2L","MC204-L02/M3|Steam Room", "MC204-L02/M12R2060|AHU 1", "MC204-L02/M13R2064|AHU 2", "MC204-L02/M14R2068|Floating Floor", "MC204-L02/M4|MCCP 1", "MC204-L02/M1|MCCP 2", "MC204-L02/M9R2048|Passenger Lift", "MC204-L02/M6|Sauna", "MC204-L01/M9R999|BasePlRmlgs 01-L", "MC204-L01/M10R999|BasePlRm P DB01P", "MC204-L01/M11R999|Wet CH L DB-02-L", "MC204-L01/M12R999|Wet Ch P DB-02-P", "MC204-L02/M7|DB External", "MC204-L02/M15R2072|DB 5", "MC204-L03/M9R52|Main Electric Sub No 12 Sports Centre", "MC204-L02/M16R2076|DB 6", "MC204-L02/M8|Comms DB", "MC204-L02/M10R2052|Generator", "MC204-L02/M5|Pool Filter", "MC204-L02/M16R2076|Ground Floor Dry Lighting", "MC204-L02/M2|Ground Floor Dry Power", "MC204-L01/M15R999|Ground Floor Fitness Lighting", "MC204-L01/M16R999|Grond Floor Fitness Power", "MC204-L01/M17R999|Roof Lighting", "MC204-L01/M18R999|Roof Power","MC204-L01/M1|Sports Centre Water","MC204-L01/M5|CT Heating DHW Primary", "MC204-L01/M6|MTHW Heating Primary", "MC204-L01/M7|CT Heating Secondary", "MC204-L01/M8|VT Heating Secondary","MC204-L01/M2|Main Hall Gas Meter", "MC204-L01/M3|Gas Boilers", "MC204-L01/M4|Main Gas Meter across the Road","MC075-L02/M1|Management No 1 Immersion Heater", "MC075-L02/M2|Management No 2 Immersion Heater", "MC203-L01/M4|Management Phase 2 Adj Lift 1 Electricity","MC075-L02/M3|Management School Phase 1 Heat Meter","MC062-L01/M40R20|Slaidburn House Electricity", "MC061-L01/M5|LUSU Shop Electricity","MC001-L01/M3|The Croft Electricity","MC001-L01/M1|The Croft Water","MC001-L01/M2|The Croft Gas","MC051-L01/M1|University House 1 Phase 1", "MC051-L01/M3|University House 1 Phase 2", "MC051-L01/M6|University House Immersion Heater","MC051-L01/M5|University House Water","MC051-L01/M4|University House Heat Meter","MC077-L01/M1|Whewell Building Electricity","MC077-L01/M2|Whewell Building Water","MC200-L01/M9R2048|DB 1C", "MC200-L01/M10R2052|BMS Panel", "MC200-L01/M11R2056|Lift", "MC200-L01/M12R2060|Chiller Units", "MC200-L01/M1|DB 1A", "MC200-L01/M2|DB 1B", "MC200-L01/M3|DB 2A", "MC200-L01/M4|DB 2B", "MC200-L01/M5|DB 3A", "MC200-L01/M6|DB 3B", "MC200-L01/M7|Dimmer Rack No 1", "MC200-L01/M8|Dimmer Rack No 2","MC200-L01/M13R2064|LICA Heat Meter","MC061-L04/M23R52|CHP Elct Input","MC061-L01/M14R20|CHP Heat Meter", "MC061-L04/M6|Biomass Heat Meter","MC061-L01/M8|MCCP Electric", "MC061-L01/M1|Circulation Pump No 1", "MC061-L01/M2|Circulation Pump No 2", "MC061-L01/M3|Circulation Pump No 3", "MC061-L01/M4|Circulation Pump No 4","MC061-L01/M6|Water Meter RHS Rear", "MC061-L01/M5|Water Meter LHS Rear","MC171-L01/M9R999|Post Graduate Statistics Electricity","MC171-L01/M1|Post Graduate Statistics Water","MC171-L01/M21R20|Post Graduate Statistics Heat Meter","MC067-L01/M9R52|Pre School Centre Electricity","MC067-L01/M1|Pre School Centre Water","MC067-L01/M2|Pre School Centre Gas","MC050-L01/M1|Security Office Electricity","MC061-L04/M24R52|No 1 Transformer Sub 1 Energy Centre", "MC061-L04/M26R52|No 2 Transformer Sub 1 Energy Centre", "MC061-L04/M14R2060|Boiler House CHP Gas","MC061-L04/M1|Boiler Gas", "MC061-L04/M2|Furness and Fylde Residence", "MC061-L04/M13R2056|Firm Gas", "MC061-L04/M1|3 Gas Boilers","MC199-L01/M11R2048|Chiller No 2", "MC199-L01/M3|LV3-NE Supply", "MC199-L01/M6|ISS Total", "MC199-L01/M13R2056|LV2-ESS Supply", "MC199-L01/M14R2060|Chiller No 1","MC013-L01/M2|No 1 Transformer Sub 3 Gt Hall", "MC013-L01/M4|No 2 Transformer Sub 3 Gt Hall", "MC013-L01/M3|LEC Workshops NE Corner","MC203-L01/M10R1280|No 1 Transformer Sub 5 Grizedale College", "MC203-L01/M11R1280|No 2 Transformer Sub 5 Grizedale College","MC102-L04/M9R52|No 1 Transformer Sub 6 Info Lab", "MC102-L04/M10R52|No 2 Transformer Sub 6 Info Lab","MC138-L01/M9R52|No 1 Transformer Sub 7 Alex Park", "MC138-L01/M12R52|No 2 Transformer Sub 7 Alex Park","MC068-L01/M13R52|No 1 Transformer Sub 8 Lec 1", "MC068-L01/M14R52|Lec 3 No 1 Transformer No 10 Sub Station","MC140-L01/M14R52|No 1 Transformer SS Furness Residence","MC199-L01/M1|Non Ess (MCCN)", "MC199-L01/M4|LV4-NE Supply", "MC199-L01/M10R52|Incomer No 2", "MC199-L01/M12R2052|Standby Gener", "MC071-L02/M1|Flat 1 Comsumer Unit", "MC071-L02/M2|Flat 2 Comsumer Unit", "MC071-L02/M3|Flat 3 Comsumer Unit", "MC071-L02/M4|Flat 4 Comsumer Unit", "MC071-L02/M13R2064|Flat 5 Comsumer Unit", "MC071-L02/M14R2068|Flat 6 Comsumer Unit", "MC071-L02/M15R2072|Flat 7 Comsumer Unit", "MC071-L02/M23R2056|Power Section DB LCDB 021", "MC071-L02/M24R2060|Lighting Section DB LCDB 021", "MC071-L02/M25R2064|Power Section DB NDB 02", "MC071-L02/M26R2068|Lighting Section DB NDB 02", "MC071-L02/M27R2072|Power Section DB LBDB 021", "MC071-L02/M28R2076|Lighting Section DB LBDB 021", "MC071-L02/M29R2080|Power Section DB NDB 01", "MC071-L02/M30R2084|Lighting Section DB NDB 01", "MC071-L02/M31R2088|Power Section DB LADB 021", "MC071-L02/M32R2092|Lighting Section DB LADB 021", "MC071-L01/M18R2084|SW Bus Bar", "MC071-L01/M17R2080|NE Bus Bar", "MC071-L01/M41R2080|Elect A Floor", "MC071-L01/M4|NW Pass Lift", "MC071-L01/M19R2088|South Block DB DB 4X", "MC071-L01/M34R2052|PWR Foyer GDB 3", "MC071-L01/M35R2056|Lgt Foyer GDB 3", "MC071-L01/M3|North East Lift", "MC071-L01/M32R2092|Power DB LBDB 011", "MC071-L01/M34R2052|Power Foyer DB GDB 003", "MC071-L01/M35R2056|Lighting Foyer DB GDB 003", "MC071-L01/M36R2060|Power DB LADB 011", "MC071-L01/M37R2064|Lighting DB LADB 011","MC131-L01/M3|Furness Hawkshead Water", "MC071-L02/M5|Flat 1 Water Meter", "MC071-L02/M6|Flat 2 Water Meter", "MC071-L02/M7|Flat 3 Water Meter", "MC071-L02/M8|Flat 4 Water Meter", "MC071-L02/M16R2076|Flat 5 Water Meter", "MC071-L02/M17R2080|Flat 6 Water Meter", "MC071-L02/M18R2084|Flat 7 Water Meter", "MC071-L01/M38R2068|Main Water Meter", "MC071-L01/M40R2076|Pressurisation Make up Water", "MC071-L01/M38R2068|Furness 140 Main Water IN ","MC071-L02/M9R2048|Flat 1 Heat Meter", "MC071-L02/M10R2052|Flat 2 Heat Meter", "MC071-L02/M11R2056|Flat 3 Heat Meter", "MC071-L02/M12R2060|Flat 4 Heat Meter", "MC071-L02/M19R2088|Flat 5 Heat Meter", "MC071-L02/M20R2092|Flat 6 Heat Meter", "MC071-L02/M21R2048|Flat 7 Heat Meter", "MC071-L01/M23R2056|LPHW DHWS Heat Meter","LV1 UPS 1 Campus Servers DB/E/S4B|Campus Services DB-E-S4B", "LV1 UPS 1 Regional Networking and Services DB/E/S3B|Regional Network and Services DB-E-S3B", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1B|Regional Campus Co-Lo DB-E-S1B", "LV1 UPS 1 Campus Network DB/E/S2B|Campus Network DB-E-S2B", "LV1 UPS 1 Building Comms DB/E/S5B|Building Coms DB-E-S5B", "LV1 UPS 1 Campus Servers DB/E/S4A|Campus Servers DB-E-S4A", "LV1 UPS 1 Regional Networking and Services DB/E/S3A|Regional Networking Services DB-E-S3A", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1A|Regional and Campus Co Lo DB-E-S1A", "LV1 UPS 1 Campus Network DB/E/S2A|Campus Network DB-E-S2A", "LV1 UPS 1 Building Comms DB/E/S5A|Building Coms DB-E-S5A", "LV2 - ESS Supply From LV1 -ESS|LV2 ESS Main M", "LV2 - Essential Mechanical Control Centre 2/6|Ess Mech Control Centre", "LV2 - ESS CB/E/M2 2/8|DB-E-M2", "LV2 - ESS UPS Future|Future UPS", "LV1 -UPS1 Incomer No1|UPSLV-US-1", "LV2 - ESS UPS 2/4|UPSLV-US-4","ISS Main Water Meter|ISS Water Meter","ISS Main Heat Meter|ISS Heat Meter"]   

                conn = sqlite3.connect('SynOUT.db')


                c = conn.cursor()

                a = 0

                while a < len(SYNtables):
                    check = SYNtables[a]

                    if tablecheck == check:
                        query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        a = len(SYNtables) + 1


                    else:
                        dataset2 = []
                        timeaxis2 = []
                        timeaxis = []
                        dataset2 = np.array(dataset2)
                        timeaxis2 = np.array(timeaxis2)
                        print('')



                    a+=1

                
                x = pd.DataFrame(timeaxis, columns=['timestamp'])
                x['data'] = dataset2

                x['timestamp'] = timeaxis2

                xxx = x['timestamp']

                x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                #x2 = x.set_index('timestamp')

                


                

                #################################### Modelling section

                labels5 = xxx

                values5 = x['data']

                values5 = np.array(values5)


                a = 0
                X5 = 0
                X6 = []
                XYear = []
                XMonth= []
                XDay= []
                XHour= []
                XMin= []
                Xsec= []

                while a < len(labels5):
                    X5 = labels5[a]
                    X5 = X5.replace('[', '')
                    X5 = X5.replace(']', '')
                    X5 = X5.replace("'", "")
                    X5 = X5.replace(":", " ")
                    X5 = X5.replace("-", " ")
                    X5 = X5.replace("/", " ")
                    X5=X5.split()
                    X55 = X5[-3:-1]
                    X6.append(X55)
                    a+=1


                X7 = np.array(X6)


                #################################### Smart model datetime


                #print(startdate)
                #print(enddate)

                startdate = startdate.replace('-',' ')
                startdate = startdate.replace(':',' ')
                startdate = startdate.replace("'"," ")

                enddate = enddate.replace('-',' ')
                enddate = enddate.replace(':',' ')
                enddate = enddate.replace("'"," ")


                #print(startdate)
                #print(enddate)

                startdate = startdate.split()
                enddate = enddate.split()

                #print(startdate)
                #print(enddate)

                startyear = int(startdate[0])
                startmonth = int(startdate[1])
                startday = int(startdate[2])

                endyear = int(enddate[0])
                endmonth = int(enddate[1])
                endday = int(enddate[2])

                startdate = datetime.datetime(startyear, startmonth, startday)
                enddate = datetime.datetime(endyear, endmonth, endday)
                z = enddate-startdate

                #print(z)

                modelstart = startdate - (4*z)

                modelend = startdate

                print(modelstart)
                print(modelend)

                weekday00 = []
                weekday0 = []
                weekday1 = []
                weekday2 = []
                weekday3 = []
                weekday4 = []
                weekday5 = []
                weekday6 = []

                weekday = []
                weekend = []

                weekdaynumber = []
                weekendnumber = []

                weekdaydatetime = []
                weekenddatetime = []

                modelstart2 = modelstart
                modelstart3 = modelstart
                modelend3 = modelend
                


                while modelstart2 != modelend + datetime.timedelta(days=1):
                    AA = modelstart2

                    AAday = AA.weekday()

                    #print(AA)
                    #print(AAday)

                    if AAday < 5:
                        weekday.append(str(AA))
                        weekdaynumber.append(AAday)
                        weekdaydatetime.append(AA)
                    else:
                        weekend.append(str(AA))
                        weekendnumber.append(AAday)
                        weekenddatetime.append(AA)
                        

                    modelstart2 = modelstart2 + datetime.timedelta(days=1)



                print(weekday)

                print(weekend)

                print(weekdaynumber)

                print(weekendnumber)

                print(weekdaydatetime)

                print(weekenddatetime)

                

                modelstart = str(modelstart)
                modelstart = "'" + modelstart + "'"

                modelend = str(modelend)
                modelend = "'" + modelend + "'"

                #print(modelstart)

                #print(modelend)


                a = 0
                aa = 0

                modelweekdaystart = []
                modelweekdayend = []
                modelweekendstart = []
                modelweekendend = []

                modelweekday = []
                modelweekend = []

                modelweekday2 = []
                modelweekend2 = []

                while modelstart3 != modelend3 + datetime.timedelta(days=1):

                    if len(weekday) == 0:
                        weekday = weekday
                        b = ''
                        d = -1
                        f = datetime.datetime.now()
                    else:

                        if len(weekday) > a:
                            b = weekday[a]
                            d = weekdaynumber[a]
                            f = weekdaydatetime[a]
                            
                        else:
                            b = weekday[0]
                            d = weekdaynumber[0]
                            f = datetime.datetime.now()
                    if len(weekend) == 0:
                        cc = ''
                        e = -1
                        g = datetime.datetime.now()
                        
                    else:
                        
                        if len(weekend) > aa:
                            cc = weekend[aa]
                            e = weekendnumber[aa]
                            g = weekenddatetime[aa]
                            
                        else:
                            cc = weekend[0]
                            e = weekendnumber[0]
                            g = datetime.datetime.now()
                            


                    if f > g:
                        #print(g)

                        modelweekend.append(cc)

                        if e == 6:
                            


                            #print(modelweekend)

                            g = g + datetime.timedelta(days=1)

                            modelweekend.append(str(g))

                            modelweekend2.append(modelweekend)

                            

                            modelweekend = []

                        
                            

                        
                        aa+=1


                    else:
                        #print(f)

                        modelweekday.append(b)

                        if d == 4:
                            #print(modelweekday)

                            f = f + datetime.timedelta(days=1)

                            modelweekday.append(str(f))

                            
                            

                            modelweekday2.append(modelweekday)

                            modelweekday = []

                        
                        a+=1


                    
                    modelstart3 = modelstart3 + datetime.timedelta(days=1)


                if len(modelweekday) > 0:
                    
                    f = f + datetime.timedelta(days=1)

                    modelweekday.append(str(f))

                    modelweekday2.append(modelweekday)

                if len(modelweekend) > 0:
                    
                    g = g + datetime.timedelta(days=1)

                    modelweekend.append(str(g))

                    modelweekend2.append(modelweekend)
                    

                #print(modelweekday)
                #print(modelweekend)

                print(modelweekday2)
                #print(modelweekday2)
                print(modelweekend2)
                #print(modelweekend2)



                loopdataweekday = []

                looptimeaxisweekday = []

                loopdataweekend = []

                looptimeaxisweekend = []

                


                a = 0
                b = 0

                #print(modelweekday2[3])

                while a < len(modelweekday2):
                    start = modelweekday2[a][0]
                    end = modelweekday2[a][-1]

                    

                    start = str(start)
                    end = str(end)

                    start = "'" + start + "'"
                    end = "'" + end + "'"

                    print(start)
                    print(end)

                    while b < len(SYNtables):
                        check = SYNtables[b]

                        if tablecheck == check:
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            print(len(timeaxis3loop))

                            b = len(SYNtables) + 1


                        else:
                            dataset3loop = []
                            dataset4loop = np.array(dataset3loop)
                            timeaxis3loop = []
                            print('')



                        b+=1

                    

                

                    

                    if len(dataset4loop) == 0:
                        print('0')

                    else:
                        if len(timeaxis3loop) == 0:
                            print('0')

                        else:

                            loopdataweekday.append(dataset4loop)
                            looptimeaxisweekday.append(timeaxis3loop)



                    a +=1

                a = 0
                b = 0

                while a < len(modelweekend2):
                    start = modelweekend2[a][0]
                    end = modelweekend2[a][-1]

                    

                    start = str(start)
                    end = str(end)

                    start = "'" + start + "'"
                    end = "'" + end + "'"


                    while b < len(SYNtables):
                        check = SYNtables[b]

                        if tablecheck == check:
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))

                            b = len(SYNtables) + 1


                        else:
                            dataset3loop = []
                            dataset4loop = np.array(dataset3loop)
                            timeaxis3loop = []
                            print('')



                        b+=1

                    

                

                    

                    if len(dataset4loop) == 0:
                        print('0')

                    else:
                        if len(timeaxis3loop) == 0:
                            print('0')

                        else:

                            loopdataweekend.append(dataset4loop)
                            looptimeaxisweekend.append(timeaxis3loop)

                    

                    #loopdataweekend.append(dataset4loop)

                    #looptimeaxisweekend.append(timeaxis3loop)



                    a +=1


                #print(loopdataweekday)
                #print(len(looptimeaxisweekday))
                #print(loopdataweekend)
                #print(looptimeaxisweekend)

               # print(len(loopdataweekday))
                #print(len(looptimeaxisweekday))
               # print(len(loopdataweekend))
                #print(len(looptimeaxisweekend))

                #print(loopdataweekday[0])


                


    ##########weekday data
                a = 0

                if len(loopdataweekday) == 0:
                    print('')
                    dataset444 = []
                else:

                    dataset444 = loopdataweekday[0]

                while a < len(loopdataweekday):

                    dataset111 = loopdataweekday[a]

                    #print(len(dataset111))

                    #print(dataset111[0])
                    #print(dataset444[0])

                    if np.all(dataset111 == dataset444):
                        print(np.all(dataset111 == dataset444))
                        dataset555 = dataset444

                    else:

                        dataset555 = np.concatenate([dataset555, dataset111])
                        dataset444 = np.concatenate([dataset444, dataset111])

                        #print(len(dataset444))
                        #print(len(dataset555))


                    a+=1


                #print(dataset444)
                #print(loopdataweekend[0])


    ################weekend data
                a = 0

                if len(loopdataweekend) == 0:
                    print('')
                    dataset4444 = []
                else:

                    dataset4444 = loopdataweekend[0]

                while a < len(loopdataweekend):

                    dataset1111 = loopdataweekend[a]

                    #print(len(dataset1111))

                    #print(dataset1111[0])
                    #print(dataset4444[0])

                    if np.all(dataset1111 == dataset4444):
                        #print(np.all(dataset1111 == dataset4444))
                        dataset5555 = dataset4444

                    else:

                        dataset5555 = np.concatenate([dataset5555, dataset1111])
                        dataset4444 = np.concatenate([dataset4444, dataset1111])

                        #print(len(dataset4444))
                        #print(len(dataset5555))


                    a+=1


                #print(dataset4444)
                #print(len(looptimeaxisweekday))
                #print(looptimeaxisweekday[3])


    ##########weekday timeaxis
                a = 0

                if len(looptimeaxisweekday) == 0:
                    print('')
                    timeaxis444 = []
                else:

                    timeaxis444 = looptimeaxisweekday[0]

                while a < len(looptimeaxisweekday):

                    timeaxis111 = looptimeaxisweekday[a]

                    #print(len(timeaxis111))

                    #print(timeaxis111[0])
                    #print(timeaxis444[0])
                    #print(a)

                    if timeaxis111[0] == timeaxis444[0]:
                        timeaxis555 = timeaxis444

                    else:

                        timeaxis555 = timeaxis555 + timeaxis111
                        timeaxis444 = timeaxis444 + timeaxis111
                        

                        #print(len(timeaxis444))
                        #print(len(timeaxis555))


                    a+=1


                #print(timeaxis444)
                #print(looptimeaxisweekend[0][0])


    ################weekend timeaxis
                a = 0

                if len(looptimeaxisweekend) == 0:
                    print('')
                    timeaxis4444 = []
                else:

                    timeaxis4444 = looptimeaxisweekend[0]

                while a < len(looptimeaxisweekend):

                    timeaxis1111 = looptimeaxisweekend[a]

                    #print(len(timeaxis1111))

                    #print(timeaxis1111[0])
                    #print(timeaxis4444[0])

                    if timeaxis1111[0] == timeaxis4444[0]:
                        timeaxis5555 = timeaxis4444

                    else:

                        #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                        timeaxis5555 = timeaxis5555 + timeaxis1111
                        timeaxis4444 = timeaxis4444 + timeaxis1111

                        #print(len(timeaxis4444))
                        #print(len(timeaxis5555))


                    a+=1


                #print(timeaxis4444)

                print(len(timeaxis444))
                print(len(dataset444))

                print(len(timeaxis4444))
                print(len(dataset4444))



                x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                x10fweekday['data'] = dataset444

                labelsweekday = x10fweekday['timestamp']

                valuesweekday = x10fweekday['data']

                valuesweekday = np.array(valuesweekday)

                #print(labelsweekday)
                #print(valuesweekday)



                

                x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                x10fweekend['data'] = dataset4444

                labelsweekend = x10fweekend['timestamp']

                valuesweekend = x10fweekend['data']

                valuesweekend = np.array(valuesweekend)

                #print(labelsweekend)
                #print(valuesweekend)

                weekendlabeldateday = []
                weekdaylabeldateday = []



                if len(labelsweekday) == 0:
                    print('')

                else:
                    

                    a = 0
                    
                    X22 = 0
                    X33 = []
                    X777 = []
                    X778 = []
                    X779 = []
                    X77 = []


                    while a < len(labelsweekday):
                        X22 = labelsweekday[a]
                        X22 = X22.replace('[', '')
                        X22 = X22.replace(']', '')
                        X22 = X22.replace("'", "")
                        X22 = X22.replace(":", " ")
                        X22 = X22.replace("-", " ")
                        X22 = X22.replace("/", " ")
                        X22=X22.split()
                        X225 = X22[-3:-1]

                        X771 = X22[0]
                        X772 = X22[1]
                        X773 = X22[2]
                        
                        X777.append(X771)
                        X778.append(X772)
                        X779.append(X773)
                        
                        X33.append(X225)

                        weekdayyear = int(X22[0])
                        weekdaymonth = int(X22[1])
                        weekdayday = int(X22[2])

                        weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                        weekdaylabeldateday.append(weekdaylabeldate.weekday())
                        
                        a+=1

                    X44 = np.array(X33)



                if len(valuesweekend) == 0:
                    print('')

                else:



                    a = 0
                    
                    XX22 = 0
                    XX33 = []
                    XX777 = []
                    XX778 = []
                    XX779 = []
                    XX77 = []


                    while a < len(labelsweekend):
                        XX22 = labelsweekend[a]
                        XX22 = XX22.replace('[', '')
                        XX22 = XX22.replace(']', '')
                        XX22 = XX22.replace("'", "")
                        XX22 = XX22.replace(":", " ")
                        XX22 = XX22.replace("-", " ")
                        XX22 = XX22.replace("/", " ")
                        XX22=XX22.split()
                        XX225 = XX22[-3:-1]

                        XX771 = XX22[0]
                        XX772 = XX22[1]
                        XX773 = XX22[2]
                        
                        XX777.append(XX771)
                        XX778.append(XX772)
                        XX779.append(XX773)
                        
                        XX33.append(XX225)

                        weekendyear = int(XX22[0])
                        weekendmonth = int(XX22[1])
                        weekendday = int(XX22[2])

                        weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                        weekendlabeldateday.append(weekendlabeldate.weekday())

                        
                        a+=1

                    XX44 = np.array(XX33)


                #print(X44)
                #print(XX44)


                print(len(weekdaylabeldateday))
                print(weekdaylabeldateday)

                print(len(valuesweekday))
                print(valuesweekday)


                a = 12

                weekdayvaluesavg = []
                weekdaylabelsavg = []
                weekdaypredavg = []

                while a < len(weekdaylabeldateday):
                    a1 = int(valuesweekday[a])
                    a2 = int(valuesweekday[a-1])
                    a3 = int(valuesweekday[a-2])
                    a4 = int(valuesweekday[a-3])
                    a5 = int(valuesweekday[a-4])
                    a6 = int(valuesweekday[a-5])
                    a7 = int(valuesweekday[a-6])
                    a8 = int(valuesweekday[a-7])
                    a9 = int(valuesweekday[a-8])
                    a10 = int(valuesweekday[a-9])
                    a11 = int(valuesweekday[a-10])
                    a12 = int(valuesweekday[a-11])
                    a13 = int(valuesweekday[a-12])

                    #print(a4)

                    

                    aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13)/13

                    #print(aavg)

                    if weekdaylabeldateday[a] == 5:

                        weekdayvaluesavg.append(aavg)

                        weekdaylabelsavg.append(labelsweekday[a])

                        weekdaypredavg.append(X33[a])

                        a = a + 13

                    else:

                        weekdayvaluesavg.append(aavg)

                        weekdaylabelsavg.append(labelsweekday[a])

                        weekdaypredavg.append(X33[a])

                        a +=1



                print(len(weekdaylabeldateday))
                print(len(weekdayvaluesavg))
                print(len(weekdaylabelsavg))



                print(len(weekendlabeldateday))
                print(weekendlabeldateday)

                print(len(valuesweekend))
                print(valuesweekend)

                    

                a = 12

                weekendvaluesavg = []
                weekendlabelsavg = []
                weekendpredavg = []

                while a < len(weekendlabeldateday):
                    a1 = int(valuesweekend[a])
                    a2 = int(valuesweekend[a-1])
                    a3 = int(valuesweekend[a-2])
                    a4 = int(valuesweekend[a-3])
                    a5 = int(valuesweekend[a-4])
                    a6 = int(valuesweekend[a-5])
                    a7 = int(valuesweekend[a-6])
                    a8 = int(valuesweekend[a-7])
                    a9 = int(valuesweekend[a-8])
                    a10 = int(valuesweekend[a-9])
                    a11 = int(valuesweekend[a-10])
                    a12 = int(valuesweekend[a-11])
                    a13 = int(valuesweekend[a-12])

                    #print(a4)

                    

                    aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13)/13

                    #print(aavg)

                    if weekendlabeldateday[a] == 0:

                        weekendvaluesavg.append(aavg)

                        weekendlabelsavg.append(labelsweekend[a])

                        weekendpredavg.append(XX33[a])

                        a = a + 13

                    else:

                        weekendvaluesavg.append(aavg)

                        weekendlabelsavg.append(labelsweekend[a])

                        weekendpredavg.append(XX33[a])

                        a +=1



                weekdaypredavg = np.array(weekdaypredavg)
                weekendpredavg = np.array(weekendpredavg)

                print(len(weekendlabeldateday))
                print(len(weekendvaluesavg))
                print(len(weekendlabelsavg))

                print(weekendlabeldateday)
                print(weekendvaluesavg)
                print(weekendlabelsavg)


                #print(X44)
                #print(XX44)

                print(len(weekdaypredavg))
                print(len(weekendpredavg))
                ###################################################################






                regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                if len(valuesweekday) == 0:
                    print('')
                    predvaluweekday = []
                elif len(labels5) == 0:
                    print('')
                    predvaluweekday = []

                else:

                    regr.fit(X44, valuesweekday)
                    #regr.fit(weekdaypredavg, weekdayvaluesavg)
                    predictedweekday = regr.predict(X7)


                    print(predictedweekday)

                    #print(mean_squared_error(values5, predictedweekday))
                    #print(r2_score(values5, predictedweekday))
                   
                    i = len(predictedweekday)
                    k = 0
                    predvaluweekday = []
                    while k < i:
                        predvalweekday = predictedweekday[k]
                        predvaluweekday.append(predvalweekday)
                        k += 1
                    print(predvaluweekday)

                    print(len(predvaluweekday))




                regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                if len(valuesweekend) == 0:
                    print('')
                    predvaluweekend = []
                elif len(labels5) == 0:
                    print('')
                    predvaluweekend = []

                else:

                    regrf.fit(XX44, valuesweekend)
                    #regrf.fit(weekendpredavg, weekendvaluesavg)
                    predictedweekend = regrf.predict(X7)


                    print(predictedweekend)

                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))
                   
                    i = len(predictedweekend)
                    k = 0
                    predvaluweekend = []
                    while k < i:
                        predvalweekend = predictedweekend[k]
                        predvaluweekend.append(predvalweekend)
                        k += 1
                    print(predvaluweekend)

                    print(len(predvaluweekend))
                    
                


                

                
                
                

                ####################################



                conn.close()


                a = 0

                titlefixtemp = ''

                while a < len(Syntitlefix):
                    titlefix = str(Syntitlefix[a]).split('|')
                    titlefixcheck = titlefix[0]

                    if titlefixcheck == meter_id:
                        titlefixtemp = titlefix[1]

                        a = len(Syntitlefix) + 1
                    else:
                        a+=1

                print('titlefixtemp')
                print(titlefixtemp)

                if titlefixtemp == '':
                    titless2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems.replace('`', '')
                else:
                    titless2 = str(titlefixtemp) + ' ' + parameterems.replace('`', '')

                labels = x['timestamp']

                values = x['data']


                
                i = len(values)
                k = 0
                valu = []
                while k < i:
                    val = values[k]
                    valu.append(int(val))
                    k += 1
                #print(valu)

                z = len(labels)
                y = 0
                labe = []
                while y < z:
                    lab = labels[y]
                    labe.append(lab)
                    y += 1
                #print(labe)

                a = 0
                X2 = 0
           

                X227 = []
                X228 = []
                X229 = []
                X22 = []
                X2727 = []

                while a < len(labels):
                    X2 = str(labels[a])
                    X2 = X2.replace('[', '')
                    X2 = X2.replace(']', '')
                    X2 = X2.replace("'", "")
                    X2 = X2.replace(":", " ")
                    X2 = X2.replace("-", " ")
                    X2 = X2.replace("/", " ")
                    X2=X2.split()
                    X25 = X2[-3:-1]

                    X221 = X2[0]
                    X222 = X2[1]
                    X223 = X2[2]
                    
                    X227.append(X221)
                    X228.append(X222)
                    X229.append(X223)
                    a+=1


                #print(X227[0])
                #print(X228[0])
                #print(X229[0])



                a = 0

                while a < len(X227):
                    

                    X2227 = int(X227[a])
                    X2228 = int(X228[a])
                    X2229 = int(X229[a])
                    
                    X22222 = datetime.date(X2227, X2228, X2229)

                    X22222 = X22222.weekday()

                    X2727.append(X22222)

                    a+=1
                    
                #print(X77)
                #print(X2727)

                legend = titless2
                ylabel = parameterems.replace('`', '')

                value_max = x['data'].max() + 1
                value_min = x['data'].min()
                if value_min == 0:
                    value_min = value_min
                else:
                    value_min = value_min - 1
                line_labels=labe
                line_values= valu

                #print(residualstartdate)
                #print(residualenddate)

                


                #residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                a=0

                weekendvalu = []
                weekdayvalu = []

                while a < len(valu):
                    if X2727[a] == 5:
                        weekendvalu.append(valu[a])

                    elif X2727[a] == 6:
                        weekendvalu.append(valu[a])

                    else:
                        weekdayvalu.append(valu[a])
                    a+=1
                    

                weekdaystddev = np.std(weekdayvalu)
                weekendstddev = np.std(weekendvalu)

                print(weekdayvalu)
                print(weekendvalu)
                print(weekdaystddev)
                print(weekendstddev)
                


                if len(valuesweekday) == 0:
                    print('hi')


                    avgg = np.mean(valu)
                    medavgg = np.median(valu)
                    stddev = np.std(valu)
                    #print(avgg)
                    #print(medavgg)
                    #print(stddev)

                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                    z = avgg + (3*stddev)
                    zz = avgg - (3*stddev)

                    while v < len(valu):
                        if valu[v] > z:
                            #print('bigger')
                            outliers.append(valu[v])
                            if v == 0:
                                print('')
                            else:
                                outliers[v-1] = valu[v-1]
                            
                        
                            valus.append('f')

                        elif valu[v] < zz:
                            #print('smaller')
                            outliers.append(valu[v])
                            if v == 0:
                                print('')
                            else:
                                outliers[v-1] = valu[v-1]
                            
                        
                            valus.append('f')

                        else:
                            #print('is not')
                            outliers.append('f')
                            valus.append(valu[v])
                            
                            if v == 0:
                                print('')
                            else:
                                valus[v-1] = valu[v-1]

                                
                            
                        v += 1

                elif len(predvaluweekend) == 0:

                    stddev = np.std(valu)
                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                        
                    while v < len(valu):
                        if valu[v] > (predvaluweekday[v] + weekdaystddev):
                            #print('bigger')
                            #print((predvalweekdayu[v] + stddev))
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                            #print('smaller')
                            #print((predvalweekdayu[v] - stddev))
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        else:
                            #print('is not')
                            outliers.append('f')
                            valus.append(valu[v])
                        v +=1

                else:
                    
                    
                        
                    stddev = np.std(valu)
                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                        

                    while v < len(valu):
                        if X2727[v] == 6:

                            if valu[v] > (predvaluweekend[v] + weekendstddev):
                                #print('bigger weekend')
                                #print((predvaluweekend[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                #print('smaller weekend')
                                #print((predvaluweekend[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not weekend')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                
                            v += 1

                        elif X2727[v] == 5:

                            if valu[v] > (predvaluweekend[v] + weekendstddev):
                                #print('bigger weekend')
                                #print((predvaluweekend[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                #print('smaller weekend')
                                #print((predvaluweekend[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not weekend')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                
                            v += 1


                        else:
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                    
                                
                            v += 1




                    
                #print(outliers)
                #print(valus)
                #print(valu)

                #print(len(outliers))
                #print(len(valus))
                #print(len(valu))

                #print(z)
                #print(zz)
                    
                #print(valus)
                #line_values=valus
                #print(line_values)
                #line_outliers = outliers

                if len(valuesweekday) == 0:
                    line_values=valus
                    line_outliers = outliers
                elif len(labels5) == 0:
                    line_values=valus
                    line_outliers = outliers
                
        
                else:
                    line_values=valu
                    line_outliers = predvaluweekday

                line_values=valu
                line_outliers = outliers
                #print(valus)
                #print(predvalu)
                #print(mean_squared_error(values5, predicted))
                #print(r2_score(values5, predicted))

                #print(stddev)

                


                


                


                dfnewest1 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                newest1values1 = dfnewest1.iloc[:,2].values
                newest1timestamp = dfnewest1.iloc[:,1].values
                newest1title = dfnewest1.columns[2]
                #print(newest1values1)
                #print(newest1timestamp)
                #print(newest1title)

                dfnewest2 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                newest2values1 = dfnewest2.iloc[:,2].values
                newest2timestamp = dfnewest2.iloc[:,1].values
                newest2title = dfnewest2.columns[2]
                #print(newest2values1)
                #print(newest2timestamp)
                #print(newest2title)


                dfnewest3 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                newest3values1 = dfnewest3.iloc[:,2].values
                newest3timestamp = dfnewest3.iloc[:,1].values
                newest3title = dfnewest3.columns[2]
                #print(newest3values1)
                #print(newest3timestamp)
                #print(newest3title)

            

                dfnewest33pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                dfnewest33predvalues1 = dfnewest33pred.iloc[:,2].values

                newest33it = len(dfnewest33predvalues1)
                newest33kt = 0
                newest33predvalu = []
                while newest33kt < newest33it:
                    newest33predval = dfnewest33predvalues1[newest33kt]
                    newest33predvalu.append(newest33predval)
                    newest33kt += 1


                dfnewest22pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfnewest22predvalues1 = dfnewest22pred.iloc[:,2].values

                newest22it = len(dfnewest22predvalues1)
                newest22kt = 0
                newest22predvalu = []
                while newest22kt < newest22it:
                    newest22predval = dfnewest22predvalues1[newest22kt]
                    newest22predvalu.append(newest22predval)
                    newest22kt += 1


                dfnewest11pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                dfnewest11predvalues1 = dfnewest11pred.iloc[:,2].values

                newest11it = len(dfnewest11predvalues1)
                newest11kt = 0
                newest11predvalu = []
                while newest11kt < newest11it:
                    newest11predval = dfnewest11predvalues1[newest11kt]
                    newest11predvalu.append(newest11predval)
                    newest11kt += 1


                test1 = newest11predvalu
                test2 = newest22predvalu
                test3 = newest33predvalu

                newest33axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                newest33value_max = newest33axisdf.iloc[0,2]
                newest33value_min = newest33axisdf.iloc[0,1]

                #print(test1[0])
                #print(test1[0])
                #print(test1[0])
                #print(test2[0])
                #print(test2[0])
                #print(test2[0])
                #print(test3[0])
                #print(test3[0])
                #print(test3[0])

                print(oldoldlabe)
                print(newest11predvalu)

                residualsklearndfoutliers4 = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                residualsklearndfoutliers5 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest22predvalu})

                if newest3title == newest2title:
                    residualsklearndfoutliers6 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest22predvalu})
                else:
                    residualsklearndfoutliers6 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest33predvalu})

       

                newest1it = len(newest1values1)
                newest1kt = 0
                newest1valu2 = []
                while newest1kt < newest1it:
                    newest1val2 = newest1values1[newest1kt]
                    newest1valu2.append(newest1val2)
                    newest1kt += 1
                #print(newest1valu2)

                newest1valu = newest1valu2

                newest2it = len(newest2values1)
                newest2kt = 0
                newest2valu2 = []
                while newest2kt < newest2it:
                    newest2val2 = newest2values1[newest2kt]
                    newest2valu2.append(newest2val2)
                    newest2kt += 1
                #print(newest2valu2)

                newest2valu = newest2valu2
                
                newest3it = len(newest3values1)
                newest3kt = 0
                newest3valu2 = []
                while newest3kt < newest3it:
                    newest3val2 = newest3values1[newest3kt]
                    newest3valu2.append(newest3val2)
                    newest3kt += 1
                #print(newest3valu2)

                newest3valu = newest3valu2

                print(newest1title)
                print(newest2title)
                print(newest3title)

                newest3ylabel = newest3title.split()
                print(newest3title)

                newest3ylabel = newest3ylabel[-1]
                print(newest3title[-1])
                


                oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                oldoldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                oldmeter_id = oldmeter_id.iloc[0,1]
                oldoldmeter_id = oldoldmeter_id.iloc[0,1]
                oldoldoldmeter_id = oldoldoldmeter_id.iloc[0,1]

                print(meter_id)
                print(oldmeter_id)
                print(oldoldmeter_id)
                print(oldoldoldmeter_id)

                residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                residualaxismeterid2 = pd.DataFrame({'meter_id':[oldmeter_id]})
                residualaxismeterid3 = pd.DataFrame({'meter_id':[oldoldmeter_id]})
                residualaxismeterid4 = pd.DataFrame({'meter_id':[oldoldoldmeter_id]})
                
                residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")




                

                residualsklearndfvalues = pd.DataFrame({'timestamp':labe, titless2:valu})
                residualsklearndfoutliers = pd.DataFrame({'timestamp':labe, titless2:outliers})
                
                

                residualdf = pd.DataFrame({'timestamp':labe, titless2:valu})


                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
                residualaxisvaluesdf3 = pd.DataFrame({'min':[oldvalue_min2], 'max':[oldvalue_max2]}) #oldold            


                residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                if len(valuesweekday) == 0:
                    print('')
                elif len(valuesweekend) == 0:
                    print('')
                else:

                    print(mean_squared_error(values5, predictedweekday))
                    print(r2_score(values5, predictedweekday))
                    print(mean_squared_error(values5, predictedweekend))
                    print(r2_score(values5, predictedweekend))

                
                print(valu)
                
                print(outliers)

                print(meter_id)

                residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                if valu == []:
                    print('0 data')
                    oldoldvalus = oldvalu2
                    oldvalus = oldvalu

                    residualsklearndfvalues = pd.DataFrame({'time':oldoldlabe, oldtitle:oldvalu})
                    residualsklearndfvalues2 = pd.DataFrame({'time':oldoldlabe, oldtitle2:oldvalu2})
                    residualsklearndfvalues3 = pd.DataFrame({'time':oldoldlabe, newest3title:newest3valu2})

                    residualdf = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldvalu})
                    residualdf2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldvalu2}) #old
                    residualdf3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest3valu2}) #oldold


                    
                    residualsklearndfoutliers = pd.DataFrame({'time':oldoldlabe, oldtitle:oldoutliers})
                    residualsklearndfoutliers2 = pd.DataFrame({'time':oldoldlabe, oldtitle2:oldoldoutliers})
                    residualsklearndfoutliers3 = pd.DataFrame({'time':oldoldlabe, newest3title:newest33predvalu})
                    
                else:


                    residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                    print(residualsklearndfvalues[titless2])

                    residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]

                    residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                    print(residualsklearndfvalues)

                    testarr = np.array(residualsklearndfvalues[titless2])

                    z = len(testarr)
                    y = 0
                    valtest = []
                    while y < z:
                        val = testarr[y]
                        if np.isnan(val) == True:
                            valtest.append('f')
                        else:
                            
                            valtest.append(int(val))
                        y += 1
                    testarrvalus = valtest

                    print(testarrvalus)
                    print(len(testarrvalus))

                    testarrlabe = residualsklearndfvalues.reset_index()
                    testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                    z = len(testarrlabe)
                    y = 0
                    labetest = []
                    while y < z:
                        lab = testarrlabe[y]
                        labetest.append(lab)
                        y += 1
                    testarrlabe = labetest
                    print(testarrlabe)
                    print(len(testarrlabe))
                    print(len(line_values))

                    line_values = testarrvalus
                    line_labels = testarrlabe



                    residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')
                    residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]
                    
                    residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                    testarroutliers = np.array(residualsklearndfoutliers[titless2])

                    print(testarroutliers)

                    z = len(testarroutliers)
                    y = 0
                    outtest = []
                    while y < z:
                        out = testarroutliers[y]
                        print(out)
                        if out == 'f':
                            outtest.append('f')
                        elif np.isnan(out) == True:
                            outtest.append('f')
                        else:
                            
                            outtest.append(int(out))
                        y += 1
                    testarroutliers = outtest

                    print(testarroutliers)
                    print(len(testarroutliers))

                    line_outliers = testarroutliers
                    outliers = testarroutliers

                    oldstarttemp1 = datetime.datetime.strptime(str(oldoldlabe[0]), '%Y-%m-%d %H:%M:%S')
                    newstarttemp1 = datetime.datetime.strptime(str(line_labels[0]), '%Y-%m-%d %H:%M:%S')

                    line_labelstemp2 = []

                    if (oldstarttemp1 - newstarttemp1) < datetime.timedelta(seconds=-59):
                        line_labelstemp2.append(oldstarttemp1)


                            
                    elif (oldstarttemp1 - newstarttemp1) > datetime.timedelta(seconds=59):
                        line_labelstemp2.append(newstarttemp1)
                    else:
                        line_labelstemp2.append(newstarttemp1)



                    oldendtemp1 = datetime.datetime.strptime(str(oldoldlabe[-1]), '%Y-%m-%d %H:%M:%S')
                    newendtemp1 = datetime.datetime.strptime(str(line_labels[-1]), '%Y-%m-%d %H:%M:%S')

                    if (oldendtemp1 - newendtemp1) < datetime.timedelta(seconds=-59):
                        print('1')
                        print(oldendtemp1)
                        print(newendtemp1)
                        line_labelstemp2.append(newendtemp1)

                            
                    elif (oldendtemp1 - newendtemp1) > datetime.timedelta(seconds=59):
                        print('2')
                        print(oldendtemp1)
                        print(newendtemp1)
                        line_labelstemp2.append(oldendtemp1)

                    else:
                        line_labelstemp2.append(newendtemp1)



                    test = pd.DataFrame({'time':line_labelstemp2})

                    test = test.set_index('time')
                    test.index = test.index.map(lambda x: x.replace(second=0))

                    test = test[~test.index.duplicated()]
                    
                    test = test.resample('T').asfreq()

                    test2 = test.index.floor('S')

                    a = 0
                    b=0
                    c=0

                    print(len(test2))
                    print(len(line_labels))
                    print(len(oldoldlabe))

                    print(test2[0])
                    print(line_labels[0])
                    print(oldoldlabe[0])

                    print(str(oldoldlabe[0]) == str(test2[0]))

                    line_valuestemp = []
                    oldvalustemp= []
                    oldoldvalustemp= []
                    line_labelstemp= []
                    outlierstemp= []
                    oldoutlierstemp= []
                    oldoldoutlierstemp= []
                    oldoldlabetemp = []

                    oldvalus = oldvalu
                    oldoldvalus = oldvalu2

                    while a < len(test2):

                        if b == len(line_labels):
                            line_valuestemp.append('f')
                            line_labelstemp.append(test2[a])
                            outlierstemp.append('f')

                        else:
                            
                            if test2[a] == line_labels[b]:
                                line_valuestemp.append(line_values[b])
                                line_labelstemp.append(line_labels[b])
                                outlierstemp.append(outliers[b])

                                b+=1
                                

                            else:
                                line_valuestemp.append('f')
                                line_labelstemp.append(test2[a])
                                outlierstemp.append('f')

                        if c == len(oldoldlabe):
                            oldvalustemp.append('f')
                            oldoldvalustemp.append('f')
                            oldoutlierstemp.append('f')
                            oldoldoutlierstemp.append('f')
                            oldoldlabetemp.append(test2[a])
                        else:
                            
                            if str(test2[a]) == str(oldoldlabe[c]):
                                oldvalustemp.append(oldvalus[c])
                                oldoldvalustemp.append(oldoldvalus[c])
                                oldoutlierstemp.append(oldoutliers[c])
                                oldoldoutlierstemp.append(oldoldoutliers[c])
                                oldoldlabetemp.append(oldoldlabe[c])

                                c+=1

                            else:
                                oldvalustemp.append('f')
                                oldoldvalustemp.append('f')
                                oldoutlierstemp.append('f')
                                oldoldoutlierstemp.append('f')
                                oldoldlabetemp.append(test2[a])


                        a+=1

                    line_values = line_valuestemp
                    oldvalu = oldvalustemp
                    oldvalu2 = oldoldvalustemp
                    line_labels = line_labelstemp
                    outliers = outlierstemp
                    oldoutliers = oldoutlierstemp
                    oldoldoutliers = oldoldoutlierstemp
                    oldoldlabe = oldoldlabetemp
                    line_outliers = outliers

                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, titless2:line_values})
                    residualsklearndfvalues2 = pd.DataFrame({'time':line_labels, oldtitle:oldvalu})
                    residualsklearndfvalues3 = pd.DataFrame({'time':line_labels, oldtitle2:oldvalu2})

                    residualdf = pd.DataFrame({'timestamp':line_labels, titless2:line_values})
                    residualdf2 = pd.DataFrame({'timestamp':line_labels, oldtitle:oldvalu}) #old
                    residualdf3 = pd.DataFrame({'timestamp':line_labels, oldtitle2:oldvalu2}) #oldold


                    
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, titless2:line_outliers})
                    residualsklearndfoutliers2 = pd.DataFrame({'time':line_labels, oldtitle:oldoutliers})
                    residualsklearndfoutliers3 = pd.DataFrame({'time':line_labels, oldtitle2:oldoldoutliers})
                    
                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")


                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    residualsklearndfvalues2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    residualsklearndfvalues3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    residualsklearndfvalues2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualsklearndfvalues3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes3.csv")

                
                        


  
                if valu == []:
                    if oldvalu==oldvalu2:
                        titless2 = 'Error No Data Available for Meter ID: ' + str(titlefixtemp)
                        print(titless2)

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")

                        
                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                                
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")

                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                        


                        
                        return render_template('view 19.html', oldlabels = oldoldlabe, outlier=oldoldoutliers, title=titless2,min=oldvalue_min2, max=oldvalue_max2, labels=oldoldlabe, values=oldoldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle2, ylabel=oldylabel)


                    elif newest2title == newest3title:
                        titless2 = 'Error No Data Available for Meter ID: ' + str(titlefixtemp)
                        print('10')


                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})

                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")



                        return render_template('view 19 2 lines.html',oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=oldoldlabe, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2, xmin=xmin, xmax=xmax)

                    else:
                        print('11')
                        titless2 = 'Error No Data Available for Meter ID: ' + str(titlefixtemp)


                        

                        residualaxisvaluesdf = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #newest
                        residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min2], 'max':[oldvalue_max2]}) #old
                        residualaxisvaluesdf3 = pd.DataFrame({'min':[newest33value_min], 'max':[newest33value_max]}) #oldold

                        residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})

                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest1valu})
                        residualdf2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest2valu})
                        residualdf3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest3valu})

                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")


                        return render_template('view 19 3 lines.html', oldoldoutlier=newest33predvalu, oldoutlier=newest22predvalu, outlier=newest11predvalu, oldvalues=newest2valu, oldtitle=newest2title, oldmin=oldvalue_min2, oldmax=oldvalue_max2, oldoldvalues=newest3valu, oldoldtitle=newest3title, oldoldmin=newest33value_min, oldoldmax=newest33value_max, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=oldoldlabe, values=newest1valu, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=oldylabel, oldylabel=oldylabel2, oldoldylabel=newest3ylabel)

                else:
                    
                    if oldvalu==oldvalu2:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
     
                            return render_template('view 19.html', outlier=oldoldoutliers, title=titless2,min=oldvalue_min2, max=oldvalue_max2, labels=oldoldlabe, values=oldoldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle2, ylabel=oldylabel)


                        else:
                            print('hello')
                            print(oldoldlabe[-1])
                            print(line_labels[-1])
                            
                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoutliers, outlier=line_outliers, oldvalues=oldvalu2, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)

                    elif newest1title == newest2title:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('1.1?')
                            print(newest1title)
                            print(newest2title)
                            print(newest3title)




                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2)


                        elif titless2 == oldtitle:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('2.1?')


                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)
                        else:
                            print('1???????')
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel2, oldoldylabel=oldylabel)


                    elif newest1title == newest3title:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('1.2')

                            print(oldoldlabe)

                            print(oldoldoutliers)
                            print(oldoutliers)
                            print(oldoldvalus)
                            print(oldvalus)
                            print(line_labels)




                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2)


                        elif titless2 == oldtitle:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('2.2')


                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)
                        else:
                            print('2???????')
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=oldoldlabe, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel2, oldoldylabel=oldylabel)


                    elif newest2title == newest3title:
                        if titless2 == oldtitle2:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('1.3')

                            print(oldoldlabe)

                            print(oldoldoutliers)
                            print(oldoutliers)
                            print(oldoldvalus)
                            print(oldvalus)
                            print(line_labels)




                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, start=residualstartdate, end=residualenddate, legend=oldtitle, ylabel=oldylabel, oldylabel=oldylabel2)


                        elif titless2 == oldtitle:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            print('2.3')


                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            #residualsklearndfoutliers = pd.DataFrame({'timestamp':labe, titless2:outliers})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle:oldpredvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, oldtitle2:oldpred2valu})
                                
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels = oldoldlabe, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min2, oldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel)
                        else:
                            print('3???????')
                            
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=line_outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, oldoldvalues=oldoldvalus, oldoldtitle=oldtitle2, oldoldmin=oldvalue_min2, oldoldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel, oldoldylabel=oldylabel2)


                

                    else:

                        if titless2 == newest2title:
                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)
                            
                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1values1):


                                if newest1values1[v] == 'f':
                                    x = newest1values1[v]
                                else:
                                    x = int(newest1values1[v])

                                if newest11predvalu[v] == 'f':
                                    y = newest11predvalu[v]
                                else:
                                    y = int(newest11predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            if newest1value_min2 == 0:
                                newest1value_min2 = newest1value_min2
                            else:
                                newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            #print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            #print(newest1labe)





                            #print(newest1valus)
                            #print(newest1outliers)

                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            newest2value_max2 = 1
                            newest2value_min2 = 0


                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2values1):


                                if newest2values1[v] == 'f':
                                    x = newest2values1[v]
                                else:
                                    x = int(newest2values1[v])

                                if newest22predvalu[v] == 'f':
                                    y = newest22predvalu[v]
                                else:
                                    y = int(newest22predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            if newest2value_min2 == 0:
                                newest2value_min2 = newest2value_min2
                            else:
                                newest2value_min2 = newest2value_min2 - 1

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            #print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            #print(newest2labe)

                            


                            #print(newest2valus)
                            #print(newest2outliers)


                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3values1):


                                if newest3values1[v] == 'f':
                                    x = newest3values1[v]
                                else:
                                    x = int(newest3values1[v])

                                if newest33predvalu[v] == 'f':
                                    y = newest33predvalu[v]
                                else:
                                    y = int(newest33predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            if newest3value_min2 == 0:
                                newest3value_min2 = newest3value_min2
                            else:
                                newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            #print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            #print(newest3labe)


                            
                            print('18')

                            dfnewest33predvalues1 = dfnewest33pred.iloc[:,2].values

                            it = len(dfnewest33predvalues1)
                            kt = 0
                            newest33predvalu = []
                            while kt < it:
                                newest33predval = dfnewest33predvalues1[kt]
                                newest33predvalu.append(newest33predval)
                                kt += 1
                            #print(newest33predvalu[0])

                            dfnewest33predvalues1 = dfnewest33pred.iloc[:,2].values

                            it = len(dfnewest22predvalues1)
                            kt = 0
                            newest22predvalu = []
                            while kt < it:
                                newest22predval = dfnewest22predvalues1[kt]
                                newest22predvalu.append(newest22predval)
                                kt += 1
                            #print(newest22predvalu[0])

                            dfnewest11predvalues1 = dfnewest11pred.iloc[:,2].values

                            it = len(dfnewest11predvalues1)
                            kt = 0
                            newest11predvalu = []
                            while kt < it:
                                newest11predval = dfnewest11predvalues1[kt]
                                newest11predvalu.append(newest11predval)
                                kt += 1
                            #print(newest11predvalu[0])



                            

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")


                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest33predvalu})
                                
                            residualsklearndfoutliers4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers5.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers6.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            


                            newest1outliers = newest11predvalu
                            newest2outliers = newest22predvalu
                            newest3outliers = newest33predvalu

                            newest1valus = newest1values1
                            newest2valus = newest2values1
                            newest3valus = newest3values1

                            print(newest1valu)
                            print(newest2valu)
                            print(newest3valu)
                            print(newest11predvalu)
                            print(newest22predvalu)
                            print(newest33predvalu)


               

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})

                        
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            

                            return render_template('view 19 3 lines.html', oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valus, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valus, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=titless2, min=newest1value_min2, max=newest1value_max2, labels=newest3labe, values=newest1valus, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)

                        elif titless2 == newest3title:

                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)

                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1values1):


                                if newest1values1[v] == 'f':
                                    x = newest1values1[v]
                                else:
                                    x = int(newest1values1[v])

                                if newest11predvalu[v] == 'f':
                                    y = newest11predvalu[v]
                                else:
                                    y = int(newest11predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            if newest1value_min2 == 0:
                                newest1value_min2 = newest1value_min2
                            else:
                                newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)


                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            newest2value_max2 = 1
                            newest2value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2values1):


                                if newest2values1[v] == 'f':
                                    x = newest2values1[v]
                                else:
                                    x = int(newest2values1[v])

                                if newest22predvalu[v] == 'f':
                                    y = newest22predvalu[v]
                                else:
                                    y = int(newest22predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            if newest2value_min2 == 0:
                                newest2value_min2 = newest2value_min2
                            else:
                                newest2value_min2 = newest2value_min2 - 1

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)




                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3values1):


                                if newest3values1[v] == 'f':
                                    x = newest3values1[v]
                                else:
                                    x = int(newest3values1[v])

                                if newest33predvalu[v] == 'f':
                                    y = newest33predvalu[v]
                                else:
                                    y = int(newest33predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            if newest3value_min2 == 0:
                                newest3value_min2 = newest3value_min2
                            else:
                                newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)



                            
                            print('6.5')

                            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                            it = len(dfoldoldpredvalues1)
                            kt = 0
                            oldoldpredvalu = []
                            while kt < it:
                                oldoldpredval = dfoldoldpredvalues1[kt]
                                oldoldpredvalu.append(oldoldpredval)
                                kt += 1
                            #print(oldoldpredvalu)

                            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                            it = len(dfoldpredvalues1)
                            kt = 0
                            oldpredvalu = []
                            while kt < it:
                                oldpredval = dfoldpredvalues1[kt]
                                oldpredvalu.append(oldpredval)
                                kt += 1
                            #print(oldpredvalu)

                            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            dfpredvalues1 = dfpred.iloc[:,2].values

                            it = len(dfpredvalues1)
                            kt = 0
                            predvalu = []
                            while kt < it:
                                predval = dfpredvalues1[kt]
                                predvalu.append(predval)
                                kt += 1
                            #print(predvalu)

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})

                            #print(residualsklearndfoutliers)
                            #print(residualsklearndfoutliers2)
                            #print(residualsklearndfoutliers3)
                                
                            #residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            #residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            #residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            #newest1outliers = newest11predvalu
                            #newest2outliers = newest22predvalu
                            #newest3outliers = newest33predvalu

                            #newest1valus = newest1valu
                            #newest2valus = newest2valu
                            #newest3valus = newest3valu

                            #print(newest1outliers[0])
                            #print(newest2outliers[0])
                            #print(newest3outliers[0])
                            #print(newest1title)
                            #print(newest2title)
                            #print(newest3title)

                            newest1outliers = newest11predvalu
                            newest2outliers = newest22predvalu
                            newest3outliers = newest33predvalu

                            newest1valus = newest1values1
                            newest2valus = newest2values1
                            newest3valus = newest3values1

                            print(newest1valu)
                            print(newest2valu)
                            print(newest3valu)
                            print(newest11predvalu)
                            print(newest22predvalu)
                            print(newest33predvalu)


               

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})

                        
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 3 lines.html', oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valus, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valus, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=titless2, min=newest1value_min2, max=newest1value_max2, labels=newest3labe, values=newest1valus, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)


                        elif titless2 == newest1title:

                            titless2 = 'Error Tried To Add Data Already being Trended'
                            print(titless2)

                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1values1):


                                if newest1values1[v] == 'f':
                                    x = newest1values1[v]
                                else:
                                    x = int(newest1values1[v])

                                if newest11predvalu[v] == 'f':
                                    y = newest11predvalu[v]
                                else:
                                    y = int(newest11predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            if newest1value_min2 == 0:
                                newest1value_min2 = newest1value_min2
                            else:
                                newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)


                       


                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            newest2value_max2 = 1
                            newest2value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2values1):


                                if newest2values1[v] == 'f':
                                    x = newest2values1[v]
                                else:
                                    x = int(newest2values1[v])

                                if newest22predvalu[v] == 'f':
                                    y = newest22predvalu[v]
                                else:
                                    y = int(newest22predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            if newest2value_min2 == 0:
                                newest2value_min2 = newest2value_min2
                            else:
                                newest2value_min2 = newest2value_min2 - 1

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)





                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3values1):


                                if newest3values1[v] == 'f':
                                    x = newest3values1[v]
                                else:
                                    x = int(newest3values1[v])

                                if newest33predvalu[v] == 'f':
                                    y = newest33predvalu[v]
                                else:
                                    y = int(newest33predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            if newest3value_min2 == 0:
                                newest3value_min2 = newest3value_min2
                            else:
                                newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)


               

                            
                            
                            print('5')

                            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                            it = len(dfoldoldpredvalues1)
                            kt = 0
                            oldoldpredvalu = []
                            while kt < it:
                                oldoldpredval = dfoldoldpredvalues1[kt]
                                oldoldpredvalu.append(oldoldpredval)
                                kt += 1
                            #print(oldoldpredvalu)

                            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                            it = len(dfoldpredvalues1)
                            kt = 0
                            oldpredvalu = []
                            while kt < it:
                                oldpredval = dfoldpredvalues1[kt]
                                oldpredvalu.append(oldpredval)
                                kt += 1
                            #print(oldpredvalu)

                            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            dfpredvalues1 = dfpred.iloc[:,2].values

                            it = len(dfpredvalues1)
                            kt = 0
                            predvalu = []
                            while kt < it:
                                predval = dfpredvalues1[kt]
                                predvalu.append(predval)
                                kt += 1
                            #print(predvalu)

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                                
                            #residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/SKLearn/Residualsklearndfoutliers.csv")
                            #residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/SKLearn/Residualsklearndfoutliers2.csv")
                            #residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/SKLearn/Residualsklearndfoutliers3.csv")

                            #newest1outliers = newest11predvalu
                            #newest2outliers = newest22predvalu
                            #newest3outliers = newest33predvalu

                            #newest1valus = newest1valu
                            #newest2valus = newest2valu
                            #newest3valus = newest3valu

                            #print(newest1outliers[0])
                            #print(newest2outliers[0])
                            #print(newest3outliers[0])
                            #print(newest1title)
                            #print(newest2title)
                            #print(newest3title)

                            newest1outliers = newest11predvalu
                            newest2outliers = newest22predvalu
                            newest3outliers = newest33predvalu

                            newest1valus = newest1valu
                            newest2valus = newest2valu
                            newest3valus = newest3valu

                            print(newest1valu)
                            print(newest2valu)
                            print(newest3valu)
                            print(newest11predvalu)
                            print(newest22predvalu)
                            print(newest33predvalu)


               

                            residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:newest11predvalu})
                            residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:newest22predvalu})
                            residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:newest33predvalu})


               


                        
                                
                            residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")


                        

                            return render_template('view 19 3 lines.html', oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valus, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valus, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=titless2, min=newest1value_min2, max=newest1value_max2, labels=newest3labe, values=newest1valus, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)


                        else:
                            print('6')
                            return render_template('view 19 3 lines.html', oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=line_outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, oldoldvalues=oldoldvalus, oldoldtitle=oldtitle2, oldoldmin=oldvalue_min2, oldoldmax=oldvalue_max2, title=titless2, min=value_min, max=value_max, labels=oldoldlabe, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldylabel2, oldoldylabel=oldylabel)

            elif datatype == 'Wifi':

                print('add')

                dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                oldvalues1 = dfold.iloc[:,2].values
                oldtimestamp = dfold.iloc[:,1].values
                oldtitle = dfold.columns[2]
                #print(oldvalues1)
                #print(oldtimestamp)
                #print(oldtitle)

                oldylabelarray = str(oldtitle).split()
                #oldylabel = oldylabelarray[-1]

                if oldylabelarray[-1] == 'Count':
                    oldylabel = oldylabelarray[-3] + ' ' + oldylabelarray[-2] + ' ' + oldylabelarray[-1]
                else:
                    oldylabel = oldylabelarray[-1]

                

                #print(oldvalue_max)
                #print(oldvalue_min)
                #print(oldylabel)
                #if oldvalue_min == 0:
                    #oldvalue_min = oldvalue_min
                #else:
                    #oldvalue_min = oldvalue_min - 1

                it = len(oldvalues1)
                kt = 0
                oldvalu = []
                while kt < it:
                    oldval = oldvalues1[kt]
                    if oldval == 'f':
                        oldvalu.append(oldval)
                    else:
                        oldvalu.append(int(oldval))
                    kt += 1
                #print(oldvalu)

                it = len(oldtimestamp)
                kt = 0
                oldlabe = []
                while kt < it:
                    oldlab = oldtimestamp[kt]
                    oldlabe.append(oldlab)
                    kt += 1
                #print(oldlabe)


                dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")

                dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                it = len(dfoldpredvalues1)
                kt = 0
                oldpredvalu = []
                while kt < it:
                    oldpredval = dfoldpredvalues1[kt]
                    if oldpredval == 'f':
                        oldpredvalu.append(oldpredval)
                    else:
                        oldpredvalu.append(int(float(oldpredval)))
                    kt += 1
                #print(oldpredvalu)
                oldvalue_min = 0
                oldvalue_max = 1

                x = 0
                y=0

                v = 0

                print(oldvalu)
                print(oldpredvalu)
                print(len(oldvalu))
                print(len(oldpredvalu))

                while v < len(oldvalu):
                    print(v)

                    if oldvalu[v] == 'f':
                        x = oldvalu[v]
                        
                    else:
                        x = oldvalu[v]
                        x = int(x)

                    if oldpredvalu[v] == 'f':
                        y = oldpredvalu[v]
                    else:
                        y = oldpredvalu[v]
                        int(float(y))

                    if x == 'f':
                        if y == 'f':
                            v=v
                        elif y > oldvalue_max:
                            oldvalue_max = y
                        elif y < oldvalue_min:
                            oldvalue_min = y
                        else:
                            v=v
                    else:
                        if y == 'f':
                            if x > oldvalue_max:
                                oldvalue_max = x
                            elif x < oldvalue_min:
                                oldvalue_min = x
                            else:
                                v=v
                        else:
                            if x > y:
                                if x > oldvalue_max:
                                    oldvalue_max = x
                                elif y < oldvalue_min:
                                    oldvalue_min = y
                                else:
                                    v=v

                            elif y > x:
                                if x < oldvalue_min:
                                    oldvalue_min = x
                                elif y > oldvalue_max:
                                    oldvalue_max = y
                                else:
                                    v=v
                            else:
                                
                                if x < oldvalue_min:
                                    oldvalue_min = x
                                elif y > oldvalue_max:
                                    oldvalue_max = y
                                else:
                                    v=v
         
                    v+=1


                
                dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                oldoldvalues = dfoldold.iloc[:,2].values
                oldoldtimestamp = dfoldold.iloc[:,1].values
                oldoldtitle = dfoldold.columns[2]
                #print(oldoldvalues)
                #print(oldoldtimestamp)
                #print(oldoldtitle)

                oldoldylabelarray = str(oldoldtitle).split()
                #oldoldylabel = oldoldylabelarray[-1]


                if oldoldylabelarray[-1] == 'Count':
                    oldoldylabel = oldoldylabelarray[-3] + ' ' + oldoldylabelarray[-2] + ' ' + oldoldylabelarray[-1]
                else:
                    oldoldylabel = oldoldylabelarray[-1]

                

                #oldoldvalue_max = oldoldvalues.max() + 1
                #oldoldvalue_min = oldoldvalues.min()

                #print(oldoldvalue_max)
                #print(oldoldvalue_min)
                #print(oldoldylabel)
                #if oldoldvalue_min == 0:
                    #oldoldvalue_min = oldoldvalue_min
                #else:
                    #oldoldvalue_min = oldoldvalue_min - 1

                oldoldit = len(oldoldvalues)
                oldoldkt = 0
                oldoldvalu = []
                while oldoldkt < oldoldit:
                    oldoldval = oldoldvalues[oldoldkt]
                    if oldoldval == 'f':
                        oldoldvalu.append(oldoldval)
                    else:
                        oldoldvalu.append(int(oldoldval))
                    oldoldkt += 1
                #print(oldoldvalu)


                dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                it = len(dfoldoldpredvalues1)
                kt = 0
                oldoldpredvalu = []
                while kt < it:
                    oldoldpredval = dfoldoldpredvalues1[kt]
                    if oldoldpredval == 'f':
                        oldoldpredvalu.append(oldoldpredval)
                    else:
                        oldoldpredvalu.append(int(oldoldpredval))
                    kt += 1
                #print(oldoldpredvalu)

                oldoldvalue_min = 0
                oldoldvalue_max = 1

                x = 0
                y=0

                v = 0

                print(oldoldvalu)
                print(oldoldpredvalu)
                print(len(oldoldvalu))
                print(len(oldoldpredvalu))

                while v < len(oldoldvalu):

                    if oldoldvalu[v] == 'f':
                        x = oldoldvalu[v]
                        
                    else:
                        x = oldoldvalu[v]
                        x = int(x)

                    if oldoldpredvalu[v] == 'f':
                        y = oldoldpredvalu[v]
                    else:
                        y = oldoldpredvalu[v]
                        int(float(y))

                    if x == 'f':
                        if y == 'f':
                            v=v
                        elif y > oldoldvalue_max:
                            oldoldvalue_max = y
                        elif y < oldoldvalue_min:
                            oldoldvalue_min = y
                        else:
                            v=v
                    else:
                        if y == 'f':
                            if x > oldoldvalue_max:
                                oldoldvalue_max = x
                            elif x < oldoldvalue_min:
                                oldoldvalue_min = x
                            else:
                                v=v
                        else:
                            if x > y:
                                if x > oldoldvalue_max:
                                    oldoldvalue_max = x
                                elif y < oldoldvalue_min:
                                    oldoldvalue_min = y
                                else:
                                    v=v

                            elif y > x:
                                if x < oldoldvalue_min:
                                    oldoldvalue_min = x
                                elif y > oldoldvalue_max:
                                    oldoldvalue_max = y
                                else:
                                    v=v
                            else:
                                
                                if x < oldoldvalue_min:
                                    oldoldvalue_min = x
                                elif y > oldoldvalue_max:
                                    oldoldvalue_max = y
                                else:
                                    v=v
                                    

                    #print(x)
                    #print(y)
                    v+=1



                try:
                    Building_name = request.form.get('buildingselection')
                    #print(Building_name)
                    Floor_name = request.form.get('meterselection')
                    #print(Floor_name)
                    #parameterwifi = request.form.get('parameters')
                    parameterwifi = request.form.get('paramselection')
                    #print(parameterwifi)
                    startdate = request.form.get('starttime')
                    enddate = request.form.get('endtime')
                    #print(startdate)
                    #print(enddate)
                except:
                    Building_name = 'Pendle'
                    Floor_name = 'C floor'
                    parameterwifi = '`Authenticated Client Count`'
                if Building_name == None:
                    Building_name = 'Pendle'
                if Floor_name == None:
                    Floor_name = 'C floor'
                if parameterwifi == None:
                    parameterwifi = '`Authenticated Client Count`'
                if startdate == None:
                    startdate = "'2018-11-08 00:00:00'"
                if enddate == None:
                    enddate = "'2018-11-08 01:00:00'"

              
                Building_name_title = Building_name
                Floor_name_title = Floor_name
                residualstartdate = startdate
                residualenddate = enddate        
                #parameterwifi = 'Associated Client Count'
                Bulding_name = str(Building_name)
                Floor_name = str(Floor_name)
                Building_name = Building_name.replace('(','\\(')
                Building_name = Building_name.replace(')','\\)')
                parameterwifi = str(parameterwifi)
                parameterwifi = parameterwifi.replace('`','')
                parameterwifititle = parameterwifi
                parameterwifi = '`' + parameterwifi + '`'
                
                startdate = str(startdate).replace('T',' ')
                #startdate = "'2018-11-08 00:00:00'"
                startdate = "'" + startdate + "'"
                enddate = str(enddate).replace('T',' ')
                #enddate = "'2018-11-09 01:00:00'"
                enddate = "'" + enddate + "'"
                #print(startdate)
                #print(enddate)
                if startdate == "''":
                    startdate = "'2018-11-08 00:00:00'"
                if enddate == "''":
                    enddate = "'2018-11-09 01:00:00'"
                startdate = startdate.replace("'", "")
                enddate = enddate.replace("'","")
                residualstartdate = startdate.replace(' ','T')
                residualenddate = enddate.replace(' ','T')
                #print(residualstartdate)
                #print(residualenddate)
                startdate = "'" + startdate + "'"
                enddate = "'" + enddate + "'" 
                #print(startdate)
                #print(enddate)

                print(parameterwifi)
                print(parameterwifititle)

                if parameterwifi == '`Total Client Count`':
                    #parameterwifi = '`Associated Client Count`'
                    parameterwifititle = 'Total Client Count'
                    print(parameterwifi)
                    print(parameterwifititle)
                else:
                    print('n')

                
                
                table = '[' + 'wifitest' + Building_name_title.upper() + Floor_name_title.upper() + ']'

                print(table)

                wifitablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Wifitables.csv")

                wifitables = wifitablesdf['tables']

                wifitables = np.array(wifitables)

                tablecheck = 'wifitest' + Building_name_title.upper() + Floor_name_title.upper()

                print(table)
                print(tablecheck)

                print(str(wifitables[0]).replace('|', ''))
                

                conn = sqlite3.connect('/Users/Luke/ENGR301/For Cloud and GitHub/test2.db')

                c = conn.cursor()

                a = 0

                while a < len(wifitables):
                    check = wifitables[a]
                    check = str(check).replace('|', '')

                    if tablecheck == check:

                

                        query = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                        query2 = "SELECT `time` FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                        c.execute(query)




                        dataset = c.fetchall()

                        dataset2 = np.array(dataset)

                        c.execute(query2)

                        timeaxis = c.fetchall()

                        a = len(wifitables) + 1

                    else:
                        dataset = []
                        dataset2 = np.array(dataset)
                        timeaxis = []


                        
                    a+=1

                x = pd.DataFrame(timeaxis, columns=['time'])
                x['data'] = dataset2

                xxx = x['time']

                x['time'] = pd.to_datetime(x['time'], format = '%Y-%m-%d %H:%M:%S')

                x2 = x.set_index('time')


                ####################################

                labels5 = xxx

                values5 = x['data']

                values5 = np.array(values5)

                x5 = pd.DataFrame(timeaxis, columns=['time'])
                x5['data'] = values5


                a = 0
                X5 = 0
                X6 = []
                XYear = []
                XMonth= []
                XDay= []
                XHour= []
                XMin= []
                Xsec= []

                while a < len(labels5):
                    X5 = str(labels5[a])
                    X5 = X5.replace('[', '')
                    X5 = X5.replace(']', '')
                    X5 = X5.replace("'", "")
                    X5 = X5.replace(":", " ")
                    X5 = X5.replace("-", " ")
                    X5 = X5.replace("/", " ")
                    X5=X5.split()
                    X55 = X5[-3:-1]
                    X6.append(X55)
                    a+=1


                X7 = np.array(X6)

                
                ############################

                #################################### Smart model datetime


                #print(startdate)
                #print(enddate)

                startdate = startdate.replace('-',' ')
                startdate = startdate.replace(':',' ')
                startdate = startdate.replace("'"," ")

                enddate = enddate.replace('-',' ')
                enddate = enddate.replace(':',' ')
                enddate = enddate.replace("'"," ")


                #print(startdate)
                #print(enddate)

                startdate = startdate.split()
                enddate = enddate.split()

                #print(startdate)
                #print(enddate)

                startyear = int(startdate[0])
                startmonth = int(startdate[1])
                startday = int(startdate[2])

                endyear = int(enddate[0])
                endmonth = int(enddate[1])
                endday = int(enddate[2])

                startdate = datetime.datetime(startyear, startmonth, startday)
                enddate = datetime.datetime(endyear, endmonth, endday)
                z = enddate-startdate

                #print(z)

                modelstart = startdate - (4*z)

                modelend = startdate

                print(modelstart)
                print(modelend)

                weekday00 = []
                weekday0 = []
                weekday1 = []
                weekday2 = []
                weekday3 = []
                weekday4 = []
                weekday5 = []
                weekday6 = []

                weekday = []
                weekend = []

                weekdaynumber = []
                weekendnumber = []

                weekdaydatetime = []
                weekenddatetime = []

                modelstart2 = modelstart
                modelstart3 = modelstart
                modelend3 = modelend
                


                while modelstart2 != modelend + datetime.timedelta(days=1):
                    AA = modelstart2

                    AAday = AA.weekday()

                    #print(AA)
                    #print(AAday)

                    if AAday < 5:
                        weekday.append(str(AA))
                        weekdaynumber.append(AAday)
                        weekdaydatetime.append(AA)
                    else:
                        weekend.append(str(AA))
                        weekendnumber.append(AAday)
                        weekenddatetime.append(AA)
                        

                    modelstart2 = modelstart2 + datetime.timedelta(days=1)



                print(weekday)

                print(weekend)

                print(weekdaynumber)

                print(weekendnumber)

                print(weekdaydatetime)

                print(weekenddatetime)

                

                modelstart = str(modelstart)
                modelstart = "'" + modelstart + "'"

                modelend = str(modelend)
                modelend = "'" + modelend + "'"

                #print(modelstart)

                #print(modelend)


                a = 0
                aa = 0

                modelweekdaystart = []
                modelweekdayend = []
                modelweekendstart = []
                modelweekendend = []

                modelweekday = []
                modelweekend = []

                modelweekday2 = []
                modelweekend2 = []

                while modelstart3 != modelend3 + datetime.timedelta(days=1):

                    

                    if len(weekday) == 0:
                        weekday = weekday
                        b = ''
                        d = -1
                        f = datetime.datetime.now()
                    else:

                        if len(weekday) > a:
                            b = weekday[a]
                            d = weekdaynumber[a]
                            f = weekdaydatetime[a]
                            
                        else:
                            b = weekday[0]
                            d = weekdaynumber[0]
                            f = datetime.datetime.now()

                    if len(weekend) == 0:
                        cc = ''
                        e = -1
                        g = datetime.datetime.now()
                        
                    else:
                        
                        if len(weekend) > aa:
                            cc = weekend[aa]
                            e = weekendnumber[aa]
                            g = weekenddatetime[aa]
                            
                        else:
                            cc = weekend[0]
                            e = weekendnumber[0]
                            g = datetime.datetime.now()
                        


                    if f > g:
                        #print(g)

                        modelweekend.append(cc)

                        if e == 6:
                            


                            #print(modelweekend)

                            g = g + datetime.timedelta(days=1)

                            modelweekend.append(str(g))

                            modelweekend2.append(modelweekend)

                            

                            modelweekend = []

                        
                            

                        
                        aa+=1


                    else:
                        #print(f)

                        modelweekday.append(b)

                        if d == 4:
                            #print(modelweekday)

                            f = f + datetime.timedelta(days=1)

                            modelweekday.append(str(f))

                            
                            

                            modelweekday2.append(modelweekday)

                            modelweekday = []

                        
                        a+=1


                    
                    modelstart3 = modelstart3 + datetime.timedelta(days=1)


                if len(modelweekday) > 0:
                    
                    f = f + datetime.timedelta(days=1)

                    modelweekday.append(str(f))

                    modelweekday2.append(modelweekday)

                if len(modelweekend) > 0:
                    
                    g = g + datetime.timedelta(days=1)

                    modelweekend.append(str(g))

                    modelweekend2.append(modelweekend)
                    

                #print(modelweekday)
                #print(modelweekend)

                print(modelweekday2)
                #print(modelweekday2)
                print(modelweekend2)
                #print(modelweekend2)



                loopdataweekday = []

                looptimeaxisweekday = []

                loopdataweekend = []

                looptimeaxisweekend = []

                


                a = 0
                b = 0

                while a < len(modelweekday2):
                    start = modelweekday2[a][0]
                    end = modelweekday2[a][-1]

                    

                    start = str(start)
                    end = str(end)

                    start = "'" + start + "'"
                    end = "'" + end + "'"


                    while b < len(wifitables):
                        check = wifitables[b]

                        check = str(check).replace('|', '')

                        if tablecheck == check:
                            query3loop = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            print(len(timeaxis3loop))

                            b = len(wifitables) + 1

                        else:
                            dataset3loop = []
                            dataset4loop = np.array(dataset3loop)
                            timeaxis3loop = []


                            
                        b+=1

       
                    if len(dataset4loop) == 0:
                        print('0')

                    else:
                        if len(timeaxis3loop) == 0:
                            print('0')

                        else:

                            loopdataweekday.append(dataset4loop)
                            looptimeaxisweekday.append(timeaxis3loop)



                    a +=1

                a = 0
                b = 0

                while a < len(modelweekend2):
                    start = modelweekend2[a][0]
                    end = modelweekend2[a][-1]

                    

                    start = str(start)
                    end = str(end)

                    start = "'" + start + "'"
                    end = "'" + end + "'"


                    while b < len(wifitables):
                        check = wifitables[b]
                        check = str(check).replace('|', '')

                        if tablecheck == check:
                            query3loop = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            print(len(timeaxis3loop))

                            b = len(wifitables) + 1

                        else:
                            dataset3loop = []
                            dataset4loop = np.array(dataset3loop)
                            timeaxis3loop = []


                            
                        b+=1

                   

                    if len(dataset4loop) == 0:
                        print('0')

                    else:
                        if len(timeaxis3loop) == 0:
                            print('0')

                        else:

                            loopdataweekend.append(dataset4loop)
                            looptimeaxisweekend.append(timeaxis3loop)



                    a +=1


                #print(loopdataweekday)
                print(len(looptimeaxisweekday))
                #print(loopdataweekend)
                #print(looptimeaxisweekend)

               # print(len(loopdataweekday))
                #print(len(looptimeaxisweekday))
               # print(len(loopdataweekend))
                #print(len(looptimeaxisweekend))


                


    ##########weekday data
                a = 0

                if len(loopdataweekday) == 0:
                    print('')
                    dataset444 = []
                else:

                    dataset444 = loopdataweekday[0]

                while a < len(loopdataweekday):

                    dataset111 = loopdataweekday[a]

                    print(len(dataset111))

                    print(dataset111[0])
                    print(dataset444[0])

                    if np.all(dataset111 == dataset444):
                        print(np.all(dataset111 == dataset444))
                        dataset555 = dataset444

                    else:

                        dataset555 = np.concatenate([dataset555, dataset111])
                        dataset444 = np.concatenate([dataset444, dataset111])

                        print(len(dataset444))
                        print(len(dataset555))


                    a+=1


                #print(dataset444)


    ################weekend data
                a = 0

                if len(loopdataweekend) == 0:
                    print('')
                    dataset4444 = []
                else:

                    dataset4444 = loopdataweekend[0]

                while a < len(loopdataweekend):

                    dataset1111 = loopdataweekend[a]

                    print(len(dataset1111))

                    print(dataset1111[0])
                    print(dataset4444[0])

                    if np.all(dataset1111 == dataset4444):
                        print(np.all(dataset1111 == dataset4444))
                        dataset5555 = dataset4444

                    else:

                        dataset5555 = np.concatenate([dataset5555, dataset1111])
                        dataset4444 = np.concatenate([dataset4444, dataset1111])

                        print(len(dataset4444))
                        print(len(dataset5555))


                    a+=1


                #print(dataset4444)


    ##########weekday timeaxis
                a = 0

                if len(looptimeaxisweekday) == 0:
                    print('')
                    timeaxis444 = []
                else:

                    timeaxis444 = looptimeaxisweekday[0]

                while a < len(looptimeaxisweekday):

                    timeaxis111 = looptimeaxisweekday[a]

                    print(len(timeaxis111))

                    print(timeaxis111[0])
                    print(timeaxis444[0])

                    if timeaxis111[0] == timeaxis444[0]:
                        timeaxis555 = timeaxis444

                    else:

                        timeaxis555 = timeaxis555 + timeaxis111
                        timeaxis444 = timeaxis444 + timeaxis111
                        

                        print(len(timeaxis444))
                        print(len(timeaxis555))


                    a+=1


                #print(timeaxis444)


    ################weekend timeaxis
                a = 0

                if len(looptimeaxisweekend) == 0:
                    print('')
                    timeaxis4444 = []
                else:

                    timeaxis4444 = looptimeaxisweekend[0]

                

                while a < len(looptimeaxisweekend):

                    timeaxis1111 = looptimeaxisweekend[a]

                    print(len(timeaxis1111))

                    print(timeaxis1111[0])
                    print(timeaxis4444[0])

                    if timeaxis1111[0] == timeaxis4444[0]:
                        timeaxis5555 = timeaxis4444

                    else:

                        #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                        timeaxis5555 = timeaxis5555 + timeaxis1111
                        timeaxis4444 = timeaxis4444 + timeaxis1111

                        print(len(timeaxis4444))
                        print(len(timeaxis5555))


                    a+=1


                #print(timeaxis4444)

                print(len(timeaxis444))
                print(len(dataset444))

                print(len(timeaxis4444))
                print(len(dataset4444))



                x10fweekday = pd.DataFrame(timeaxis444, columns=['time'])
                x10fweekday['data'] = dataset444

                labelsweekday = x10fweekday['time']

                valuesweekday = x10fweekday['data']

                valuesweekday = np.array(valuesweekday)

                #print(labelsweekday)
                #print(valuesweekday)



                

                x10fweekend = pd.DataFrame(timeaxis4444, columns=['time'])
                x10fweekend['data'] = dataset4444

                labelsweekend = x10fweekend['time']

                valuesweekend = x10fweekend['data']

                valuesweekend = np.array(valuesweekend)

                #print(labelsweekend)
                #print(valuesweekend)

                weekdaylabeldateday = []
                weekendlabeldateday = []



                if len(labelsweekday) == 0:
                    print('')

                else:
                    

                    a = 0
                    
                    X22 = 0
                    X33 = []
                    X777 = []
                    X778 = []
                    X779 = []
                    X77 = []


                    while a < len(labelsweekday):
                        X22 = labelsweekday[a]
                        X22 = X22.replace('[', '')
                        X22 = X22.replace(']', '')
                        X22 = X22.replace("'", "")
                        X22 = X22.replace(":", " ")
                        X22 = X22.replace("-", " ")
                        X22 = X22.replace("/", " ")
                        X22=X22.split()
                        X225 = X22[-3:-1]

                        X771 = X22[0]
                        X772 = X22[1]
                        X773 = X22[2]
                        
                        X777.append(X771)
                        X778.append(X772)
                        X779.append(X773)
                        
                        X33.append(X225)

                        weekdayyear = int(X22[0])
                        weekdaymonth = int(X22[1])
                        weekdayday = int(X22[2])

                        weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                        weekdaylabeldateday.append(weekdaylabeldate.weekday())

                        
                        a+=1

                    X44 = np.array(X33)



                if len(valuesweekend) == 0:
                    print('')

                else:



                    a = 0
                    
                    XX22 = 0
                    XX33 = []
                    XX777 = []
                    XX778 = []
                    XX779 = []
                    XX77 = []


                    while a < len(labelsweekend):
                        XX22 = labelsweekend[a]
                        XX22 = XX22.replace('[', '')
                        XX22 = XX22.replace(']', '')
                        XX22 = XX22.replace("'", "")
                        XX22 = XX22.replace(":", " ")
                        XX22 = XX22.replace("-", " ")
                        XX22 = XX22.replace("/", " ")
                        XX22=XX22.split()
                        XX225 = XX22[-3:-1]

                        XX771 = XX22[0]
                        XX772 = XX22[1]
                        XX773 = XX22[2]
                        
                        XX777.append(XX771)
                        XX778.append(XX772)
                        XX779.append(XX773)
                        
                        XX33.append(XX225)

                        weekendyear = int(XX22[0])
                        weekendmonth = int(XX22[1])
                        weekendday = int(XX22[2])

                        weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                        weekendlabeldateday.append(weekendlabeldate.weekday())
                        
                        a+=1

                    XX44 = np.array(XX33)


                #print(X44)
                #print(XX44)










                print(len(weekdaylabeldateday))
               # print(weekdaylabeldateday)

                print(len(valuesweekday))
                #print(valuesweekday)


                a = 25

                weekdayvaluesavg = []
                weekdaylabelsavg = []
                weekdaypredavg = []

                while a < len(weekdaylabeldateday):
                    a1 = int(valuesweekday[a])
                    a2 = int(valuesweekday[a-1])
                    a3 = int(valuesweekday[a-2])
                    a4 = int(valuesweekday[a-3])
                    a5 = int(valuesweekday[a-4])
                    a6 = int(valuesweekday[a-5])
                    a7 = int(valuesweekday[a-6])
                    a8 = int(valuesweekday[a-7])
                    a9 = int(valuesweekday[a-8])
                    a10 = int(valuesweekday[a-9])
                    a11 = int(valuesweekday[a-10])
                    a12 = int(valuesweekday[a-11])
                    a13 = int(valuesweekday[a-12])
                    a14 = int(valuesweekday[a-13])
                    a15 = int(valuesweekday[a-14])
                    a16 = int(valuesweekday[a-15])
                    a17 = int(valuesweekday[a-16])
                    a18 = int(valuesweekday[a-17])
                    a19 = int(valuesweekday[a-18])
                    a20 = int(valuesweekday[a-19])
                    a21 = int(valuesweekday[a-20])
                    a22 = int(valuesweekday[a-21])
                    a23 = int(valuesweekday[a-22])
                    a24 = int(valuesweekday[a-23])
                    a25 = int(valuesweekday[a-24])
                    a26 = int(valuesweekday[a-25])

                    #print(a4)

                    

                    aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                    

                    #print(aavg)

                    if weekdaylabeldateday[a] == 5:

                        weekdayvaluesavg.append(aavg)

                        weekdaylabelsavg.append(labelsweekday[a])

                        weekdaypredavg.append(X33[a])

                        a = a + 26

                    else:

                        weekdayvaluesavg.append(aavg)

                        weekdaylabelsavg.append(labelsweekday[a])

                        weekdaypredavg.append(X33[a])

                        a +=1



                print(len(weekdaylabeldateday))
                print(len(weekdayvaluesavg))
                print(len(weekdaylabelsavg))



                print(len(weekendlabeldateday))
                #print(weekendlabeldateday)

                print(len(valuesweekend))
                #print(valuesweekend)

                    

                a = 25

                weekendvaluesavg = []
                weekendlabelsavg = []
                weekendpredavg = []

                while a < len(weekendlabeldateday):
                    a1 = int(valuesweekend[a])
                    a2 = int(valuesweekend[a-1])
                    a3 = int(valuesweekend[a-2])
                    a4 = int(valuesweekend[a-3])
                    a5 = int(valuesweekend[a-4])
                    a6 = int(valuesweekend[a-5])
                    a7 = int(valuesweekend[a-6])
                    a8 = int(valuesweekend[a-7])
                    a9 = int(valuesweekend[a-8])
                    a10 = int(valuesweekend[a-9])
                    a11 = int(valuesweekend[a-10])
                    a12 = int(valuesweekend[a-11])
                    a13 = int(valuesweekend[a-12])
                    a14 = int(valuesweekend[a-13])
                    a15 = int(valuesweekend[a-14])
                    a16 = int(valuesweekend[a-15])
                    a17 = int(valuesweekend[a-16])
                    a18 = int(valuesweekend[a-17])
                    a19 = int(valuesweekend[a-18])
                    a20 = int(valuesweekend[a-19])
                    a21 = int(valuesweekend[a-20])
                    a22 = int(valuesweekend[a-21])
                    a23 = int(valuesweekend[a-22])
                    a24 = int(valuesweekend[a-23])
                    a25 = int(valuesweekend[a-24])
                    a26 = int(valuesweekend[a-25])

                    #print(a4)

                    

                    aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                    #print(aavg)

                    if weekendlabeldateday[a] == 0:

                        weekendvaluesavg.append(aavg)

                        weekendlabelsavg.append(labelsweekend[a])

                        weekendpredavg.append(XX33[a])

                        a = a + 26

                    else:

                        weekendvaluesavg.append(aavg)

                        weekendlabelsavg.append(labelsweekend[a])

                        weekendpredavg.append(XX33[a])

                        a +=1



                weekdaypredavg = np.array(weekdaypredavg)
                weekendpredavg = np.array(weekendpredavg)

                print(len(weekendlabeldateday))
                print(len(weekendvaluesavg))
                print(len(weekendlabelsavg))

                print(weekendlabeldateday)
                print(weekendvaluesavg)
                print(weekendlabelsavg)


                #print(X44)
                #print(XX44)

                print(len(weekdaypredavg))
                print(len(weekendpredavg))







                regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                if len(valuesweekday) == 0:
                    print('')
                    predvaluweekday = []
                elif len(labels5) == 0:
                    print('')
                    predvaluweekday = []

                else:

                    regr.fit(X44, valuesweekday)
                    #regr.fit(weekdaypredavg, weekdayvaluesavg)
                    predictedweekday = regr.predict(X7)


                    print(predictedweekday)

                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))
                   
                    i = len(predictedweekday)
                    k = 0
                    predvaluweekday = []
                    while k < i:
                        predvalweekday = predictedweekday[k]
                        predvaluweekday.append(predvalweekday)
                        k += 1
                    print(predvaluweekday)

                    print(len(predvaluweekday))




                regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                if len(valuesweekend) == 0:
                    print('')
                    predvaluweekend = []
                elif len(labels5) == 0:
                    print('')
                    predvaluweekend = []

                else:

                    regrf.fit(XX44, valuesweekend)
                    #regrf.fit(weekendpredavg, weekendvaluesavg)
                    predictedweekend = regrf.predict(X7)


                    print(predictedweekend)

                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))
                   
                    i = len(predictedweekend)
                    k = 0
                    predvaluweekend = []
                    while k < i:
                        predvalweekend = predictedweekend[k]
                        predvaluweekend.append(predvalweekend)
                        k += 1
                    print(predvaluweekend)

                    print(len(predvaluweekend))
                    
                


                predvalu = predvaluweekday

                
                
                

                ####################################





                conn.close()


                title2 = Building_name_title + ': ' + Floor_name_title + ' ' + parameterwifititle

                xmin = residualstartdate.replace('T', ' ')
                xmax = residualenddate.replace('T', ' ')

                labels = x['time']

                #values = x['data']
                values = x5['data']

                print(values)
                print(values5)
                



                
                i = len(values)
                k = 0
                valu = []
                while k < i:
                    val = values[k]
                    valu.append(val)
                    k += 1
                #print(valu)
                print(len(valu))

                z = len(labels)
                y = 0
                labe = []
                while y < z:
                    lab = labels[y]
                    labe.append(lab)
                    y += 1
                #print(labe[0])
                #print(labels[0])


                a = 0
                X2 = 0
           

                X227 = []
                X228 = []
                X229 = []
                X22 = []
                X2727 = []

                while a < len(labels):
                    X2 = str(labels[a])
                    X2 = X2.replace('[', '')
                    X2 = X2.replace(']', '')
                    X2 = X2.replace("'", "")
                    X2 = X2.replace(":", " ")
                    X2 = X2.replace("-", " ")
                    X2 = X2.replace("/", " ")
                    X2=X2.split()
                    X25 = X2[-3:-1]

                    X221 = X2[0]
                    X222 = X2[1]
                    X223 = X2[2]
                    
                    X227.append(X221)
                    X228.append(X222)
                    X229.append(X223)
                    a+=1


                #print(X227[0])
                #print(X228[0])
                #print(X229[0])



                a = 0

                while a < len(X227):
                    

                    X2227 = int(X227[a])
                    X2228 = int(X228[a])
                    X2229 = int(X229[a])
                    
                    X22222 = datetime.date(X2227, X2228, X2229)

                    X22222 = X22222.weekday()

                    X2727.append(X22222)

                    a+=1
                    
                #print(X77)
                #print(X2727)

                value_max = x5['data'].max() + 1
                value_min = x5['data'].min()
                if value_min == 0:
                    value_min = value_min
                else:
                    value_min = value_min - 1
                line_labels=labe
                line_values=valu

                #residualdf = pd.DataFrame({'time':labe, title2:valu})


                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                a=0

                weekendvalu = []
                weekdayvalu = []

                while a < len(valu):
                    if X2727[a] == 5:
                        weekendvalu.append(valu[a])

                    elif X2727[a] == 6:
                        weekendvalu.append(valu[a])

                    else:
                        weekdayvalu.append(valu[a])
                    a+=1
                    

                weekdaystddev = np.std(weekdayvalu)
                weekendstddev = np.std(weekendvalu)

                print(weekdayvalu)
                print(weekendvalu)
                print(weekdaystddev)
                print(weekendstddev)


                if len(valuesweekday) == 0:
                    #print('hi')


                    avgg = np.mean(valu)
                    medavgg = np.median(valu)
                    stddev = np.std(valu)
                    #print(avgg)
                    #print(medavgg)
                    #print(stddev)

                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                    z = avgg + (3*stddev)
                    zz = avgg - (3*stddev)

                    while v < len(valu):
                        if valu[v] > z:
                            #print('bigger')
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        elif valu[v] < zz:
                            #print('smaller')
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        else:
                            #print('is not')
                            outliers.append('f')
                            valus.append(valu[v])
                                
                            

                                    
                                
                        v += 1

                        
                elif len(predvaluweekend) == 0:

                    stddev = np.std(valu)
                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                        
                    while v < len(valu):
                        if valu[v] > (predvaluweekday[v] + weekdaystddev):
                            #print('bigger')
                            #print((predvalweekdayu[v] + stddev))
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                            #print('smaller')
                            #print((predvalweekdayu[v] - stddev))
                            outliers.append(valu[v])
                            
                                
                            
                            valus.append('f')

                        else:
                            #print('is not')
                            outliers.append('f')
                            valus.append(valu[v])
                        v +=1

                else:       
                    stddev = np.std(valu)
                    v = 0
                    u = len(line_values)
                    outliers = []
                    valus = []
                            

                    while v < len(valu):

                        if X2727[v] == 6:
                            if valu[v] > (predvaluweekend[v] + weekendstddev):
                                #print('bigger weekend')
                                #print((predvaluweekend[v] + stddev))
                                outliers.append(valu[v])
                                
                                        
                                    
                                valus.append('f')

                            elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                #print('smaller weekend')
                                #print((predvaluweekend[v] - stddev))
                                outliers.append(valu[v])
                                
                                        
                                    
                                valus.append('f')

                            else:
                                #print('is not weekend')
                                outliers.append('f')
                                valus.append(valu[v])
                                        
                                


                        elif X2727[v] == 5:

                            if valu[v] > (predvaluweekend[v] + weekendstddev):
                                #print('bigger weekend')
                                #print((predvaluweekend[v] + stddev))
                                outliers.append(valu[v])
                                
                                        
                                    
                                valus.append('f')

                            elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                #print('smaller weekend')
                                #print((predvaluweekend[v] - stddev))
                                outliers.append(valu[v])
                                
                                        
                                    
                                valus.append('f')

                            else:
                                #print('is not weekend')
                                outliers.append('f')
                                valus.append(valu[v])
                                        
                                



                        else:
                            if valu[v] > (predvalu[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalu[v] + stddev))
                                outliers.append(valu[v])
                                
                                        
                                    
                                valus.append('f')

                            elif valu[v] < (predvalu[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalu[v] - stddev))
                                outliers.append(valu[v])
                                
                                        
                                    
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                        
                                
                        v += 1

                



                    
                #print(outliers)
                #print(valus)
                #print(valu)

                #print(len(outliers))
                #print(len(valus))
                #print(len(valu))

                #print(z)
                #print(zz)

                legend=title2
                    
                #print(valus)
                #line_values=valus
                #print(line_values)
                #line_outliers = outliers

                if len(valuesweekday) == 0:
                    line_values=valus
                    line_outliers = outliers
                elif len(labels5) == 0:
                    line_values=valus
                    line_outliers = outliers

                else:
                    line_values=valu
                    line_outliers = predvalu

                    #print(valus[0])
                    #print(predvalu[0])
                    #print(mean_squared_error(values5, predicted))
                    #print(r2_score(values5, predicted))


                line_values=valu
                #line_outliers = predvalu

                #print(valus)
                #print(predvalu)
                #print(stddev)



                line_values=valu
                line_outliers = outliers

                    ##############################
                dfnewest1 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                newest1values1 = dfnewest1.iloc[:,2].values
                newest1timestamp = dfnewest1.iloc[:,1].values
                newest1title = dfnewest1.columns[2]
                #print(newest1values1)
                #print(newest1timestamp)
                #print(newest1title)

                dfnewest1pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                dfnewest1predvalues1 = dfnewest1pred.iloc[:,2].values

                it = len(dfnewest1predvalues1)
                kt = 0
                dfnewest1predvalu = []
                while kt < it:
                    dfnewest1predval = dfnewest1predvalues1[kt]
                    dfnewest1predvalu.append(dfnewest1predval)
                    kt += 1
                #print(dfnewest1predvalu)

                dfnewest2 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                newest2values1 = dfnewest2.iloc[:,2].values
                newest2timestamp = dfnewest2.iloc[:,1].values
                newest2title = dfnewest2.columns[2]
                #print(newest2values1)
                #print(newest2timestamp)
                #print(newest2title)

                dfnewest2pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfnewest2predvalues1 = dfnewest2pred.iloc[:,2].values

                it = len(dfnewest2predvalues1)
                kt = 0
                dfnewest2predvalu = []
                while kt < it:
                    dfnewest2predval = dfnewest2predvalues1[kt]
                    dfnewest2predvalu.append(dfnewest2predval)
                    kt += 1
                #print(dfnewest2predvalu)


                dfnewest3 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                newest3values1 = dfnewest3.iloc[:,2].values
                newest3timestamp = dfnewest3.iloc[:,1].values
                newest3title = dfnewest3.columns[2]
                #print(newest3values1)
                #print(newest3timestamp)
                #print(newest3title)

                dfnewest3pred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                dfnewest3predvalues1 = dfnewest3pred.iloc[:,2].values

                it = len(dfnewest3predvalues1)
                kt = 0
                dfnewest3predvalu = []
                while kt < it:
                    dfnewest3predval = dfnewest3predvalues1[kt]
                    dfnewest3predvalu.append(dfnewest3predval)
                    kt += 1
                #print(dfnewest3predvalu)



                newest33axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                newest33value_max = newest33axisdf.iloc[0,2]
                newest33value_min = newest33axisdf.iloc[0,1]

                
##################################################


                




                legend=title2

                if len(values5) == 0:
                    line_values=valus
                    line_outliers = outliers
                    oldoutliers = oldpredvalu
                    oldoldoutliers = oldoldpredvalu
                    oldvalus = oldvalu
                    oldoldvalus = oldoldvalu
                elif len(labels5) == 0:
                    line_values=valus
                    line_outliers = outliers

                    oldoutliers = oldpredvalu
                    oldoldoutliers = oldoldpredvalu
                    oldvalus = oldvalu
                    oldoldvalus = oldoldvalu

                else:
                    line_values=valu
                    line_outliers = predvalu
                    
                    oldoutliers = oldpredvalu
                    oldoldoutliers = oldoldpredvalu
                    oldvalus = oldvalu
                    oldoldvalus = oldoldvalu


                

                





                    

                print(line_values)
                print(outliers)
                print(oldvalus)
                print(oldoutliers)
                #print(oldoldvalus)
                print('xxxxxxxxxxxxxxxx')
                print(oldoldoutliers)
                #print(labe)

                #print(len(labe))
                print(len(oldoldoutliers))
                #print(len(newoldoutliers))


                residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
                residualaxisvaluesdf3 = pd.DataFrame({'min':[oldoldvalue_min], 'max':[oldoldvalue_max]}) #oldold


                residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                residualsklearndfoutliers = pd.DataFrame({'time':labe, title2:outliers})
                residualsklearndfvalues = pd.DataFrame({'time':labe, title2:line_values})

                newest1it = len(newest1values1)
                newest1kt = 0
                newest1valu2 = []
                while newest1kt < newest1it:
                    newest1val2 = newest1values1[newest1kt]
                    newest1valu2.append(newest1val2)
                    newest1kt += 1
                #print(newest1valu2)

                newest1valu = newest1valu2

                newest2it = len(newest2values1)
                newest2kt = 0
                newest2valu2 = []
                while newest2kt < newest2it:
                    newest2val2 = newest2values1[newest2kt]
                    newest2valu2.append(newest2val2)
                    newest2kt += 1
                #print(newest2valu2)

                newest2valu = newest2valu2
                
                newest3it = len(newest3values1)
                newest3kt = 0
                newest3valu2 = []
                while newest3kt < newest3it:
                    newest3val2 = newest3values1[newest3kt]
                    newest3valu2.append(newest3val2)
                    newest3kt += 1
                #print(newest3valu2)

                newest3valu = newest3valu2


                newest3ylabel = newest3title.split()

                newest3ylabel = newest3ylabel[-1]

                meter_id = Building_name_title + ' ' + Floor_name_title

                oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                oldoldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                oldmeter_id = oldmeter_id.iloc[0,1]
                oldoldmeter_id = oldoldmeter_id.iloc[0,1]
                oldoldoldmeter_id = oldoldoldmeter_id.iloc[0,1]

                print(meter_id)
                print(oldmeter_id)
                print(oldoldmeter_id)
                print(oldoldoldmeter_id)

                residualaxismeterid = pd.DataFrame({'meter_id':[meter_id]})
                residualaxismeterid2 = pd.DataFrame({'meter_id':[oldmeter_id]})
                residualaxismeterid3 = pd.DataFrame({'meter_id':[oldoldmeter_id]})
                residualaxismeterid4 = pd.DataFrame({'meter_id':[oldoldoldmeter_id]})
                
                residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                if valu == []:
                    print('0 data')

                    residualsklearndfvalues = pd.DataFrame({'time':oldlabe, oldtitle:oldvalu})
                    residualsklearndfvalues2 = pd.DataFrame({'time':oldlabe, oldtitle2:oldvalu2})
                    residualsklearndfvalues3 = pd.DataFrame({'time':oldlabe, newest3title:newest3valu2})

                    residualdf = pd.DataFrame({'timestamp':oldlabe, oldtitle:oldvalu})
                    residualdf2 = pd.DataFrame({'timestamp':oldlabe, oldtitle2:oldvalu2}) #old
                    residualdf3 = pd.DataFrame({'timestamp':oldlabe, newest3title:newest3valu2}) #oldold


                    
                    residualsklearndfoutliers = pd.DataFrame({'time':oldlabe, oldtitle:oldoutliers})
                    residualsklearndfoutliers2 = pd.DataFrame({'time':oldlabe, oldtitle2:oldoldoutliers})
                    residualsklearndfoutliers3 = pd.DataFrame({'time':oldlabe, newest3title:newest33predvalu})
                else:


                    residualsklearndfvalues = residualsklearndfvalues.set_index('time')

                    residualsklearndfvalues.index = residualsklearndfvalues.index.map(lambda x: x.replace(second=0))
                    
                    print(residualsklearndfvalues[title2].head(30))

                    residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                    residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                    print(residualsklearndfvalues.head(75))

                    testarr = np.array(residualsklearndfvalues[title2])

                    z = len(testarr)
                    y = 0
                    valtest = []
                    while y < z:
                        val = testarr[y]
                        if np.isnan(val) == True:
                            valtest.append('f')
                        else:
                            
                            valtest.append(int(val))
                        y += 1
                    testarrvalus = valtest

                    print(testarrvalus)
                    print(len(testarrvalus))

                    testarrlabe = residualsklearndfvalues.reset_index()
                    testarrlabe = pd.to_datetime(testarrlabe['time'], format = '%Y-%m-%d %H:%M')

                    z = len(testarrlabe)
                    y = 0
                    labetest = []
                    while y < z:
                        lab = testarrlabe[y]
                        labetest.append(lab)
                        y += 1
                    testarrlabe = labetest
                    #print(testarrlabe)
                    #print(len(testarrlabe))
                    #print(len(line_values))

                    line_values = testarrvalus
                    line_labels = testarrlabe



                    residualsklearndfoutliers = residualsklearndfoutliers.set_index('time')
                    residualsklearndfoutliers.index = residualsklearndfoutliers.index.map(lambda x: x.replace(second=0))


                    print(residualsklearndfoutliers[160:220])
                    residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]
                    
                    residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()

                    print(residualsklearndfoutliers[880:940])

                    residualsklearndfoutliers = residualsklearndfoutliers.fillna('f')

                    print(residualsklearndfoutliers[880:940])


                    testarroutliers = np.array(residualsklearndfoutliers[title2])

                    print('outliers')
                    print(outliers)
                    print(testarroutliers[160:220])

                    z = len(testarroutliers)
                    y = 0
                    outtest = []
                    while y < z:
                        out = testarroutliers[y]
                        if out == 'f':
                            outtest.append(out)
                        
                        else:
                            
                            outtest.append(int(out))
                        y += 1
                    testarroutliers = outtest

                    print(testarroutliers)
                    print(len(testarroutliers))

                    line_outliers = testarroutliers
                    outliers = testarroutliers

                    print(line_outliers)
                    #print(line_labels)
                    print(line_values)
                    print(len(oldlabe))
                    #print(len(line_labels))
                    print(len(line_values))

                    print(line_labels[0:100])
                    print(oldlabe[0:100])

                    oldstarttemp1 = datetime.datetime.strptime(str(oldlabe[0]), '%Y-%m-%d %H:%M:%S')
                    newstarttemp1 = datetime.datetime.strptime(str(line_labels[0]), '%Y-%m-%d %H:%M:%S')

                    line_labelstemp2 = []

                    if (oldstarttemp1 - newstarttemp1) < datetime.timedelta(seconds=-59):
                        line_labelstemp2.append(oldstarttemp1)


                            
                    elif (oldstarttemp1 - newstarttemp1) > datetime.timedelta(seconds=59):
                        line_labelstemp2.append(newstarttemp1)
                    else:
                        line_labelstemp2.append(newstarttemp1)



                    oldendtemp1 = datetime.datetime.strptime(str(oldlabe[-1]), '%Y-%m-%d %H:%M:%S')
                    newendtemp1 = datetime.datetime.strptime(str(line_labels[-1]), '%Y-%m-%d %H:%M:%S')

                    if (oldendtemp1 - newendtemp1) < datetime.timedelta(seconds=59):
                        print('1')
                        print(oldendtemp1)
                        print(newendtemp1)
                        line_labelstemp2.append(newendtemp1)

                            
                    elif (oldendtemp1 - newendtemp1) > datetime.timedelta(seconds=-59):
                        print('2')
                        print(oldendtemp1)
                        print(newendtemp1)
                        line_labelstemp2.append(oldendtemp1)

                    else:
                        line_labelstemp2.append(newendtemp1)



                    test = pd.DataFrame({'time':line_labelstemp2})

                    test = test.set_index('time')
                    test.index = test.index.map(lambda x: x.replace(second=0))

                    test = test[~test.index.duplicated()]
                    
                    test = test.resample('T').asfreq()

                    test2 = test.index.floor('S')
                    print(test2)
                    print('test2')

                    a = 0
                    b=0
                    c=0

                    oldoldlabe = oldlabe

                    print(len(test2))
                    print(len(line_labels))
                    print(len(oldoldlabe))

                    print(test2[0])
                    print(line_labels[0])
                    print(oldoldlabe[0])

                    print(str(oldoldlabe[0]) == str(test2[0]))

                    line_valuestemp = []
                    oldvalustemp= []
                    oldoldvalustemp= []
                    line_labelstemp= []
                    outlierstemp= []
                    oldoutlierstemp= []
                    oldoldoutlierstemp= []
                    oldoldlabetemp = []


                    while a < len(test2):

                        if b == len(line_labels):
                            line_valuestemp.append('f')
                            line_labelstemp.append(test2[a])
                            outlierstemp.append('f')

                        else:
                            
                            if str(test2[a]) == str(line_labels[b]):
                                line_valuestemp.append(line_values[b])
                                line_labelstemp.append(line_labels[b])
                                outlierstemp.append(outliers[b])

                                b+=1
                                

                            else:
                                line_valuestemp.append('f')
                                line_labelstemp.append(test2[a])
                                outlierstemp.append('f')

                        if c == len(oldoldlabe):
                            oldvalustemp.append('f')
                            oldoldvalustemp.append('f')
                            oldoutlierstemp.append('f')
                            oldoldoutlierstemp.append('f')
                            oldoldlabetemp.append(test2[a])
                        else:
                            
                            if str(test2[a]) == str(oldoldlabe[c]):
                                oldvalustemp.append(oldvalus[c])
                                oldoldvalustemp.append(oldoldvalus[c])
                                oldoutlierstemp.append(oldoutliers[c])
                                oldoldoutlierstemp.append(oldoldoutliers[c])
                                oldoldlabetemp.append(oldoldlabe[c])

                                c+=1

                            else:
                                oldvalustemp.append('f')
                                oldoldvalustemp.append('f')
                                oldoutlierstemp.append('f')
                                oldoldoutlierstemp.append('f')
                                oldoldlabetemp.append(test2[a])


                        a+=1

                    line_values = line_valuestemp
                    oldvalus = oldvalustemp
                    oldoldvalus = oldoldvalustemp
                    line_labels = line_labelstemp
                    outliers = outlierstemp
                    oldoutliers = oldoutlierstemp
                    oldoldoutliers = oldoldoutlierstemp
                    oldlabe = oldoldlabetemp
                    line_outliers = outliers


                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, title2:line_values})
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, title2:outliers})

                    residualdf = pd.DataFrame({'time':line_labels, title2:line_values})
                    residualdf2 = pd.DataFrame({'time':line_labels, oldtitle:oldvalus}) #old
                    residualdf3 = pd.DataFrame({'time':line_labels, oldoldtitle:oldoldvalus}) #oldold

                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, title2:outliers})
                    residualsklearndfoutliers2 = pd.DataFrame({'time':line_labels, oldtitle:oldoutliers})
                    residualsklearndfoutliers3 = pd.DataFrame({'time':line_labels, oldoldtitle:oldoutliers})

                    

                        
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")


                    

                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                    #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                    residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                    residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                if valu == []:
                    if oldvalu==oldoldvalu:
                        title2 = 'Error No Data Available for Floor: ' + Building_name_title + ' ' + Floor_name_title
                        print('11')
                        print(oldoutliers)

                        residualsklearndfoutliers = pd.DataFrame({'time':oldlabe, oldtitle:oldoldoutliers})
                        residualsklearndfoutliers2 = pd.DataFrame({'time':oldlabe, oldoldtitle:oldoldoutliers})
                        residualsklearndfoutliers3 = pd.DataFrame({'time':oldlabe, oldoldtitle:oldoldoutliers})

                        residualdf = pd.DataFrame({'time':oldlabe, oldoldtitle:newest3valu})
                        residualdf2 = pd.DataFrame({'time':oldlabe, oldoldtitle:newest3valu}) #old
                        residualdf3 = pd.DataFrame({'time':oldlabe, oldoldtitle:newest3valu}) #oldold
                            

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")

                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")

                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")


                        return render_template('view 19.html',legend=oldoldtitle, outlier=oldoldoutliers, title=title2,min=oldvalue_min, max=oldvalue_max, labels=oldlabe, values=newest3valu, start=residualstartdate, end=residualenddate, ylabel=newest3ylabel)


                    elif newest2title == newest3title:
                        title2 = 'Error No Data Available for Floor: ' + Building_name_title + ' ' + Floor_name_title
                        print(title2)


                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")



                        return render_template('view 19 2 lines.html',legend=oldoldtitle, oldoutlier=oldoutliers, outlier=oldoldoutliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=title2,min=oldoldvalue_min, max=oldoldvalue_max, labels=oldlabe, values=oldoldvalus, start=residualstartdate, end=residualenddate, ylabel=oldoldylabel, oldylabel=oldylabel)

                    else:
                        print('11.5')

                        title2 = 'Error No Data Available for Floor: ' + Building_name_title + ' ' + Floor_name_title

                        residualaxisvaluesdf = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #newest
                        residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min2], 'max':[oldvalue_max2]}) #old
                        residualaxisvaluesdf3 = pd.DataFrame({'min':[newest33value_min], 'max':[newest33value_max]}) #oldold

                        residualsklearndfoutliers = pd.DataFrame({'timestamp':oldoldlabe, newest1title:dfnewest1predvalu})
                        residualsklearndfoutliers2 = pd.DataFrame({'timestamp':oldoldlabe, newest2title:dfnewest2predvalu})
                        residualsklearndfoutliers3 = pd.DataFrame({'timestamp':oldoldlabe, newest3title:dfnewest3predvalu})

                        residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                        residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                        residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                        residualdf = pd.DataFrame({'timestamp':oldlabe, newest1title:newest1valu})
                        residualdf2 = pd.DataFrame({'timestamp':oldlabe, newest2title:newest2valu})
                        residualdf3 = pd.DataFrame({'timestamp':oldlabe, newest3title:newest3valu})

                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                        residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                        residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                        residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                        residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                        residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                        residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                        residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                        residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                        residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")


                        return render_template('view 19 3 lines.html', oldoldoutlier=dfnewest3predvalu, oldoutlier=dfnewest2predvalu, outlier=dfnewest1predvalu, oldvalues=newest2valu, oldtitle=newest2title, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, oldoldvalues=newest3valu, oldoldtitle=newest3title, oldoldmin=newest33value_min, oldoldmax=newest33value_max, title=title2, min=oldvalue_min, max=oldvalue_max, labels=oldlabe, values=newest1valu, start=residualstartdate, end=residualenddate, legend=newest1title, ylabel=oldylabel, oldylabel=oldoldylabel, oldoldylabel=newest3ylabel)




                        
                else:
                    
                    if oldvalu==oldoldvalu:
                        if title2 == oldoldtitle:
                            
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)

                            return render_template('view 19.html',legend=legend, outlier=outliers, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax)


                        else:
                            
                            return render_template('view 19 2 lines.html',oldlabels=labe, legend=legend, oldoutlier=oldoutliers, outlier=outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel)

                    elif newest1title == newest2title:
                        if title2 == oldoldtitle:
                            legend=oldoldtitle
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)
                            print('1')
                            print(newest1title)
                            print(newest2title)
                            print(newest3title)
                            print(legend)




                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html',oldlabels=oldlabe, legend=legend, oldoutlier=oldoutliers, outlier=oldoldoutliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=title2,min=oldoldvalue_min, max=oldoldvalue_max, labels=line_labels, values=oldoldvalus, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel)


                        elif title2 == oldtitle:
                            legend=oldoldtitle
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)
                            print('2')
                            print(legend)


                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")



                            return render_template('view 19 2 lines.html',oldlabels=oldlabe, legend=legend, oldoutlier=oldoutliers, outlier=oldoldoutliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=title2,min=oldoldvalue_min, max=oldoldvalue_max, labels=line_labels, values=oldoldvalus, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel)

                        else:
                            print('1???????')
                            return render_template('view 19 3 lines.html',legend=legend, oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldoldtitle, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldoldylabel, oldoldylabel=oldylabel)


                    elif newest1title == newest3title:
                        if title2 == oldoldtitle:
                            legend=oldoldtitle
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)
                            print('3')
                            print(legend)




                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html',oldlabels=oldlabe, legend=legend, oldoutlier=oldoutliers, outlier=oldoldoutliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=title2,min=oldoldvalue_min, max=oldoldvalue_max, labels=line_labels, values=oldoldvalus, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel)


                        elif title2 == oldtitle:
                            legend=oldoldtitle
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)
                            print('4')
                            print(legend)


                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html', oldlabels=oldlabe, legend=legend, oldoutlier=oldoutliers, outlier=oldoldoutliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=title2,min=oldoldvalue_min, max=oldoldvalue_max, labels=line_labels, values=oldoldvalus, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel)
                        else:
                            print('2???????')
                            return render_template('view 19 3 lines.html',legend=legend, oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldoldtitle, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldoldylabel, oldoldylabel=oldylabel)


                    elif newest2title == newest3title:
                        
                        if title2 == oldoldtitle:
                            legend=oldoldtitle
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)
                            print('5')
                            print(legend)



                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html',oldlabels=oldlabe, legend=oldtitle, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldoldtitle, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, title=title2,min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=oldylabel, xmin=xmin, xmax=xmax, oldylabel=oldoldylabel)


                        elif title2 == oldtitle:
                            legend=oldoldtitle
                            title2 = 'Error Tried To Add Data Already being Trended'
                            print(title2)
                            print('6')
                            print(legend)


                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualsklearndfoutliers3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                            return render_template('view 19 2 lines.html',oldlabels=oldlabe, legend=oldtitle, oldoutlier=oldoldoutliers, outlier=oldoutliers, oldvalues=oldoldvalus, oldtitle=oldoldtitle, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, title=title2,min=oldvalue_min, max=oldvalue_max, labels=line_labels, values=oldvalus, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=oldylabel, xmin=xmin, xmax=xmax, oldylabel=oldoldylabel)
                        else:
                            print('3???????')
                            return render_template('view 19 3 lines.html',legend=legend, oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, oldoldvalues=oldoldvalus, oldoldtitle=oldoldtitle, oldoldmin=oldoldvalue_min, oldoldmax=oldoldvalue_max, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel, oldoldylabel=oldoldylabel)


                

                    else:

                        if title2 == newest2title:

                            title2 = 'Error Tried To Add Data Already being Trended'
                            
                            legend=oldoldtitle
                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]


                            

                            #print(newest1value_max2)
                            #print(newest1value_min2)
                            #print(newest1ylabel2)
                            #if newest1value_min2 == 0:
                                #newest1value_min2 = newest1value_min2
                            #else:
                                #newest1value_min2 = newest1value_min2 - 1

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1valu2):


                                if newest1valu2[v] == 'f':
                                    x = newest1valu2[v]
                                else:
                                    x = int(newest1valu2[v])

                                if dfnewest1predvalu[v] == 'f':
                                    y = dfnewest1predvalu[v]
                                else:
                                    y = int(dfnewest1predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1



                            #print(newest1valus)
                            #print(newest1outliers)

                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            

                            #print(newest2value_max2)
                            #print(newest2value_min2)
                            #print(newest2ylabel2)
                            
                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)

                            newest2value_max2 = 1
                            newest2value_min2 = 0


                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2valu2):


                                if newest2valu2[v] == 'f':
                                    x = newest2valu2[v]
                                else:
                                    x = int(newest2valu2[v])

                                if dfnewest2predvalu[v] == 'f':
                                    y = dfnewest2predvalu[v]
                                else:
                                    y = int(dfnewest2predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1




                            #print(newest2valus)
                            #print(newest2outliers)


                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            


                            #print(newest3value_max2)
                            #print(newest3value_min2)
                            #print(newest3ylabel2)
                            #if newest3value_min2 == 0:
                                #newest3value_min2 = newest3value_min2
                            #else:
                                #newest3value_min2 = newest3value_min2 - 1

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)


                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3valu2):


                                if newest3valu2[v] == 'f':
                                    x = newest3valu2[v]
                                else:
                                    x = int(newest3valu2[v])

                                if dfnewest3predvalu[v] == 'f':
                                    y = dfnewest3predvalu[v]
                                else:
                                    y = int(dfnewest3predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1


                           

                            
                            print('18')

                            


                            dfnewest33predvalues1 = dfnewest3pred.iloc[:,2].values

                            it = len(dfnewest33predvalues1)
                            kt = 0
                            newest33predvalu = []
                            while kt < it:
                                newest33predval = dfnewest33predvalues1[kt]
                                newest33predvalu.append(newest33predval)
                                kt += 1
                            #print(newest33predvalu[0])

                            dfnewest22predvalues1 = dfnewest2pred.iloc[:,2].values

                            it = len(dfnewest22predvalues1)
                            kt = 0
                            newest22predvalu = []
                            while kt < it:
                                newest22predval = dfnewest22predvalues1[kt]
                                newest22predvalu.append(newest22predval)
                                kt += 1
                            #print(newest22predvalu[0])

                            dfnewest11predvalues1 = dfnewest1pred.iloc[:,2].values

                            it = len(dfnewest11predvalues1)
                            kt = 0
                            newest11predvalu = []
                            while kt < it:
                                newest11predval = dfnewest11predvalues1[kt]
                                newest11predvalu.append(newest11predval)
                                kt += 1
                            #print(newest11predvalu[0])


                            
                            print(newest1title)
                            print(newest2title)
                            print(newest3title)
                            print(dfnewest1predvalu[0])
                            print(dfnewest2predvalu[0])
                            print(dfnewest3predvalu[0])

                            print(newest3valu)

                            newest1outliers = dfnewest1predvalu
                            newest2outliers = dfnewest2predvalu
                            newest3outliers = dfnewest3predvalu

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes3.csv")


                            residualpreddfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:dfnewest1predvalu}) 
                            residualpreddfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:dfnewest2predvalu}) 
                            residualpreddfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:dfnewest3predvalu}) 


                            residualpreddfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualpreddfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualpreddfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                          



                            

                            return render_template('view 19 3 lines.html',legend=newest1title, oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valu, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valu, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=title2,min=newest1value_min2, max=newest1value_max2, labels=line_labels, values=newest1valu, start=residualstartdate, end=residualenddate, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)

                        elif title2 == newest3title:


                            title2 = 'Error Tried To Add Data Already being Trended'
                            legend=oldoldtitle

                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]


                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1valu2):


                                if newest1valu2[v] == 'f':
                                    x = newest1valu2[v]
                                else:
                                    x = int(newest1valu2[v])

                                if dfnewest1predvalu[v] == 'f':
                                    y = dfnewest1predvalu[v]
                                else:
                                    y = int(dfnewest1predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1





                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                   

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)

                            newest2value_max2 = 1
                            newest2value_min2 = 0


                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2valu2):


                                if newest2valu2[v] == 'f':
                                    x = newest2valu2[v]
                                else:
                                    x = int(newest2valu2[v])

                                if dfnewest2predvalu[v] == 'f':
                                    y = dfnewest2predvalu[v]
                                else:
                                    y = int(dfnewest2predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1


                     


                            


                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)

                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3valu2):


                                if newest3valu2[v] == 'f':
                                    x = newest3valu2[v]
                                else:
                                    x = int(newest3valu2[v])

                                if dfnewest3predvalu[v] == 'f':
                                    y = dfnewest3predvalu[v]
                                else:
                                    y = int(dfnewest3predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1


                

                            
                            print('18.5')

                            newest1outliers = dfnewest1predvalu
                            newest2outliers = dfnewest2predvalu
                            newest3outliers = dfnewest3predvalu

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes3.csv")


                            residualpreddfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:dfnewest1predvalu}) 
                            residualpreddfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:dfnewest2predvalu}) 
                            residualpreddfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:dfnewest3predvalu}) 


                            residualpreddfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualpreddfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualpreddfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")



                            return render_template('view 19 3 lines.html',legend=newest1title, oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valu, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valu, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=title2,min=newest1value_min2, max=newest1value_max2, labels=line_labels, values=newest1valu, start=residualstartdate, end=residualenddate, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)


                        elif title2 == newest1title:

                            title2 = 'Error Tried To Add Data Already being Trended'
                            legend=oldoldtitle

                            newest1ylabelarray2 = str(newest1title).split()
                            newest1ylabel2 = newest1ylabelarray2[-1]

                            

                            newest1it = len(newest1values1)
                            newest1kt = 0
                            newest1valu2 = []
                            while newest1kt < newest1it:
                                newest1val2 = newest1values1[newest1kt]
                                newest1valu2.append(newest1val2)
                                newest1kt += 1
                            print(newest1valu2)

                            newest1valu = newest1valu2

                            newest1z = len(newest1timestamp)
                            newest1y = 0
                            newest1labe = []
                            while newest1y < newest1z:
                                newest1lab = newest1timestamp[newest1y]
                                newest1labe.append(newest1lab)
                                newest1y += 1
                            print(newest1labe)

                            newest1value_max2 = 1
                            newest1value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest1valu2):


                                if newest1valu2[v] == 'f':
                                    x = newest1valu2[v]
                                else:
                                    x = int(newest1valu2[v])

                                if dfnewest1predvalu[v] == 'f':
                                    y = dfnewest1predvalu[v]
                                else:
                                    y = int(dfnewest1predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest1value_max2:
                                        newest1value_max2 = y
                                    elif y < newest1value_min2:
                                        newest1value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest1value_max2:
                                            newest1value_max2 = x
                                        elif x < newest1value_min2:
                                            newest1value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest1value_max2:
                                                newest1value_max2 = x
                                            elif y < newest1value_min2:
                                                newest1value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest1value_min2:
                                                newest1value_min2 = x
                                            elif y > newest1value_max2:
                                                newest1value_max2 = y
                                            else:
                                                v=v
                                v+=1


                            

                            newest2ylabelarray2 = str(newest2title).split()
                            newest2ylabel2 = newest2ylabelarray2[-1]

                            

                            newest2it = len(newest2values1)
                            newest2kt = 0
                            newest2valu2 = []
                            while newest2kt < newest2it:
                                newest2val2 = newest2values1[newest2kt]
                                newest2valu2.append(newest2val2)
                                newest2kt += 1
                            print(newest2valu2)

                            newest2valu = newest2valu2

                            newest2z = len(newest2timestamp)
                            newest2y = 0
                            newest2labe = []
                            while newest2y < newest2z:
                                newest2lab = newest2timestamp[newest2y]
                                newest2labe.append(newest2lab)
                                newest2y += 1
                            print(newest2labe)


                            newest2value_max2 = 1
                            newest2value_min2 = 0


                            v = 0
                            x = 0
                            y=0
                            while v < len(newest2valu2):


                                if newest2valu2[v] == 'f':
                                    x = newest2valu2[v]
                                else:
                                    x = int(newest2valu2[v])

                                if dfnewest2predvalu[v] == 'f':
                                    y = dfnewest2predvalu[v]
                                else:
                                    y = int(dfnewest2predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest2value_max2:
                                        newest2value_max2 = y
                                    elif y < newest2value_min2:
                                        newest2value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest2value_max2:
                                            newest2value_max2 = x
                                        elif x < newest2value_min2:
                                            newest2value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest2value_max2:
                                                newest2value_max2 = x
                                            elif y < newest2value_min2:
                                                newest2value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest2value_min2:
                                                newest2value_min2 = x
                                            elif y > newest2value_max2:
                                                newest2value_max2 = y
                                            else:
                                                v=v
                                v+=1


                            newest3ylabelarray2 = str(newest3title).split()
                            newest3ylabel2 = newest3ylabelarray2[-1]

                            

                            newest3it = len(newest3values1)
                            newest3kt = 0
                            newest3valu2 = []
                            while newest3kt < newest3it:
                                newest3val2 = newest3values1[newest3kt]
                                newest3valu2.append(newest3val2)
                                newest3kt += 1
                            print(newest3valu2)

                            newest3valu = newest3valu2

                            newest3z = len(newest3timestamp)
                            newest3y = 0
                            newest3labe = []
                            while newest3y < newest3z:
                                newest3lab = newest3timestamp[newest3y]
                                newest3labe.append(newest3lab)
                                newest3y += 1
                            print(newest3labe)


                            newest3value_max2 = 1
                            newest3value_min2 = 0

                            v = 0
                            x = 0
                            y=0
                            while v < len(newest3valu2):


                                if newest3valu2[v] == 'f':
                                    x = newest3valu2[v]
                                else:
                                    x = int(newest3valu2[v])

                                if dfnewest3predvalu[v] == 'f':
                                    y = dfnewest3predvalu[v]
                                else:
                                    y = int(dfnewest3predvalu[v])
                                    
                                if x == 'f':
                                    if y == 'f':
                                        print('')
                                    elif y > newest3value_max2:
                                        newest3value_max2 = y
                                    elif y < newest3value_min2:
                                        newest3value_min2 = y
                                    else:
                                        v=v
                                else:
                                    if y == 'f':
                                        if x > newest3value_max2:
                                            newest3value_max2 = x
                                        elif x < newest3value_min2:
                                            newest3value_min2 = x
                                    else:
                                        if x > y:
                                            if x > newest3value_max2:
                                                newest3value_max2 = x
                                            elif y < newest3value_min2:
                                                newest3value_min2 = y
                                            else:
                                                v=v

                                        elif y > x:
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                        else:
                                            
                                            if x < newest3value_min2:
                                                newest3value_min2 = x
                                            elif y > newest3value_max2:
                                                newest3value_max2 = y
                                            else:
                                                v=v
                                v+=1

                            
                            
                            print('19')

                            newest1outliers = dfnewest1predvalu
                            newest2outliers = dfnewest2predvalu
                            newest3outliers = dfnewest3predvalu

                            residualdfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:newest1valu2}) 
                            residualdfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:newest2valu2}) 
                            residualdfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:newest3valu2}) 


                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")

                            newest1residualaxisvaluesdf = pd.DataFrame({'min':[newest1value_min2], 'max':[newest1value_max2]}) 
                            newest2residualaxisvaluesdf = pd.DataFrame({'min':[newest2value_min2], 'max':[newest2value_max2]}) 
                            newest3residualaxisvaluesdf = pd.DataFrame({'min':[newest3value_min2], 'max':[newest3value_max2]})


                            newest1residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                            newest2residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                            newest3residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                            residualdfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                            residualdfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                            residualdfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes3.csv")


                            residualpreddfnewest1 = pd.DataFrame({'timestamp':newest1timestamp, newest1title:dfnewest1predvalu}) 
                            residualpreddfnewest2 = pd.DataFrame({'timestamp':newest2timestamp, newest2title:dfnewest2predvalu}) 
                            residualpreddfnewest3 = pd.DataFrame({'timestamp':newest3timestamp, newest3title:dfnewest3predvalu}) 


                            residualpreddfnewest1.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                            residualpreddfnewest2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                            residualpreddfnewest3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")

                            residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                            residualaxismeterid3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                            residualaxismeterid4.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                            
                            return render_template('view 19 3 lines.html',legend=newest1title, oldoldoutlier=newest3outliers, oldoutlier=newest2outliers, outlier=newest1outliers, oldvalues=newest2valu, oldtitle=newest2title, oldmin=newest2value_min2, oldmax=newest2value_max2, oldoldvalues=newest3valu, oldoldtitle=newest3title, oldoldmin=newest3value_min2, oldoldmax=newest3value_max2, title=title2,min=newest1value_min2, max=newest1value_max2, labels=line_labels, values=newest1valu, start=residualstartdate, end=residualenddate, ylabel=newest1ylabel2, oldylabel=newest2ylabel2, oldoldylabel=newest3ylabel2)


                        else:
                            print('20')
                            return render_template('view 19 3 lines.html',legend=legend, oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=outliers, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, oldoldvalues=oldoldvalus, oldoldtitle=oldoldtitle, oldoldmin=oldoldvalue_min, oldoldmax=oldoldvalue_max, title=title2,min=value_min, max=value_max, labels=line_labels, values=line_values, building=Building_name, floor=Floor_name, para=parameterwifi, start=residualstartdate, end=residualenddate, ylabel=parameterwifititle, xmin=xmin, xmax=xmax, oldylabel=oldylabel, oldoldylabel=oldoldylabel)

                

        elif testbutton == 'submitadjustment':
            print('adjust')
            dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
            oldvalues1 = dfold.iloc[:,2].values
            oldtimestamp = dfold.iloc[:,1].values
            oldtitle = dfold.columns[2]
            print(oldvalues1)
            #print(oldtimestamp)
            #print(oldtitle)

            oldylabelarray = str(oldtitle).split()
            oldylabel = oldylabelarray[-1]


            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

            it = len(dfoldpredvalues1)
            kt = 0
            oldpredvalu = []
            while kt < it:
                oldpredval = dfoldpredvalues1[kt]
                oldpredvalu.append(oldpredval)
                kt += 1
            print(oldpredvalu)

            reset_max = 1
            reset_min = 0

            v = 0
            x = 0
            y=0
            while v < len(oldvalues1):


                if oldvalues1[v] == 'f':
                    x = oldvalues1[v]
                else:
                    x = int(oldvalues1[v])

                if oldpredvalu[v] == 'f':
                    y = oldpredvalu[v]
                else:
                    #print(type(oldpredvalu[v]))
                    y = int(float(oldpredvalu[v]))
                                
                if x == 'f':
                    if y == 'f':
                        print('')
                    elif y > reset_max:
                        reset_max = y
                    elif y < reset_min:
                        reset_min = y
                    else:
                        v=v
                else:
                    if y == 'f':
                        if x > reset_max:
                            reset_max = x
                        elif x < reset_min:
                            reset_min = x
                    else:
                        if x > y:
                            if x > reset_max:
                                reset_max = x
                            elif y < reset_min:
                                reset_min = y
                            else:
                                v=v

                        elif y > x:
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                        else:
                                        
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                v+=1

            

            #oldvalue_max = oldvalues1.max()
            #oldvalue_min = oldvalues1.min()

            #print(oldvalue_max)
            #print(oldvalue_min)
            #print(oldylabel)
            #if oldvalue_min == 0:
                #oldvalue_min = oldvalue_min
            #else:
                #oldvalue_min = oldvalue_min

            it = len(oldvalues1)
            kt = 0
            oldvalu = []
            while kt < it:
                oldval = oldvalues1[kt]
                oldvalu.append(oldval)
                kt += 1
            print(oldvalu)

            z = len(oldtimestamp)
            y = 0
            labe = []
            while y < z:
                lab = oldtimestamp[y]
                labe.append(lab)
                y += 1
            print(labe)

            titless2 = oldtitle

            

            
            value_min = request.form.get('adjustmin')
            value_max = request.form.get('adjustmax')
            print(value_min)
            

            if value_min == '':
                value_min = reset_min
            else:
                value_min = value_min
            if value_max == '':
                value_max = reset_max
            else:
                value_max = value_max


            line_labels = labe
            line_values = oldvalu

            residualstartdate = labe[0]
            residualenddate = labe[-1]

            residualstartdate = residualstartdate.replace(' ', 'T')
            residualenddate = residualenddate.replace(' ', 'T')

            print(residualstartdate)
            print(residualenddate)

        


            line_values=oldvalu
            line_outliers=oldpredvalu

            residualstartdate = request.form.get('starttime')
            residualenddate = request.form.get('endtime')

            print(residualstartdate)
            print(residualenddate)




            return render_template('view 19.html', outlier=line_outliers, title=titless2,min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=oldylabel)

        elif testbutton == 'submitadjustmentnew':
            print('adjust')
            dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
            oldvalues1 = dfold.iloc[:,2].values
            oldtimestamp = dfold.iloc[:,1].values
            oldtitle = dfold.columns[2]
            #print(oldvalues1)
            #print(oldtimestamp)
            #print(oldtitle)

            oldylabelarray = str(oldtitle).split()
            oldylabel = oldylabelarray[-1]

            oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
            oldvalue_max = oldaxisdf.iloc[0,2]
            oldvalue_min = oldaxisdf.iloc[0,1]
            
            oldvalue_max = oldvalue_max

            #print(oldvalue_max)
            #print(oldvalue_min)
            #print(oldylabel)
            if oldvalue_min == 0:
                oldvalue_min = oldvalue_min
            else:
                oldvalue_min = oldvalue_min 

            oldit = len(oldvalues1)
            oldkt = 0
            oldvalu = []
            while oldkt < oldit:
                oldval = oldvalues1[oldkt]
                oldvalu.append(oldval)
                oldkt += 1
            #print(oldvalu)

            oldz = len(oldtimestamp)
            oldy = 0
            oldlabe = []
            while oldy < oldz:
                oldlab = oldtimestamp[oldy]
                oldlabe.append(oldlab)
                oldy += 1
            #print(oldlabe)

            oldtitle2 = oldtitle

            
            df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
            values1 = df.iloc[:,2].values
            timestamp = df.iloc[:,1].values
            title = df.columns[2]
            #print(values1)
            #print(timestamp)
            #print(title)

            ylabelarray = str(title).split()
            ylabel = ylabelarray[-1]

            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
            dfpredvalues1 = dfpred.iloc[:,2].values

            it = len(dfpredvalues1)
            kt = 0
            predvalu = []
            while kt < it:
                predval = dfpredvalues1[kt]
                predvalu.append(predval)
                kt += 1
            #print(predvalu)

            reset_max = 1
            reset_min = 0

            v = 0
            x = 0
            y=0
            while v < len(values1):


                if values1[v] == 'f':
                    x = values1[v]
                else:
                    x = int(values1[v])

                if predvalu[v] == 'f':
                    y = predvalu[v]
                else:
                    y = int(predvalu[v])
                                
                if x == 'f':
                    if y == 'f':
                        print('')
                    elif y > reset_max:
                        reset_max = y
                    elif y < reset_min:
                        reset_min = y
                    else:
                        v=v
                else:
                    if y == 'f':
                        if x > reset_max:
                            reset_max = x
                        elif x < reset_min:
                            reset_min = x
                    else:
                        if x > y:
                            if x > reset_max:
                                reset_max = x
                            elif y < reset_min:
                                reset_min = y
                            else:
                                v=v

                        elif y > x:
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                        else:
                                        
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                v+=1

            
            it = len(values1)
            kt = 0
            valu = []
            while kt < it:
                val = values1[kt]
                valu.append(val)
                kt += 1
            #print(valu)

            z = len(timestamp)
            y = 0
            labe = []
            while y < z:
                lab = timestamp[y]
                labe.append(lab)
                y += 1
            #print(labe)

            titless2 = title

            
            value_min = request.form.get('adjustmin')
            value_max = request.form.get('adjustmax')
            #print(value_min)
            

            if value_min == '':
                value_min = reset_min
            else:
                value_min = value_min
            if value_max == '':
                value_max = reset_max
            else:
                value_max = value_max


            line_labels = labe
            line_values = valu

            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

            it = len(dfoldpredvalues1)
            kt = 0
            oldpredvalu = []
            while kt < it:
                oldpredval = dfoldpredvalues1[kt]
                oldpredvalu.append(oldpredval)
                kt += 1
            #print(oldpredvalu)

            

            
            


            

            residualstartdate = labe[0]
            residualenddate = labe[-1]

            residualstartdate = residualstartdate.replace(' ', 'T')
            residualenddate = residualenddate.replace(' ', 'T')

            #print(oldvalu)
            #print(oldtitle2)
            #print(oldvalue_min)
            #print(oldvalue_max)
            #print(titless2)
            #print(value_min)
            #print(value_max)



            residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
            residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old



            residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")





            

            line_values = valu
            oldvalus = oldvalu

            outliers = predvalu
            oldoutliers = oldpredvalu

            residualstartdate = request.form.get('starttime')
            residualenddate = request.form.get('endtime')

            print(residualstartdate)
            print(residualenddate)

            

            


            return render_template('view 19 2 lines.html', labels=line_labels, oldoutlier=oldoutliers, outlier=outliers, oldvalues=oldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, oldlabels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldylabel=oldylabel)


        elif testbutton == 'submitadjustmentold':
            print('adjust')
            dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
            oldvalues1 = dfold.iloc[:,2].values
            oldtimestamp = dfold.iloc[:,1].values
            oldtitle = dfold.columns[2]
            #print(oldvalues1)
            #print(oldtimestamp)
            #print(oldtitle)

            oldylabelarray = str(oldtitle).split()
            oldylabel = oldylabelarray[-1]

            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

            it = len(dfoldpredvalues1)
            kt = 0
            oldpredvalu = []
            while kt < it:
                oldpredval = dfoldpredvalues1[kt]
                oldpredvalu.append(oldpredval)
                kt += 1
            #print(oldpredvalu)

            reset_max = 1
            reset_min = 0

            v = 0
            x = 0
            y=0
            while v < len(oldvalues1):


                if oldvalues1[v] == 'f':
                    x = oldvalues1[v]
                else:
                    x = int(oldvalues1[v])

                if oldpredvalu[v] == 'f':
                    y = oldpredvalu[v]
                else:
                    y = int(oldpredvalu[v])
                                
                if x == 'f':
                    if y == 'f':
                        print('')
                    elif y > reset_max:
                        reset_max = y
                    elif y < reset_min:
                        reset_min = y
                    else:
                        v=v
                else:
                    if y == 'f':
                        if x > reset_max:
                            reset_max = x
                        elif x < reset_min:
                            reset_min = x
                    else:
                        if x > y:
                            if x > reset_max:
                                reset_max = x
                            elif y < reset_min:
                                reset_min = y
                            else:
                                v=v

                        elif y > x:
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                        else:
                                        
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                v+=1

            


            oldit = len(oldvalues1)
            oldkt = 0
            oldvalu = []
            while oldkt < oldit:
                oldval = oldvalues1[oldkt]
                oldvalu.append(oldval)
                oldkt += 1
            #print(oldvalu)

            oldz = len(oldtimestamp)
            oldy = 0
            oldlabe = []
            while oldy < oldz:
                oldlab = oldtimestamp[oldy]
                oldlabe.append(oldlab)
                oldy += 1
            #print(oldlabe)

            oldtitle2 = oldtitle

            
            df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
            values1 = df.iloc[:,2].values
            timestamp = df.iloc[:,1].values
            title = df.columns[2]
            #print(values1)
            #print(timestamp)
            #print(title)

            ylabelarray = str(title).split()
            ylabel = ylabelarray[-1]

            axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            value_max = axisdf.iloc[0,2]
            value_min = axisdf.iloc[0,1]
            
            #oldvalue_max = oldvalue_max

            #print(value_max)
            #print(value_min)
            #print(ylabel)
            if value_min == 0:
                value_min = value_min
            else:
                value_min = value_min

            it = len(values1)
            kt = 0
            valu = []
            while kt < it:
                val = values1[kt]
                valu.append(val)
                kt += 1
            #print(valu)

            z = len(timestamp)
            y = 0
            labe = []
            while y < z:
                lab = timestamp[y]
                labe.append(lab)
                y += 1
            #print(labe)

            titless2 = title

            
            oldvalue_min = request.form.get('adjustmin')
            oldvalue_max = request.form.get('adjustmax')
            #print(oldvalue_min)
            

            if oldvalue_min == '':
                oldvalue_min = reset_min
            else:
                oldvalue_min = oldvalue_min
            if oldvalue_max == '':
                oldvalue_max = reset_max
            else:
                oldvalue_max = oldvalue_max


            line_labels = labe
            line_values = valu

            

            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
            dfpredvalues1 = dfpred.iloc[:,2].values

            it = len(dfpredvalues1)
            kt = 0
            predvalu = []
            while kt < it:
                predval = dfpredvalues1[kt]
                predvalu.append(predval)
                kt += 1
            #print(predvalu)

            
            


            

            residualstartdate = labe[0]
            residualenddate = labe[-1]

            residualstartdate = residualstartdate.replace(' ', 'T')
            residualenddate = residualenddate.replace(' ', 'T')

            print(oldvalu)
            print(oldtitle2)
            print(oldvalue_min)
            print(oldvalue_max)
            print(titless2)
            print(value_min)
            print(value_max)

            residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
            residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old



            residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")

            print(predvalu)
            print(valu)
            print(oldpredvalu)
            print(oldvalu)

            line_values = valu


            line_values = valu
            oldvalus = oldvalu

            outliers = predvalu
            oldoutliers = oldpredvalu

            residualstartdate = request.form.get('starttime')
            residualenddate = request.form.get('endtime')

            print(residualstartdate)
            print(residualenddate)

            print(outliers)
            print(oldoutliers)
            print(line_values)
            print(oldvalus)


            


            return render_template('view 19 2 lines.html', labels=line_labels, oldoutlier=oldoutliers, outlier=outliers, oldvalues=oldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, oldlabels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldylabel=oldylabel)





            
        elif testbutton == 'submitadjustmentnew3':
            print('adjust')
            dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
            oldvalues1 = dfold.iloc[:,2].values
            oldtimestamp = dfold.iloc[:,1].values
            oldtitle = dfold.columns[2]
            print(oldvalues1)
            #print(oldtimestamp)
            #print(oldtitle)

            oldylabelarray = str(oldtitle).split()
            oldylabel = oldylabelarray[-1]

            oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
            oldvalue_max = oldaxisdf.iloc[0,2]
            oldvalue_min = oldaxisdf.iloc[0,1]
            
            oldvalue_max = oldvalue_max

            print(oldvalue_max)
            print(oldvalue_min)
            #print(oldylabel)
            if oldvalue_min == 0:
                oldvalue_min = oldvalue_min
            else:
                oldvalue_min = oldvalue_min

            oldit = len(oldvalues1)
            oldkt = 0
            oldvalu = []
            while oldkt < oldit:
                oldval = oldvalues1[oldkt]
                oldvalu.append(oldval)
                oldkt += 1
            print(oldvalu)

            oldz = len(oldtimestamp)
            oldy = 0
            oldlabe = []
            while oldy < oldz:
                oldlab = oldtimestamp[oldy]
                oldlabe.append(oldlab)
                oldy += 1
            print(oldlabe)

            oldtitle2 = oldtitle


            dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
            oldoldvalues1 = dfoldold.iloc[:,2].values
            oldoldtimestamp = dfoldold.iloc[:,1].values
            oldoldtitle = dfoldold.columns[2]
            print(oldoldvalues1)
            #print(oldoldtimestamp)
            #print(oldoldtitle)

            oldoldylabelarray = str(oldoldtitle).split()
            oldoldylabel = oldoldylabelarray[-1]

            oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
            oldoldvalue_max = oldoldaxisdf.iloc[0,2]
            oldoldvalue_min = oldoldaxisdf.iloc[0,1]
            
            oldoldvalue_max = oldoldvalue_max

            print(oldoldvalue_max)
            print(oldoldvalue_min)
            #print(oldoldylabel)
            if oldoldvalue_min == 0:
                oldoldvalue_min = oldoldvalue_min
            else:
                oldoldvalue_min = oldoldvalue_min

            oldoldit = len(oldvalues1)
            oldoldkt = 0
            oldoldvalu = []
            while oldoldkt < oldoldit:
                oldoldval = oldoldvalues1[oldoldkt]
                oldoldvalu.append(oldoldval)
                oldoldkt += 1
            print(oldoldvalu)

            oldoldz = len(oldoldtimestamp)
            oldoldy = 0
            oldoldlabe = []
            while oldoldy < oldoldz:
                oldoldlab = oldoldtimestamp[oldoldy]
                oldoldlabe.append(oldoldlab)
                oldoldy += 1
            print(oldoldlabe)

            oldoldtitle2 = oldoldtitle

            
            df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
            values1 = df.iloc[:,2].values
            timestamp = df.iloc[:,1].values
            title = df.columns[2]
            print(values1)
            #print(timestamp)
            #print(title)

            ylabelarray = str(title).split()
            ylabel = ylabelarray[-1]

            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
            dfpredvalues1 = dfpred.iloc[:,2].values

            it = len(dfpredvalues1)
            kt = 0
            predvalu = []
            while kt < it:
                predval = dfpredvalues1[kt]
                predvalu.append(predval)
                kt += 1
            #print(predvalu)

            reset_max = 1
            reset_min = 0

            v = 0
            x = 0
            y=0
            while v < len(values1):


                if values1[v] == 'f':
                    x = values1[v]
                else:
                    x = int(values1[v])

                if predvalu[v] == 'f':
                    y = predvalu[v]
                else:
                    y = int(predvalu[v])
                                
                if x == 'f':
                    if y == 'f':
                        print('')
                    elif y > reset_max:
                        reset_max = y
                    elif y < reset_min:
                        reset_min = y
                    else:
                        v=v
                else:
                    if y == 'f':
                        if x > reset_max:
                            reset_max = x
                        elif x < reset_min:
                            reset_min = x
                    else:
                        if x > y:
                            if x > reset_max:
                                reset_max = x
                            elif y < reset_min:
                                reset_min = y
                            else:
                                v=v

                        elif y > x:
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                        else:
                                        
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                v+=1

    

            it = len(values1)
            kt = 0
            valu = []
            while kt < it:
                val = values1[kt]
                valu.append(val)
                kt += 1
            print(valu)

            z = len(timestamp)
            y = 0
            labe = []
            while y < z:
                lab = timestamp[y]
                labe.append(lab)
                y += 1
            print(labe)

            titless2 = title

            
            value_min = request.form.get('adjustmin')
            value_max = request.form.get('adjustmax')
            print(value_min)
            

            if value_min == '':
                value_min = reset_min
            else:
                value_min = value_min
            if value_max == '':
                value_max = reset_max
            else:
                value_max = value_max


            line_labels = labe
            line_values = valu

            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

            it = len(dfoldoldpredvalues1)
            kt = 0
            oldoldpredvalu = []
            while kt < it:
                oldoldpredval = dfoldoldpredvalues1[kt]
                oldoldpredvalu.append(oldoldpredval)
                kt += 1
            #print(oldoldpredvalu)

            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

            it = len(dfoldpredvalues1)
            kt = 0
            oldpredvalu = []
            while kt < it:
                oldpredval = dfoldpredvalues1[kt]
                oldpredvalu.append(oldpredval)
                kt += 1
            #print(oldpredvalu)

            


            
            


            

            residualstartdate = labe[0]
            residualenddate = labe[-1]

            residualstartdate = residualstartdate.replace(' ', 'T')
            residualenddate = residualenddate.replace(' ', 'T')

            print(oldvalu)
            print(oldtitle2)
            print(oldvalue_min)
            print(oldvalue_max)
            print(titless2)
            print(value_min)
            print(value_max)



            residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
            residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
            residualaxisvaluesdf3 = pd.DataFrame({'min':[oldoldvalue_min], 'max':[oldoldvalue_max]}) #oldold



            residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")


            

            

            line_values = valu
            oldvalus = oldvalu
            oldoldvalus = oldoldvalu

            oldoldoutliers = oldpredvalu
            oldoutliers = oldoldpredvalu
            outliers = predvalu

            residualstartdate = request.form.get('starttime')
            residualenddate = request.form.get('endtime')

            print(residualstartdate)
            print(residualenddate)



            print(oldoldoutliers)
            print(oldoutliers)
            print(oldoldvalus)
            print(oldvalus)

          
          

            return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers,  oldoldvalues=oldoldvalus, oldoldtitle=oldoldtitle, oldoldmin=oldoldvalue_min, oldoldmax=oldoldvalue_max, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldoldylabel=oldoldylabel, oldylabel=oldylabel)



        elif testbutton == 'submitadjustmentold3':
            print('adjust')
            df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
            values1 = df.iloc[:,2].values
            timestamp = df.iloc[:,1].values
            title = df.columns[2]
            print(values1)
            #print(timestamp)
            #print(title)

            ylabelarray = str(title).split()
            ylabel = ylabelarray[-1]

            axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            value_max = axisdf.iloc[0,2]
            value_min = axisdf.iloc[0,1]
            
            value_max = value_max

            print(value_max)
            print(value_min)
            #print(ylabel)
            if value_min == 0:
                value_min = value_min
            else:
                value_min = value_min

            it = len(values1)
            kt = 0
            valu = []
            while kt < it:
                val = values1[kt]
                valu.append(val)
                kt += 1
            print(valu)

            z = len(timestamp)
            y = 0
            labe = []
            while y < z:
                lab = timestamp[y]
                labe.append(lab)
                y += 1
            print(labe)

            title2 = title


            dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
            oldoldvalues1 = dfoldold.iloc[:,2].values
            oldoldtimestamp = dfoldold.iloc[:,1].values
            oldoldtitle = dfoldold.columns[2]
            print(oldoldvalues1)
            #print(oldoldtimestamp)
            #print(oldoldtitle)

            oldoldylabelarray = str(oldoldtitle).split()
            oldoldylabel = oldoldylabelarray[-1]

            oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
            oldoldvalue_max = oldoldaxisdf.iloc[0,2]
            oldoldvalue_min = oldoldaxisdf.iloc[0,1]
            
            oldoldvalue_max = oldoldvalue_max

            print(oldoldvalue_max)
            print(oldoldvalue_min)
            #print(oldoldylabel)
            if oldoldvalue_min == 0:
                oldoldvalue_min = oldoldvalue_min
            else:
                oldoldvalue_min = oldoldvalue_min

            oldoldit = len(oldoldvalues1)
            oldoldkt = 0
            oldoldvalu = []
            while oldoldkt < oldoldit:
                oldoldval = oldoldvalues1[oldoldkt]
                oldoldvalu.append(oldoldval)
                oldoldkt += 1
            print(oldoldvalu)

            oldoldz = len(oldoldtimestamp)
            oldoldy = 0
            oldoldlabe = []
            while oldoldy < oldoldz:
                oldoldlab = oldoldtimestamp[oldoldy]
                oldoldlabe.append(oldoldlab)
                oldoldy += 1
            print(oldoldlabe)

            oldoldtitle2 = oldoldtitle

            
            dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
            oldvalues1 = dfold.iloc[:,2].values
            oldtimestamp = dfold.iloc[:,1].values
            oldtitle = dfold.columns[2]
            print(oldvalues1)
            #print(oldtimestamp)
            #print(oldtitle)

            oldylabelarray = str(oldtitle).split()
            oldylabel = oldylabelarray[-1]

            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

            it = len(dfoldoldpredvalues1)
            kt = 0
            oldoldpredvalu = []
            while kt < it:
                oldoldpredval = dfoldoldpredvalues1[kt]
                oldoldpredvalu.append(oldoldpredval)
                kt += 1
            #print(oldoldpredvalu)

            reset_max = 1
            reset_min = 0

            v = 0
            x = 0
            y=0
            while v < len(oldvalues1):


                if oldvalues1[v] == 'f':
                    x = oldvalues1[v]
                else:
                    x = int(oldvalues1[v])

                if oldoldpredvalu[v] == 'f':
                    y = oldoldpredvalu[v]
                else:
                    y = int(oldoldpredvalu[v])
                                
                if x == 'f':
                    if y == 'f':
                        print('')
                    elif y > reset_max:
                        reset_max = y
                    elif y < reset_min:
                        reset_min = y
                    else:
                        v=v
                else:
                    if y == 'f':
                        if x > reset_max:
                            reset_max = x
                        elif x < reset_min:
                            reset_min = x
                    else:
                        if x > y:
                            if x > reset_max:
                                reset_max = x
                            elif y < reset_min:
                                reset_min = y
                            else:
                                v=v

                        elif y > x:
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                        else:
                                        
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                v+=1

            oldvalue_max = oldvalues1.max()
            oldvalue_min = oldvalues1.min()

            #print(value_max)
            #print(value_min)
            #print(ylabel)
            if oldvalue_min == 0:
                oldvalue_min = oldvalue_min
            else:
                oldvalue_min = oldvalue_min

            oldit = len(oldvalues1)
            oldkt = 0
            oldvalu = []
            while oldkt < oldit:
                oldval = oldvalues1[oldkt]
                oldvalu.append(oldval)
                oldkt += 1
            print(oldvalu)

            oldz = len(oldtimestamp)
            oldy = 0
            oldlabe = []
            while oldy < oldz:
                oldlab = oldtimestamp[oldy]
                oldlabe.append(oldlab)
                oldy += 1
            print(oldlabe)

            titless2 = title

            
            oldvalue_min = request.form.get('adjustmin')
            oldvalue_max = request.form.get('adjustmax')
            print(oldvalue_min)
            

            if oldvalue_min == '':
                oldvalue_min = reset_min
            else:
                oldvalue_min = oldvalue_min
            if oldvalue_max == '':
                oldvalue_max = reset_max
            else:
                oldvalue_max = oldvalue_max


            line_labels = labe
            line_values = valu

            

            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

            it = len(dfoldpredvalues1)
            kt = 0
            oldpredvalu = []
            while kt < it:
                oldpredval = dfoldpredvalues1[kt]
                oldpredvalu.append(oldpredval)
                kt += 1
            #print(oldpredvalu)

            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
            dfpredvalues1 = dfpred.iloc[:,2].values

            it = len(dfpredvalues1)
            kt = 0
            predvalu = []
            while kt < it:
                predval = dfpredvalues1[kt]
                predvalu.append(predval)
                kt += 1
            #print(predvalu)

            
            


            

            residualstartdate = oldlabe[0]
            residualenddate = oldlabe[-1]

            residualstartdate = residualstartdate.replace(' ', 'T')
            residualenddate = residualenddate.replace(' ', 'T')




            residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
            residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
            residualaxisvaluesdf3 = pd.DataFrame({'min':[oldoldvalue_min], 'max':[oldoldvalue_max]}) #oldold



            residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")


          
            
            line_values = valu
            oldvalus = oldvalu
            oldoldvalus = oldoldvalu

            oldoldoutliers = oldpredvalu
            oldoutliers = oldoldpredvalu
            outliers = predvalu

            residualstartdate = request.form.get('starttime')
            residualenddate = request.form.get('endtime')

            print(residualstartdate)
            print(residualenddate)








            return render_template('view 19 3 lines.html', oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=outliers,  oldoldvalues=oldoldvalus, oldoldtitle=oldoldtitle, oldoldmin=oldoldvalue_min, oldoldmax=oldoldvalue_max, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldoldylabel=oldoldylabel, oldylabel=oldylabel)



        elif testbutton == 'submitadjustmentoldold3':
            print('adjust')
            df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
            values1 = df.iloc[:,2].values
            timestamp = df.iloc[:,1].values
            title = df.columns[2]
            print(values1)
            print(timestamp)
            print(title)

            ylabelarray = str(title).split()
            ylabel = ylabelarray[-1]

            axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            value_max = axisdf.iloc[0,2]
            value_min = axisdf.iloc[0,1]
            
            value_max = value_max

            print(value_max)
            print(value_min)
            print(ylabel)
            if value_min == 0:
                value_min = value_min
            else:
                value_min = value_min

            it = len(values1)
            kt = 0
            valu = []
            while kt < it:
                val = values1[kt]
                valu.append(val)
                kt += 1
            print(valu)

            z = len(timestamp)
            y = 0
            labe = []
            while y < z:
                lab = timestamp[y]
                labe.append(lab)
                y += 1
            print(labe)

            title2 = title


            dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
            oldvalues1 = dfold.iloc[:,2].values
            oldtimestamp = dfold.iloc[:,1].values
            oldtitle = dfold.columns[2]
            print(oldvalues1)
            #print(oldtimestamp)
            #print(oldtitle)

            oldylabelarray = str(oldtitle).split()
            oldylabel = oldylabelarray[-1]

            oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
            oldvalue_max = oldaxisdf.iloc[0,2]
            oldvalue_min = oldaxisdf.iloc[0,1]
            
            oldvalue_max = oldvalue_max

            print(oldvalue_max)
            print(oldvalue_min)
            #print(oldylabel)
            if oldvalue_min == 0:
                oldvalue_min = oldvalue_min
            else:
                oldvalue_min = oldvalue_min

            oldit = len(oldvalues1)
            oldkt = 0
            oldvalu = []
            while oldkt < oldit:
                oldval = oldvalues1[oldkt]
                oldvalu.append(oldval)
                oldkt += 1
            print(oldvalu)

            oldz = len(oldtimestamp)
            oldy = 0
            oldlabe = []
            while oldy < oldz:
                oldlab = oldtimestamp[oldy]
                oldlabe.append(oldlab)
                oldy += 1
            print(oldlabe)

            oldtitle2 = oldtitle

            
            dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
            oldoldvalues1 = dfoldold.iloc[:,2].values
            oldoldtimestamp = dfoldold.iloc[:,1].values
            oldoldtitle = dfoldold.columns[2]
            print(oldoldvalues1)
            #print(oldoldtimestamp)
            #print(oldoldtitle)

            oldoldylabelarray = str(oldoldtitle).split()
            oldoldylabel = oldoldylabelarray[-1]

            dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
            dfoldpredvalues1 = dfoldpred.iloc[:,2].values

            it = len(dfoldpredvalues1)
            kt = 0
            oldpredvalu = []
            while kt < it:
                oldpredval = dfoldpredvalues1[kt]
                oldpredvalu.append(oldpredval)
                kt += 1
            #print(oldpredvalu)

            reset_max = 1
            reset_min = 0

            v = 0
            x = 0
            y=0
            while v < len(oldoldvalues1):


                if oldoldvalues1[v] == 'f':
                    x = oldoldvalues1[v]
                else:
                    x = int(oldoldvalues1[v])

                if oldpredvalu[v] == 'f':
                    y = oldpredvalu[v]
                else:
                    y = int(oldpredvalu[v])
                                
                if x == 'f':
                    if y == 'f':
                        print('')
                    elif y > reset_max:
                        reset_max = y
                    elif y < reset_min:
                        reset_min = y
                    else:
                        v=v
                else:
                    if y == 'f':
                        if x > reset_max:
                            reset_max = x
                        elif x < reset_min:
                            reset_min = x
                    else:
                        if x > y:
                            if x > reset_max:
                                reset_max = x
                            elif y < reset_min:
                                reset_min = y
                            else:
                                v=v

                        elif y > x:
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                        else:
                                        
                            if x < reset_min:
                                reset_min = x
                            elif y > reset_max:
                                reset_max = y
                            else:
                                v=v
                v+=1


            oldoldvalue_max = oldoldvalues1.max()
            oldoldvalue_min = oldoldvalues1.min()

            #print(value_max)
            #print(value_min)
            #print(ylabel)
            if oldoldvalue_min == 0:
                oldoldvalue_min = oldoldvalue_min
            else:
                oldoldvalue_min = oldoldvalue_min

            oldoldit = len(oldoldvalues1)
            oldoldkt = 0
            oldoldvalu = []
            while oldoldkt < oldoldit:
                oldoldval = oldoldvalues1[oldoldkt]
                oldoldvalu.append(oldoldval)
                oldoldkt += 1
            print(oldoldvalu)

            oldoldz = len(oldoldtimestamp)
            oldoldy = 0
            oldoldlabe = []
            while oldoldy < oldoldz:
                oldoldlab = oldoldtimestamp[oldoldy]
                oldoldlabe.append(oldoldlab)
                oldoldy += 1
            print(oldoldlabe)

            titless2 = title

            
            oldoldvalue_min = request.form.get('adjustmin')
            oldoldvalue_max = request.form.get('adjustmax')
            print(oldoldvalue_min)
            

            if oldoldvalue_min == '':
                oldoldvalue_min = reset_min
            else:
                oldoldvalue_min = oldoldvalue_min
            if oldoldvalue_max == '':
                oldoldvalue_max = reset_max
            else:
                oldoldvalue_max = oldoldvalue_max


            line_labels = labe
            line_values = valu

            dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
            dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

            it = len(dfoldoldpredvalues1)
            kt = 0
            oldoldpredvalu = []
            while kt < it:
                oldoldpredval = dfoldoldpredvalues1[kt]
                oldoldpredvalu.append(oldoldpredval)
                kt += 1
            #print(oldoldpredvalu)

            

            dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
            dfpredvalues1 = dfpred.iloc[:,2].values

            it = len(dfpredvalues1)
            kt = 0
            predvalu = []
            while kt < it:
                predval = dfpredvalues1[kt]
                predvalu.append(predval)
                kt += 1
            #print(predvalu)

            
            


            

            residualstartdate = oldlabe[0]
            residualenddate = oldlabe[-1]

            residualstartdate = residualstartdate.replace(' ', 'T')
            residualenddate = residualenddate.replace(' ', 'T')




            residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
            residualaxisvaluesdf2 = pd.DataFrame({'min':[oldvalue_min], 'max':[oldvalue_max]}) #old
            residualaxisvaluesdf3 = pd.DataFrame({'min':[oldoldvalue_min], 'max':[oldoldvalue_max]}) #oldold



            residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
            residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
            residualaxisvaluesdf3.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

            
            print(residualaxisvaluesdf)
            print(residualaxisvaluesdf2)
            print(residualaxisvaluesdf3)

           

            line_values = valu
            oldvalus = oldvalu
            oldoldvalus = oldoldvalu

            oldoldoutliers = oldpredvalu
            oldoutliers = oldoldpredvalu
            outliers = predvalu

            residualstartdate = request.form.get('starttime')
            residualenddate = request.form.get('endtime')

            print(residualstartdate)
            print(residualenddate)

            print(oldoutliers)
            print(oldoldoutliers)

            
            





          
            #return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldoldtitle, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, oldoldvalues=oldvalus, oldoldtitle=oldtitle, oldoldmin=oldvalue_min, oldoldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldoldylabel=oldylabel, oldylabel=oldoldylabel)
            return render_template('view 19 3 lines.html', oldoldoutlier=oldoutliers, oldoutlier=oldoldoutliers, outlier=outliers,  oldoldvalues=oldoldvalus, oldoldtitle=oldoldtitle, oldoldmin=oldoldvalue_min, oldoldmax=oldoldvalue_max, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldoldylabel=oldoldylabel, oldylabel=oldylabel)



        elif testbutton == 'compare':
            altype = request.form.get('compareselection0')
            #print(altype)

            if altype == 'Compare':
                #print('Compare')

                compare1 = request.form.get('compareselection1')
                compare2 = request.form.get('compareselection2')

                print(compare1)
                print(compare2)

                df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                values1 = df.iloc[:,2].values
                timestamp = df.iloc[:,1].values
                title = df.columns[2]
                #print(values1)
                #print(timestamp)
                print(title)

                ylabelarray = str(title).split()
                ylabel = ylabelarray[-1]


                it = len(values1)
                kt = 0
                valu = []
                while kt < it:
                    val = values1[kt]
                    valu.append(val)
                    kt += 1
                #print(valu)

                z = len(timestamp)
                y = 0
                labe = []
                while y < z:
                    lab = timestamp[y]
                    labe.append(lab)
                    y += 1
                #print(labe)



                dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                oldvalues1 = dfold.iloc[:,2].values
                oldtimestamp = dfold.iloc[:,1].values
                oldtitle = dfold.columns[2]
                #print(oldvalues1)
                #print(oldtimestamp)
                print(oldtitle)

                oldylabelarray = str(oldtitle).split()
                oldylabel = oldylabelarray[-1]



                oldit = len(oldvalues1)
                oldkt = 0
                oldvalu = []
                while oldkt < oldit:
                    oldval = oldvalues1[oldkt]
                    oldvalu.append(oldval)
                    oldkt += 1
                #print(oldvalu)

                oldz = len(oldtimestamp)
                oldy = 0
                oldlabe = []
                while oldy < oldz:
                    oldlab = oldtimestamp[oldy]
                    oldlabe.append(oldlab)
                    oldy += 1
                #print(oldlabe)



                dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                oldoldvalues1 = dfoldold.iloc[:,2].values
                oldoldtimestamp = dfoldold.iloc[:,1].values
                oldoldtitle = dfoldold.columns[2]
                #print(oldoldvalues1)
                #print(oldoldtimestamp)
                print(oldoldtitle)

                oldoldylabelarray = str(oldoldtitle).split()
                oldoldylabel = oldoldylabelarray[-1]



                oldoldit = len(oldoldvalues1)
                oldoldkt = 0
                oldoldvalu = []
                while oldoldkt < oldoldit:
                    oldoldval = oldoldvalues1[oldoldkt]
                    oldoldvalu.append(oldoldval)
                    oldoldkt += 1
                #print(oldoldvalu)

                oldoldz = len(oldoldtimestamp)
                oldoldy = 0
                oldoldlabe = []
                while oldoldy < oldoldz:
                    oldoldlab = oldoldtimestamp[oldoldy]
                    oldoldlabe.append(oldoldlab)
                    oldoldy += 1
                #print(oldoldlabe)



                dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                dfpredvalues1 = dfpred.iloc[:,2].values

                it = len(dfpredvalues1)
                kt = 0
                predvalu = []
                while kt < it:
                    predval = dfpredvalues1[kt]
                    predvalu.append(predval)
                    kt += 1
                #print(predvalu)


                dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                it = len(dfoldpredvalues1)
                kt = 0
                oldpredvalu = []
                while kt < it:
                    oldpredval = dfoldpredvalues1[kt]
                    oldpredvalu.append(oldpredval)
                    kt += 1
                #print(oldpredvalu)


                dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                it = len(dfoldoldpredvalues1)
                kt = 0
                oldoldpredvalu = []
                while kt < it:
                    oldoldpredval = dfoldoldpredvalues1[kt]
                    oldoldpredvalu.append(oldoldpredval)
                    kt += 1
                #print(oldoldpredvalu)

                axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                value_max = axisdf.iloc[0,2]
                value_min = axisdf.iloc[0,1]

                oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                oldvalue_max = oldaxisdf.iloc[0,2]
                oldvalue_min = oldaxisdf.iloc[0,1]

                oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                oldoldvalue_min = oldoldaxisdf.iloc[0,1]


                title2 = title
                oldtitle2 = oldtitle
                oldoldtitle2 = oldoldtitle

                value_min2 =value_min
                value_max2 =value_max
                oldvalue_min2 =oldvalue_min
                oldvalue_max2 =oldvalue_max
                oldoldvalue_min2 =oldoldvalue_min
                oldoldvalue_max2 =oldoldvalue_max


                if compare1 == title:
                    print('1')
                    oldoldtitle = compare1

                    oldoldoutliers = predvalu
                    
                    oldoldvalus = valu
                    
                    #oldoldtitle = title
                    

                    oldoldvalue_min = value_min2
                    oldoldvalue_max = value_max2

                    oldoldylabel = ylabel

                    dfoldold2 = df

                    


                elif compare1 == oldtitle:
                    print('2')
                    oldoldtitle = compare1

                    oldoldoutliers = oldpredvalu
                    
                    oldoldvalus = oldvalu
                    
                    #oldoldtitle = oldtitle
                    

                    oldoldvalue_min = oldvalue_min2
                    oldoldvalue_max = oldvalue_max2
                    oldoldylabel = oldylabel

                    dfoldold2 = dfold



                elif compare1 == oldoldtitle:
                    print('3')
                    oldoldtitle = compare1

                    oldoldoutliers = oldoldpredvalu
                    
                    oldoldvalus = oldoldvalu
                    
                    #oldoldtitle = oldoldtitle
                    

                    oldoldvalue_min = oldoldvalue_min2
                    oldoldvalue_max = oldoldvalue_max2

                    oldoldylabel = oldoldylabel

                    dfoldold2 = dfoldold



                if compare2 == title2:
                    print('11')
                    oldtitle = compare2

                    oldoutliers = predvalu
                    
                    oldvalus = valu
                    
                    #oldtitle = title
                    

                    oldvalue_min = value_min2
                    oldvalue_max = value_max2

                    oldylabel = ylabel
                    dfold2 = df


                elif compare2 == oldtitle2:
                    print('22')
                    oldtitle = compare2

                    oldoutliers = oldpredvalu
                    
                    oldvalus = oldvalu
                    
                    #oldtitle = oldtitle
                    

                    oldvalue_min = oldvalue_min2
                    oldvalue_max = oldvalue_max2
                    oldylabel = oldylabel

                    dfold2 = dfold


                elif compare2 == oldoldtitle2:
                    print('33')
                    oldtitle = compare2

                    oldoutliers = oldoldpredvalu
                    
                    oldvalus = oldoldvalu
                    
                    #oldtitle = oldoldtitle
                    

                    oldvalue_min = oldoldvalue_min2
                    oldvalue_max = oldoldvalue_max2

                    oldylabel = oldoldylabel

                    dfold2 = dfoldold

                
                #oldoutliers = predvalu
                #oldoldoutliers = oldpredvalu
                
                #oldoldvalus = oldvalu
                
                #oldoldtitle = oldtitle
                

                #oldtitle = title
                

                line_labels = labe
                #oldvalus = valu

                #line_values = valu

                residualstartdate = ''
                residualenddate = ''


                

                #oldoldvalue_min = oldvalue_min
                #oldoldvalue_max = oldvalue_max

                #oldvalue_min = value_min
                #oldvalue_max = value_max


                ##################### 2 hour rolling average when correlating

                print('oldtitle')
                print('oldoldtitle')
                print(oldtitle)
                print(oldoldtitle)

                parameterold = str(oldtitle).split()
                parameterold = parameterold[-1]

                parameteroldold = str(oldoldtitle).split()
                parameteroldold = parameteroldold[-1]

                print(parameterold)
                print(parameteroldold)

                print(oldvalus)
                print(oldoldvalus)

                
                a = 0
                b = 0
                d=0

                x1 = []
                x2 = []
                x3 = []
                x4 = []


                while a < len(oldvalus):

                    a1 = oldvalus[a]

                    if a1 == 'f':
                        x1.append('f')
                        a+=1
                    else:
                        x1.append(a)
                        x2.append(a)
                        a+=1

                print(x1)
                print(x2)

                a = 0

                while a < len(oldoldvalus):

                    a1 = oldoldvalus[a]

                    if a1 == 'f':
                        x3.append('f')
                        a+=1
                    else:
                        x3.append(a)
                        x4.append(a)
                        a+=1

                print(x3)
                print(x4)

                print(len(x2))
                print(len(x4))

                oldoldvalusog = oldoldvalus
                oldvalusog = oldvalus

                dfoldold2 = dfoldold2.replace('f', np.nan)
                dfold2 = dfold2.replace('f', np.nan)

                print('dfs')
                print(dfoldold2)
                print(dfold2)


                dfoldold2 = dfoldold2.fillna(method = "ffill")
                dfold2 = dfold2.fillna(method = "ffill")

                dfoldold2 = dfoldold2.fillna(method = "bfill")
                dfold2 = dfold2.fillna(method = "bfill")


                print('dfs')
                print(dfoldold2)
                print(dfold2)

                oldoldvalues2 = dfoldold2.iloc[:,2].values

                oldvalues2 = dfold2.iloc[:,2].values

                print(oldoldvalues2)
                print(oldvalues2)


                oldoldit = len(oldoldvalues2)
                oldoldkt = 0
                oldoldvalu = []
                while oldoldkt < oldoldit:
                    oldoldval = oldoldvalues2[oldoldkt]
                    oldoldvalu.append(oldoldval)
                    oldoldkt += 1
                oldoldvalus = oldoldvalu
                print(oldoldvalu)


                oldit = len(oldvalues2)
                oldkt = 0
                oldvalu = []
                while oldkt < oldit:
                    oldval = oldvalues2[oldkt]
                    oldvalu.append(oldval)
                    oldkt += 1
                oldvalus = oldvalu
                print(oldvalu)


#####################################################
                oldvalusavg = []
                oldoldvalusavg = []

                oldvalusavg2 = []
                oldoldvalusavg2 = []

                a = 0
                b = 0
                c = 0

                e = 0
                f=0


                a = 0
                
                while a < len(oldvalus)-120:
                    
                    A1 = int(oldvalus[a])
                    A2 = int(oldvalus[a+1])
                    A3 = int(oldvalus[a+2])
                    A4 = int(oldvalus[a+3])
                    A5 = int(oldvalus[a+4])
                    A6 = int(oldvalus[a+5])
                    A7 = int(oldvalus[a+6])
                    A8 = int(oldvalus[a+7])
                    A9 = int(oldvalus[a+8])
                    A10 = int(oldvalus[a+9])
                    A11 = int(oldvalus[a+10])
                    A12 = int(oldvalus[a+11])
                    A13 = int(oldvalus[a+12])
                    A14 = int(oldvalus[a+12])
                    A15 = int(oldvalus[a+14])
                    A16 = int(oldvalus[a+15])
                    A17 = int(oldvalus[a+16])
                    A18 = int(oldvalus[a+17])
                    A19 = int(oldvalus[a+18])
                    A20 = int(oldvalus[a+19])
                    A21 = int(oldvalus[a+20])
                    A22 = int(oldvalus[a+21])
                    A23 = int(oldvalus[a+22])
                    A24 = int(oldvalus[a+23])
                    A25 = int(oldvalus[a+24])
                    A26 = int(oldvalus[a+25])
                    A27 = int(oldvalus[a+26])
                    A28 = int(oldvalus[a+27])
                    A29 = int(oldvalus[a + 28])
                    A30 = int(oldvalus[a+29])
                    A31 = int(oldvalus[a+30])
                    A32 = int(oldvalus[a+31])
                    A33 = int(oldvalus[a+32])
                    A34 = int(oldvalus[a+33])
                    A35 = int(oldvalus[a+34])
                    A36 = int(oldvalus[a+35])
                    A37 = int(oldvalus[a+36])
                    A38 = int(oldvalus[a+37])
                    A39 = int(oldvalus[a+38])
                    A40 = int(oldvalus[a+39])
                    A41 = int(oldvalus[a+40])
                    A42 = int(oldvalus[a+41])
                    A43 = int(oldvalus[a+42])
                    A44 = int(oldvalus[a+43])
                    A45 = int(oldvalus[a+44])
                    A46 = int(oldvalus[a+45])
                    A47 = int(oldvalus[a+46])
                    A48 = int(oldvalus[a+47])
                    A49 = int(oldvalus[a+48])
                    A50 = int(oldvalus[a+49])
                    A51 = int(oldvalus[a+50])
                    A52 = int(oldvalus[a+51])
                    A53 = int(oldvalus[a+52])
                    A54 = int(oldvalus[a+53])
                    A55 = int(oldvalus[a+54])
                    A56 = int(oldvalus[a+55])
                    A57 = int(oldvalus[a+56])
                    A58 = int(oldvalus[a+57])
                    A59 = int(oldvalus[a+58])
                    A60 = int(oldvalus[a+59])
                    A61 = int(oldvalus[a+60])
                    A62 = int(oldvalus[a+61])
                    A63 = int(oldvalus[a+62])
                    A64 = int(oldvalus[a+63])
                    A65 = int(oldvalus[a+64])
                    A66 = int(oldvalus[a+65])
                    A67 = int(oldvalus[a+66])
                    A68= int(oldvalus[a+67])
                    A69 = int(oldvalus[a+68])
                    A70 = int(oldvalus[a+69])
                    A71 = int(oldvalus[a+70])
                    A72 = int(oldvalus[a+71])
                    A73 = int(oldvalus[a+72])
                    A74 = int(oldvalus[a++73])
                    A75 = int(oldvalus[a+74])
                    A76 = int(oldvalus[a+75])
                    A77 = int(oldvalus[a+76])
                    A78 = int(oldvalus[a+77])
                    A79 = int(oldvalus[a+78])
                    A80 = int(oldvalus[a+79])
                    A81 = int(oldvalus[a+80])
                    A82 = int(oldvalus[a+81])
                    A83 = int(oldvalus[a+82])
                    A84 = int(oldvalus[a+83])
                    A85 = int(oldvalus[a+84])
                    A86 = int(oldvalus[a+85])
                    A87 = int(oldvalus[a+86])
                    A88 = int(oldvalus[a+87])
                    A89 = int(oldvalus[a+88])
                    A90 = int(oldvalus[a+89])
                    A91 = int(oldvalus[a+90])
                    A92 = int(oldvalus[a+91])
                    A93 = int(oldvalus[a+92])
                    A94 = int(oldvalus[a+93])
                    A95 = int(oldvalus[a+94])
                    A96 = int(oldvalus[a+95])
                    A97 = int(oldvalus[a+96])
                    A98 = int(oldvalus[a+97])
                    A99 = int(oldvalus[a+98])
                    A100 = int(oldvalus[a+99])
                    A101 = int(oldvalus[a+100])
                    A102 = int(oldvalus[a+101])
                    A103 = int(oldvalus[a+102])
                    A104 = int(oldvalus[a+103])
                    A105 = int(oldvalus[a+104])
                    A106 = int(oldvalus[a+105])
                    A107 = int(oldvalus[a+106])
                    A108= int(oldvalus[a+107])
                    A109 = int(oldvalus[a+108])
                    A110 = int(oldvalus[a+109])
                    A111 = int(oldvalus[a+110])
                    A112 = int(oldvalus[a+111])
                    A113 = int(oldvalus[a+112])
                    A114 = int(oldvalus[a+113])
                    A115 = int(oldvalus[a+114])
                    A116 = int(oldvalus[a+115])
                    A117 = int(oldvalus[a+116])
                    A118 = int(oldvalus[a+117])
                    A119 = int(oldvalus[a+118])
                    A120 = int(oldvalus[a+119])
                    

                    Aavg

                    oldvalusavg.append(Aavg)

                    a+=1


                a = 0
                                    
                while a < len(oldoldvalus)-120:
                    
                    A1 = int(oldoldvalus[a])
                    A2 = int(oldoldvalus[a+1])
                    A3 = int(oldoldvalus[a+2])
                    A4 = int(oldoldvalus[a+3])
                    A5 = int(oldoldvalus[a+4])
                    A6 = int(oldoldvalus[a+5])
                    A7 = int(oldoldvalus[a+6])
                    A8 = int(oldoldvalus[a+7])
                    A9 = int(oldoldvalus[a+8])
                    A10 = int(oldoldvalus[a+9])
                    A11 = int(oldoldvalus[a+10])
                    A12 = int(oldoldvalus[a+11])
                    A13 = int(oldoldvalus[a+12])
                    A14 = int(oldoldvalus[a+12])
                    A15 = int(oldoldvalus[a+14])
                    A16 = int(oldoldvalus[a+15])
                    A17 = int(oldoldvalus[a+16])
                    A18 = int(oldoldvalus[a+17])
                    A19 = int(oldoldvalus[a+18])
                    A20 = int(oldoldvalus[a+19])
                    A21 = int(oldoldvalus[a+20])
                    A22 = int(oldoldvalus[a+21])
                    A23 = int(oldoldvalus[a+22])
                    A24 = int(oldoldvalus[a+23])
                    A25 = int(oldoldvalus[a+24])
                    A26 = int(oldoldvalus[a+25])
                    A27 = int(oldoldvalus[a+26])
                    A28= int(oldoldvalus[a+27])
                    A29 = int(oldoldvalus[a + 28])
                    A30 = int(oldoldvalus[a+29])
                    A31 = int(oldoldvalus[a+30])
                    A32 = int(oldoldvalus[a+31])
                    A33 = int(oldoldvalus[a+32])
                    A34 = int(oldoldvalus[a+33])
                    A35 = int(oldoldvalus[a+34])
                    A36 = int(oldoldvalus[a+35])
                    A37 = int(oldoldvalus[a+36])
                    A38 = int(oldoldvalus[a+37])
                    A39 = int(oldoldvalus[a+38])
                    A40 = int(oldoldvalus[a+39])
                    A41 = int(oldoldvalus[a+40])
                    A42 = int(oldoldvalus[a+41])
                    A43 = int(oldoldvalus[a+42])
                    A44 = int(oldoldvalus[a+43])
                    A45 = int(oldoldvalus[a+44])
                    A46 = int(oldoldvalus[a+45])
                    A47 = int(oldoldvalus[a+46])
                    A48 = int(oldoldvalus[a+47])
                    A49 = int(oldoldvalus[a+48])
                    A50 = int(oldoldvalus[a+49])
                    A51 = int(oldoldvalus[a+50])
                    A52 = int(oldoldvalus[a+51])
                    A53 = int(oldoldvalus[a+52])
                    A54 = int(oldoldvalus[a+53])
                    A55 = int(oldoldvalus[a+54])
                    A56 = int(oldoldvalus[a+55])
                    A57 = int(oldoldvalus[a+56])
                    A58 = int(oldoldvalus[a+57])
                    A59 = int(oldoldvalus[a+58])
                    A60 = int(oldoldvalus[a+59])
                    A61 = int(oldoldvalus[a+60])
                    A62 = int(oldoldvalus[a+61])
                    A63 = int(oldoldvalus[a+62])
                    A64 = int(oldoldvalus[a+63])
                    A65 = int(oldoldvalus[a+64])
                    A66 = int(oldoldvalus[a+65])
                    A67 = int(oldoldvalus[a+66])
                    A68= int(oldoldvalus[a+67])
                    A69 = int(oldoldvalus[a+68])
                    A70 = int(oldoldvalus[a+69])
                    A71 = int(oldoldvalus[a+70])
                    A72 = int(oldoldvalus[a+71])
                    A73 = int(oldoldvalus[a+72])
                    A74 = int(oldoldvalus[a++73])
                    A75 = int(oldoldvalus[a+74])
                    A76 = int(oldoldvalus[a+75])
                    A77 = int(oldoldvalus[a+76])
                    A78 = int(oldoldvalus[a+77])
                    A79 = int(oldoldvalus[a+78])
                    A80 = int(oldoldvalus[a+79])
                    A81 = int(oldoldvalus[a+80])
                    A82 = int(oldoldvalus[a+81])
                    A83 = int(oldoldvalus[a+82])
                    A84 = int(oldoldvalus[a+83])
                    A85 = int(oldoldvalus[a+84])
                    A86 = int(oldoldvalus[a+85])
                    A87 = int(oldoldvalus[a+86])
                    A88 = int(oldoldvalus[a+87])
                    A89 = int(oldoldvalus[a+88])
                    A90 = int(oldoldvalus[a+89])
                    A91 = int(oldoldvalus[a+90])
                    A92 = int(oldoldvalus[a+91])
                    A93 = int(oldoldvalus[a+92])
                    A94 = int(oldoldvalus[a+93])
                    A95 = int(oldoldvalus[a+94])
                    A96 = int(oldoldvalus[a+95])
                    A97 = int(oldoldvalus[a+96])
                    A98 = int(oldoldvalus[a+97])
                    A99 = int(oldoldvalus[a+98])
                    A100 = int(oldoldvalus[a+99])
                    A101 = int(oldoldvalus[a+100])
                    A102 = int(oldoldvalus[a+101])
                    A103 = int(oldoldvalus[a+102])
                    A104 = int(oldoldvalus[a+103])
                    A105 = int(oldoldvalus[a+104])
                    A106 = int(oldoldvalus[a+105])
                    A107 = int(oldoldvalus[a+106])
                    A108 = int(oldoldvalus[a+107])
                    A109 = int(oldoldvalus[a+108])
                    A110 = int(oldoldvalus[a+109])
                    A111 = int(oldoldvalus[a+110])
                    A112 = int(oldoldvalus[a+111])
                    A113 = int(oldoldvalus[a+112])
                    A114 = int(oldoldvalus[a+113])
                    A115 = int(oldoldvalus[a+114])
                    A116 = int(oldoldvalus[a+115])
                    A117 = int(oldoldvalus[a+116])
                    A118 = int(oldoldvalus[a+117])
                    A119 = int(oldoldvalus[a+118])
                    A120 = int(oldoldvalus[a+119])
                    

                    Aavg

                    oldoldvalusavg.append(Aavg)

                    a+=1


            
                    
                print(oldvalusavg)
                print(oldoldvalusavg)

                
                

                a=0
                b=0

                print(len(oldvalusavg))
                print(len(oldoldvalusavg))

                print(oldvalusavg)
                print(oldoldvalusavg)

                '''while a < len(oldvalusavg):
                    if x1[b] == 'f':
                        oldvalusavg2.append('f')
                        b+=1
                    else:
                        oldvalusavg2.append(oldvalusavg[a])
                        
                        a+=1
                        b+=1

                a=0
                b=0

                while a < len(oldoldvalusavg):
                    if x3[b] == 'f':
                        oldoldvalusavg2.append('f')
                        b+=1
                    else:
                        oldoldvalusavg2.append(oldoldvalusavg[a])
                        
                        a+=1
                        b+=1


                

                

                print(oldoldvalusavg[0])
                print(oldvalusavg[0])
                #print(oldoldvalusavg)
                #print(oldvalusavg)
                #print(oldoldvalusavg2)
                #print(oldvalusavg2)
                #print(len(oldoldvalusavg2))
                #print(len(oldvalusavg2))
                #print(oldoldvalus)
                #print(oldvalus)


                a = 0

                oldvalus3 = []
                oldoldvalus3 = []

                while a < len(oldvalusavg2):
                    b = oldvalusavg2[a]

                    if b == 'f':
                        c = np.nan
                        #print(c)
                    else:
                        c = int(b)
                    oldvalus3.append(c)

                    a +=1

                    
                a = 0
                
                while a < len(oldoldvalusavg2):
                    b = oldoldvalusavg2[a]

                    if b == 'f':
                        c = np.nan
                        #print(c)
                    else:
                        c = int(b)
                    oldoldvalus3.append(c)

                    a +=1

                #print('oldvalus3')

                #print('oldoldvalus3')

                #print(oldvalus3)

                #print(oldoldvalus3)'''




                ###############################
                
              
                        

                

                
                x = np.array(oldvalusavg)
                y = np.array(oldoldvalusavg)

                #print(x)
                #print(y)


                
                
                #r = np.corrcoef(x, y)

                #r = r[0, 1]

                #print(r)

                x2 = pd.Series(x)
                y2 = pd.Series(y)
                
                r = x2.corr(y2)

                #r = r[0, 1]

                print(r)

                a = 0

                outliers = []
                line_values = []

                while a < len(line_labels):
                    outliers.append(r)
                    line_values.append(r)
                    a +=1
                    





                titless2 = 'Correlation Value'
                
                value_min = -1
                value_max = 1

                
                #oldoldylabel = oldylabel
                #oldylabel = ylabel

                residualstartdate = str(line_labels[0]).replace(' ', 'T')
                residualenddate = str(line_labels[-1]).replace(' ', 'T')

                print(dfoldold)
                print(dfold)

                oldoldvalus = oldoldvalusog
                oldvalus = oldvalusog
            




                

                return render_template('view 19 3 lines.html', oldoldoutlier=oldoldoutliers, oldoutlier=oldoutliers, outlier=outliers,  oldoldvalues=oldoldvalus, oldoldtitle=oldoldtitle, oldoldmin=oldoldvalue_min, oldoldmax=oldoldvalue_max, oldvalues=oldvalus, oldtitle=oldtitle, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldoldylabel=oldoldylabel, oldylabel=oldylabel)
                #return render_template('view 19 2 lines.html', oldoutlier=oldoutliers, outlier=outliers, oldvalues=oldvalus, oldtitle=oldtitle2, oldmin=oldvalue_min, oldmax=oldvalue_max, title=titless2, min=value_min, max=value_max, oldlabels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=titless2, ylabel=ylabel, oldylabel=oldylabel)

                #return render_template('view 19 index.html')


            

            elif altype == 'Closest':
                print('closest')

                compare1 = request.form.get('compareselection1')

                datatype = request.form.get('compareselection2')

                print(compare1)
                print(datatype)

                if datatype == 'EMS':
                    print('a')

                    EMStitlefix = ["101|The Croft Electricity", "233|The Croft Water", "234|The Croft Gas", "1|Campus Services", "2|Regional Network and Services", "3|Regional Campus Co-Lo", "4|Campus Network", "5|Building Coms B", "6|Campus Servers", "7|Regional Networking Services", "8|Regional and Campus Co Lo", "24|Campus Network", "25|Building Coms A", "26|Incomer No 2 From LV2 ESS", "27|Inc No1 ESS Sw", "28|LV2 ESS Main M", "29|Ess Mech Control Centre", "30|DB-E-M1", "31|DB-E-M2", "96|Chiller No 2", "97|LV3-NE Supply", "100|ISS Total", "132|LV2-ESS Supply", "133|Chiller No 1", "264|Future UPS", "267|UPSLV-US-1", "268|UPSLV-US-3", "269|UPSLV-US-4", "374|UPS2A", "266|ISS Water Meter", "265|ISS Heat Meter","9|Chaplaincy Centre", "10|Chaplaincy Centre Kitchen", "14|Chaplaincy Centre Immersion Heater","11|Chaplaincy Centre", "12|Chaplaincy Centre Kitchen", "13|Chaplaincy Centre Heat meter", "200|Bowland Annexe Electricity", "43|Bowland Annexe Water", "201|Bowland Annexe Heating", "44|Great Hall Immersion Heater 1", "45|Great Hall Immersion Heater 2", "197|Great Hall Electricity", "211|No 1 Transformer Sub 3 Great Hall", "213|No 2 Transformer Sub 3 Great Hall","41|Great Hall Water", "198|Great Hall Gas", "42|Great Hall Heating","37|Conference Centre Electricity","38|Conference Centre Natural Gas","33|Infolab Electricity", "35|Chiller 1", "36|Chiller 2", "39|Transformer Sub 6 Info Lab 1", "40|Transformer Sub 6 Info Lab 2","34|Water Meter","32|Plant Room Natural Gas", "15|Bowland Hall 1-7 Electricity", "515|Bowland Hall 8-15 Electricity", "16|Bowland Hall 1-7 Water", "516|Bowland Hall 8-15 Water","215|Bowland Hall 1-15 Gas", "47|IENS Phase 1 Electricity", "64|IENS Phase 2 Electricity","17|IENS Phase 2 Water","281|IENS Phase 1 Natural Gas", "19|IENS Phase 2 Natural Gas","21|Biology Basement No 1 Immersion Heater", "22|Biology Basement No 2 Immersion Heater", "23|Biology Basement Animal Rooms Immersion Heater", "46|IENS Phase 1 Electricity", "51|Biology Phase 1 Immersion Heater 1", "52|Biology Phase 1 Immersion Heater 2", "85|Transformer No. 1 Sub 8 LEC 1", "87|Bus Bar Greenhouses 1", "88|Bus Bar Greenhouses 2","48|IENS Phase 1 Water","49|IENS Phase 1 Gas","50|IENS Phase 1 Heat Meter", "18|IENS Phase 2 Heat Meter","86|LEC 3 No. 1 Transformer No. 10 Sub Station","20|LEC 3 Water", "282|LEC 3 Natural Gas","53|Transformer Sub 5 Grizedale College 1", "54|Transformer Sub 5 Grizedale College 2", "57|Grizedale Town House 1", "60|Grizedale Town House 2", "273|Grizedale Bar Electricity", "276|Grizedale Laundry", "279|Grizedale Laundry Lighting","274|Grizedale Bar Water", "277|Grizedale Laundry Water", "514|Grizedale Residences Water","275|Grizedale Bar Gas", "278|Grizedale Laundry Gas", "513|Grizedale Residences Natural Gas","280|Grizedale Bar 101-108","55|Management Phase 1 Electricity", "56|Management Extension Electricity", "107|Management Immersion Heater No 1", "108|Management Immersion Heater No 2", "129|Management Phase 2 Adj Lift 1 Electricity","139|Management School Water","106|Management School Phase 1 Heat Meter","58|Pendle Main 2","59|Charles Carter Building", "298|Charles Carter A Floor A1 Total", "299|Charles Carter A Floor A1 Lighting", "300|Charles Carter A Floor A2 Total", "301|Charles Carter A Floor A2 Lighting", "302|Charles Carter B Floor B1 Total", "303|Charles Carter B Floor B1 Lighting", "304|Charles Carter B Floor B2 Total", "305|Charles Carter B Floor B2 Lighting", "306|Charles Carter Plant Room DB", "307|Charles Carter Comms Plant Room", "308|Charles Carter Plant Room Total", "310|Charles Carter Mechanical Plant", "325|Charles Carter C Floor C1 Total", "326|Charles Carter C Floor C1 Lighting", "327|Charles Carter C Floor C2 Total", "328|Charles Carter C Floor C2 Lighting", "329|Charles Carter D Floor D1 Total", "330|Charles Carter D Floor D1 Lighting", "331|Charles Carter D Floor D2 Total", "332|Charles Carter D Floor D2 Lighting","311|Charles Carter Water Meter","309|Charles Carter Heat Meter","61|Lonsdale Laundrette Electricity","62|Lonsdale Laundrette Water","63|Lonsdale Laundrette Gas","65|CHP Electricity Input", "66|CHP Output Gen", "69|Biomass Boiler Electricity", "181|Boiler House CHP Gas","67|CHP Heat Meter", "68|Biomass Heat Meter","182|Boiler Gas", "184|Firm Gas", "185|3 Gas Boilers","70|Post Graduate Statistics Building Electricity","71|Post Graduate Statistics Building Water","72|Post Graduate Statistics Building Heat Meter","73|Maintenance Workshop 2 Electricity","151|Maintenance Workshops Water","316|Maintenance Workshops Heat Meter","74|Anne Helme Garage Electricity","75|Anne Helme Garage Water Meter","76|County South Flats 5, 6, 7", "77|County South DB D2 Power", "78|County South DB D2 Lighting", "79|County South DB C2 Power", "80|County South DB C2 Lighting", "116|County South DB B1 Power", "117|County South DB B1 Lighting", "118|County South DB C1 Power", "119|County South DB C1 Lighting", "120|County South DB D1 Power", "121|County South DB D1 Lighting", "171|County South Flats 1, 2, 3, 4", "172|County South DB D3 Power", "173|County South DB D3 Lighting", "174|County South DB C3 Power", "175|County South DB C3 Lighting", "176|County South DB B3 Power", "177|County South DB B3 Lighting", "210|County South Block 75 - 77", "214|County Town Houses and County South No. 3 Substation", "223|County South C20 Modem", "238|County South BD D2 Power", "239|County South BD D2 Lighting", "242|County South Plant Room Lighting", "243|County South Plant Room Power", "244|County South Plant Room", "246|County South IAS -Old Supply", "335|County South BB01 Riser", "336|County South BB02 Riser", "337|County South BB03 Riser", "338|County South LT Plant Room", "339|County South C20 Modem Comm DB", "340|County South Plant Room Panel", "341|County South DB A1 Power", "342|County South DB A1 Lighting", "343|County South Laundrette DB", "344|County South Existing Lift", "345|County South DB 2 Room A62", "346|County South FASS", "347|County South DB LK Room 107", "348|County South DB Ext Mech Power", "349|County South Main Incomer", "372|County South Kitchen Immersion Heater", "373|County South Laundry Immersion Heater","240|County South Laundrette Water", "334|County South Residences 75 - 77 Water","241|County South Laundrette Gas", "333|County South Residences 75 - 77 Gas","245|County South Plant Room Heat Meter","236|Fylde Residences Electricity","81|Fylde Lytham Water", "209|Fylde Pilling Water","183|Furness and Fylde Residence Gas","82|Uni Travel Corr Electricity", "83|Uni Travel Front Electricity","84|Uni Travel Water","89|Faraday Lifeboat Electricity", "91|Chiller No 1", "92|Chiller No 2", "93|MCCP Meter", "158|Central Services Immersion Heater", "155|DB LCP", "156|UPS Output", "157|UPS Output Rectifier","90|Faraday Building Gas","94|Bowland Ash Electricity", "205|Bowland Ash Immersion Heater 1", "204|Bowland Ash Immersion Heater 2", "206|Bowland Ash Muslim Prayer Room","199|Bowland Ash Water","203|Bowland Ash Gas", "202|Bowland Ash Heating", "95|Non Ess (MCCN)", "98|LV4-NE Supply", "99|Incomer No. 2", "130|Chiller No 3 Fut", "131|Standby Generator","102|Bowland North Electricity","103|Bowland North Water","104|Bowland North Heat Meter","235|No 1 Transformer SS Furness Residence", "237|Furness Residence Electricity", "286|Furness Perimeter Residence Electricity", "289|Furness Perimeter Residence Immersion Heater", "105|Furness Hawkshead Water", "208|Furness Colton Water", "287|Furness Perimeter Residence Water","288|Furness Perimeter Residence Heat Meter","109|Charity Shop Electricity Meter","110|Charity Shop Water Meter","111|LUSU Housing Electricity Meter","112|John Creed 1", "135|John Creed Immersion Heater","113|John Creed Residence 3 Blocks Water", "517|John Creed Residence 4 Blocks Water","134|John Creed Residences Heat Meter","216|LEC Workshops NE Corner Electricity","114|LEC Remote Workshop Water","115|LEC Remote Workshop Gas","122|Security Office Electricity","123|Robinsons Left Electricity Meter", "124|Robinsons Right Electricity Meter", "125|Robinsons Water Meter","187|Bowland Tower South and East Wing Electricity", "126|Bowland Tower Ent DB", "127|Bowland Tower MCCP Panel", "128|Bowland Tower Sprinkler", "190|Bowland Tower Dis Board", "192|Bowland Tower Plantroom Input 7", "262|Bowland Tower Electric", "394|Bowland Tower Floor D & E Lighting Electric", "395|Bowland Tower Floor D & E Total Electricity", "396|Bowland Tower Floor F, G & H Lighting Electric", "397|Bowland Tower Floor F, G & H Total Electricity", "398|Bowland Tower Floor J, K & L Lighting Electric", "399|Bowland Tower Floor J, K & L Total Electricity", "400|Bowland Tower Floor M, N & O Lighting Electric", "401|Bowland Tower Floor M, N & O Total Electricity", "417|Bowland Tower RmB41comms Electricity", "418|Bowland Tower E Flat16/17 Electricity", "419|Bowland Tower South Flat 18 Electricity", "420|Bowland Tower South Flat 19/20 Electricity", "421|Bowland Tower East B Floor Electricity", "422|Bowland Tower East C Floor Electricity", "423|Bowland Tower South B Floor Electricity", "424|Bowland Tower South C Floor Electricity","263|Bowland Tower Water", "162|Bowland Tower Water 2", "375|Bowland Tower Slaid Hot Water", "376|Bowland Tower Hot Water F","160|Bowland Tower South and East Wing Heating", "377|Bowland Tower Heating","136|Furness College Electricity", "460|Flat 1 Comsumer Unit", "461|Flat 2 Comsumer Unit", "462|Flat 3 Comsumer Unit", "463|Flat 4 Comsumer Unit", "382|Flat 5 Comsumer Unit", "383|Flat 6 Comsumer Unit", "384|Flat 7 Comsumer Unit", "385|Flat 8 Comsumer Unit", "407|Power Section DB LCDB 021", "408|Lighting Section DB LCDB 021", "409|Power Section DB NDB 02", "410|Lighting Section DB NDB 02", "411|Power Section DB LBDB 021", "412|Lighting Section DB LBDB 021", "413|Power Section DB NDB 01", "414|Lighting Section DB NDB 01", "415|Power Section DB LADB 021", "416|Lighting Section DB LADB 021", "437|A Floor Electricity", "438|A Floor Electricity Check", "444|SW Electrical Bus Bar", "445|NW Electrical Bus Bar", "446|South Block DB DB 4X", "447|Green Room DB", "448|Computer Shop", "449|The Venue", "450|NE Plant Room DB", "468|Foyer Area D8 GDB 003", "469|North East Lift", "470|Power DB LBDB 011", "471|Power Foyer DB GDB 003", "473|Lighting Foyer DB GDB 003", "474|Power DB LADB 011", "475|Lighting DB LADB 011", "431|SW Bus Bar", "432|NE Bus Bar", "433|South Bl DB 4X", "434|NE Plant Room DB", "439|NW Pass Lift", "440|SCR TV Room", "441|Bar Dis Board ", "442|Switch Room Dis B", "443|OSS Walk Lights", "452|Pwr LB DB 11", "453|Light LB DB 11", "454|PWR Foyer GDB 3", "455|Lgt Foyer GDB 3", "456|PWR LA DB 3", "457|Light LA DB 11", "458|CW DHW System", "472|NrthBL CFlrNDB02","464|Flat 1 Water Meter", "465|Flat 2 Water Meter", "466|Flat 3 Water Meter", "467|Flat 4 Water Meter", "402|Flat 6 Water Meter", "403|Flat 7 Water Meter", "436|Pressurisation Make up Water", "476|Cold Water Meter for DHWS", "477|Main Water Meter", "459|College 140 Main Water IN", "378|Flat 1 Heat Meter", "379|Flat 2 Heat Meter", "380|Flat 3 Heat Meter", "381|Flat 4 Heat Meter", "404|Flat 5 Heat Meter", "405|Flat 6 Heat Meter", "406|Flat 7 Heat Meter", "451|LPHW DHWS Heat Meter", "435|College 140 DHWS Heat Meter","142|Engineering Immersion Heater","141|Engineering Water","138|Engineering Gas Meter","137|Engineering Heat Meter","143|Barker House Farm Electricity","144 |Barker House Farm Water","145|Barker House Farm Natural Gas","207|Bailrigg House Electricity", "147|Bailrigg House Water", "146|Bailrigg House Gas", "148|Cartmel Laundrette Electricity","149|Cartmel Laundrette Water","150|Cartmel Laundrette Gas","229|Whewell Building Electricity","230|Whewell Building Water","217|University House Phase 1 Electricity", "218|University House Phase 2 Electricity", "219|University House Lift D Floor Electricity", "222|University House Immersion Hater Electricity","221|University House Water","220|University House Heat Meter", "247|Sultans Electricity","283|Sultans Water","284|Sultans Gas","285|Ketchup", "227|No 1 Transformer Sub 7 Alex Park", "228|No 2 Transformer Sub 7 Alex Park","290|Steam Room Electricity", "291|AHU 1", "292|AHU 2", "293|Floating Floor", "294|MCCP 1", "295|MCCP 2", "296|Passenger Lift", "297|Sauna", "351|Emergency Light", "352|BasePlRmlgs 01-L", "353|BasePlRm P DB01P", "354|Wet CH L DB-02-L", "355|Wet Ch P DB-02-P", "356|DB External", "357|DB 5", "358|Main Electric Sub No 12 Sports Centre", "359|DB 6", "360|DB-07-P", "361|Comms DB", "362|Generator", "363|Pool Filter", "425|Ground Floor Dry Lighting", "426|Ground Floor Dry Power", "427|Ground Floor Fitness Lighting", "428|Ground Floor Fitness Power", "429|Roof Lighting", "430|Roof Power", "386|Sports Centre Water", "140|Old Sports Centre Water","387|Main Hall Gas Meter", "388|Sports Centre Gas Boilers", "389|Main Gas Meter across the Road","390|CT Heating DHW Primary", "391|MTHW Heating Primary", "392|CT Heating Secondary", "393|VT Heating Secondary","224|Pre School Electricity","225|Pre School Water","226|Pre School Gas","169|Post Office Electricity", "170|Post Office Water","167|Diggles Electricity","168|Diggles Water","180|Orange Telephones Electricity","153|MCCP Electric", "154|3 Boilers H Out ", "312|Circulation Pump No 1", "313|Circulation Pump No 2", "314|Circulation Pump No 3", "315|Circulation Pump No 4", "178|No 1 Transformer Sub 1 Energy Centre", "179|No 2 Transformer Sub 1 Energy Centre", "317|Water Meter RHS Rear", "318|Water Meter LHS Rear","152|Energy Centre Oil","364|DB 1A", "365|DB 1B", "319|DB 1C", "366|DB 2A", "367|DB 2B", "368|DB 3A", "369|DB 3B", "320|BMS Panel", "321|Lift Electricity", "322|Chiller Units", "370|Dimmer Rack No 1", "371|Dimmer Rack No 2", "212|Total of LEC Workshops and LICA","324|LICA Water","323|LICA Heat Meter","270|Lancaster House Electric","271|Lancaster House Hotel Water","272|Lancaster House Hotel Gas","231|County Town Houses Water","232|County Town Houses Gas Meter","194|George Fox Electricity", "258|B27 Immersion Heater Ground Floor", "259|B27 Immersion Heater 1st Floor", "260|George Fox B Floor NE", "261|George Fox B Floor SW", "195|George Fox Water","257|George Fox B27 Heat Meter","255|Wongs Kitchen Electricity","196|Wongs Kitchen Water","256|Wongs Kitchen Gas","191|Greggs Electricity","193|Greggs Water","188|Create Electricity","189|Create Water","165|Hairdressers Electricity","186|Hairdressers Water No 1", "166|Hairdressers Water No 2","163|Ice Cream Shop Electricity","164|Ice Cream Shop Water","252|Slaidburn House Electricity","161|Slaidburn House Water","159|Slaidburn House Heat Meter","251|Spar No 1 Electricity", "250|Spar No 2 Electricity","253|Spar Water","249|T Mobile Electricity","248|Student Union Electricity", "350|Student Union Office Electricity","254|Student Union Shop Water","479|DB LG2LP", "480|DB LG3L", "482|DB LG3P", "483|DB A1P", "484|DB B1L", "485|DB B1P", "486|DB B2P", "487|DB A1L", "488|DB B2L", "489|DB A2L", "490|DB A2P", "491|DBCP4 COM2", "492|DB3LP", "493|MCP5", "494|DB C2P", "495|DB C2L", "496|MCP3", "497|DBD4LP", "499|DB LG4P", "500|DB LG4L", "501|DB LG5L", "502|DB LG5P", "504|MCP01", "506|DB COMMS", "507|MCP03", "508|DB C1L", "509|DB C1P", "510|DB D1LP", "511|MCP02", "512|DB D2LP", "481|Book WATER", "503|DIST HEAT EAST","478|Book HEAT", "505|DOM HOT WATER"]                           


                    

                    EMStablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/EMStables.csv")

                    EMStables = EMStablesdf['tables']

                    EMStables = np.array(EMStables)

                    a = 0

                    emsY = []

                    while a < len(EMStables):
                        EMSunique = str(EMStables[a])
                        EMSunique = EMSunique.replace('EMStest', '')
                        emsY.append(EMSunique)
                        

                        


                        a+=1



                    print('emsY')
                    print(emsY)

                    











                    df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    #print(values1)
                    #print(timestamp)
                    #print(title)

                    ylabelarray = str(title).split()
                    ylabel = ylabelarray[-1]


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    #print(oldvalues1)
                    #print(oldtimestamp)
                    #print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    oldylabel = oldylabelarray[-1]



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    #print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    #print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    oldoldylabel = oldoldylabelarray[-1]



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    #print(oldoldlabe)



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisddf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    #print(values1)
                    #print(timestamp)
                    #print(title)

                    ylabelarray = str(title).split()
                    ylabel = ylabelarray[-1]


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    #print(oldvalues1)
                    #print(oldtimestamp)
                    #print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    oldylabel = oldylabelarray[-1]



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    #print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    #print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    oldoldylabel = oldoldylabelarray[-1]



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    #print(oldoldlabe)



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisdf.iloc[0,1]


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max

                    meter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                    meter_id = meter_id.iloc[0,1]
                    oldmeter_id = oldmeter_id.iloc[0,1]
                    oldoldmeter_id = oldoldmeter_id.iloc[0,1]

                    print('meter_id')
                    print('oldmeter_id')
                    print('oldoldmeter_id')

                    print(meter_id)
                    print(oldmeter_id)
                    print(oldoldmeter_id)

                    print('title')
                    print(title)
                    print(oldtitle)
                    print(oldoldtitle)

                    parameterems = str(compare1).split()
                    parameterems = parameterems[-1]

                    print(parameterems)


                    if compare1 == title:
                        #print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        

                        


                    elif compare1 == oldtitle:
                        #print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold

                        



                    elif compare1 == oldoldtitle:
                        #print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold

                        


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    #print(startdate)
                    #print(enddate)

                    ylabel = ''


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max


                    if compare1 == title:
                        #print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        

                        


                    elif compare1 == oldtitle:
                        #print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold

                        



                    elif compare1 == oldoldtitle:
                        #print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold

                        


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    #print(startdate)
                    #print(enddate)

                    ylabel = ''

                    print(oldoldvalus)

                    oldoldvalustemp = []
                    labetemp = []

                    oldoldoutlierstemp = []

                    a = 0

                    while a < len(oldoldvalus):

                        b = oldoldvalus[a]

                        if b == 'f':
                            c = np.nan
                            oldoldvalustemp.append(c)
                            a+=1
                        else:
                            oldoldvalustemp.append(int(b))
                            
                            a+=1

                    print(oldoldvalustemp)
                    print(labetemp)

                    oldoldvalusog = oldoldvalus


                    oldoldvalus = oldoldvalustemp

                    dfoldold2 = dfoldold2.replace('f', np.nan)

                    print('dfs')
                    print(dfoldold2)


                    dfoldold2 = dfoldold2.fillna(method = "ffill")

                    dfoldold2 = dfoldold2.fillna(method = "bfill")

                    print('dfs')
                    print(dfoldold2)

                    oldoldvalues2 = dfoldold2.iloc[:,2].values


                    print(oldoldvalues2)


                    oldoldit = len(oldoldvalues2)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues2[oldoldkt]
                        oldoldvalu.append(int(oldoldval))
                        oldoldkt += 1
                    oldoldvalus = oldoldvalu
                    print(oldoldvalu)



                    print('oldoldvalus')
                    print('labe')
                    print(oldoldvalus)
                    print(labe)

                    print(oldoldoutliers)
                    print(len(oldoldoutliers))
                    print(len(oldoldvalus))
                    print(len(labe))




    ###########################################EMS



                    a = 0

                    b = []
                    labeltemp = []
                    oldvaluestemp = []

                    rpermenant = 0

                    rarray = []

                    title = ''

                    print(len(emsY))

                    while a < len(emsY):

                        #print(a)

                        meter_id = int(emsY[a])
                        parameterems = '`consumption`'

                        table = '[' + 'EMStest' + str(meter_id) + ']'


                        #dfemsaug18oct18test = pd.concat([dfemsoct18, dfemsnov18])

                        #df2emsaug18oct18test = dfemsaug18oct18test.loc[:, ['timestamp','metadata_id', 'consumption', 'meter_reading']]

                        #df3emsaug18oct18test = df2emsaug18oct18test.sort_values(by=['timestamp']).set_index("timestamp")

                        #df4emsaug18oct18test = df3emsaug18oct18test[df3emsaug18oct18test['metadata_id'] == meter_id]

                        #df4emsaug18oct18test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                        #dfems5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                        conn = sqlite3.connect('EMSOUT.db')

                        #dfems5.to_sql('EMSclosest', conn, if_exists='replace', index=False)

                        c = conn.cursor()

                        query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        x = pd.DataFrame(timeaxis, columns=['timestamp'])
                        x['data'] = dataset2

                        x['timestamp'] = timeaxis2

                        xxx = x['timestamp']

                        x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                        #x2 = x.set_index('timestamp')

                        labels5 = xxx

                        values5 = x['data']

                        values5 = np.array(values5)

                        oldoldvalus2 = np.array(oldoldvalus)
                    ####################################################
                        if len(labels5) == 0:
                            print(table)

                        else:
                            x = x.set_index('timestamp')
                            x.index = x.index.map(lambda j: j.replace(second=0))

                            print(x['data'])

                            x = x.resample('T').asfreq()

                            print(x)

                            #x = x.fillna(method = "ffill")
                            #x = x.fillna(method = "bfill")

                            testarr = np.array(x['data'])

                            print(testarr)


                            x2 = pd.Series(testarr)
                            y2 = pd.Series(oldoldvalus2)

                            print(x2)
                            print(y2)

                            
                            
                            r = x2.corr(y2)

                            #print(r)
                            #print(rpermenant)

                            if r > rpermenant:
                                parameterems = parameterems.replace("`","")
                                title2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems
                                final_meter_id2 = meter_id
                                final_values6 = values5
                                final_labels6 = labels5
                                final_parameterems2 = parameterems


                                if title2 == oldoldtitle3:
                                    #print('11')
                                    rpermenant = rpermenant
                                else:
                                    #print('22')
                                    title = title2
                                    rpermenant = r

                                    final_values5 = final_values6
                                    final_labels5 = final_labels6

                                    final_meter_id = final_meter_id2
                                    final_parameterems = final_parameterems2
                                    
                                    ylabel = parameterems
                    
                                    b = values5
                                    labeltemp = labels5
                                
                            else:
                                rpermenant = rpermenant

                            rarray.append(r)


                        #a +=5
                        a +=1


                    #print(line_labels)
                    #print(oldoldtitle)
                    #print(oldoldoutliers)
                    #print(oldoldvalus)

                    #print('newvalus')
                    #print(newvalus)

                    #print('b')
                    #print(b)

                    

                   # print(title)
                    #print(b)

                    #print(rpermenant)

                    line_values = b

                    if len(values5) < len(oldoldvalus2):
                        line_labels = oldoldlabe
                    else:
                        line_labels = labels5


                    a = 0

                    while a < len(emsY):

                        #print(a)

                        meter_id = int(emsY[a])
                        parameterems = '`meter_reading`'
                        table = '[' + 'EMStest' + str(meter_id) + ']'

                        #dfemsaug18oct18test = pd.concat([dfemsoct18, dfemsnov18])

                        #df2emsaug18oct18test = dfemsaug18oct18test.loc[:, ['timestamp','metadata_id', 'consumption', 'meter_reading']]

                        #df3emsaug18oct18test = df2emsaug18oct18test.sort_values(by=['timestamp']).set_index("timestamp")

                        #df4emsaug18oct18test = df3emsaug18oct18test[df3emsaug18oct18test['metadata_id'] == meter_id]

                        #df4emsaug18oct18test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                        #dfems5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                        conn = sqlite3.connect('EMSOUT.db')

                        #dfems5.to_sql('EMSclosest', conn, if_exists='replace', index=False)

                        c = conn.cursor()

                        query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        x = pd.DataFrame(timeaxis, columns=['timestamp'])
                        x['data'] = dataset2

                        x['timestamp'] = timeaxis2

                        xxx = x['timestamp']

                        x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                        #x2 = x.set_index('timestamp')

                        labels5 = xxx

                        values5 = x['data']

                        values5 = np.array(values5)

                        oldoldvalus2 = np.array(oldoldvalus)
                    ####################################################
                        if len(labels5) == 0:
                            print(table)

                        else:
                            x = x.set_index('timestamp')
                            x.index = x.index.map(lambda j: j.replace(second=0))

                            print(x['data'])

                            x = x.resample('T').asfreq()

                            print(x)

                            testarr = np.array(x['data'])

                            print(testarr)

                            x2 = pd.Series(testarr)
                            y2 = pd.Series(oldoldvalus2)

                            print(x2)
                            print(y2)

                            
                            
                            r = x2.corr(y2)

                            #print(r)
                            #print(rpermenant)
                            if r > rpermenant:
                                parameterems = parameterems.replace("`","")
                                title2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems
                                final_meter_id2 = meter_id
                                final_values6 = values5
                                final_labels6 = labels5
                                final_parameterems2 = parameterems

                                if title2 == oldoldtitle3:
                                    #print('11')
                                    rpermenant = rpermenant
                                else:
                                    #print('22')
                                    title = title2
                                    rpermenant = r

                                    final_meter_id = final_meter_id2
                                    final_values5 = final_values6
                                    final_labels5 = final_labels6
                                    final_parameterems = final_parameterems2
                                    
                                    ylabel = parameterems
                                    b = values5
                                    labeltemp = labels5
                                
                            else:
                                rpermenant = rpermenant

                            rarray.append(r)


                        #a +=5
                        a +=1


                    #print(line_labels)
                    #print(oldoldtitle)
                    #print(oldoldoutliers)
                    #print(oldoldvalus)

                    

                    #print(title)
                    #print(b)

                    #print(rpermenant)

                    line_values = b

                    if len(values5) < len(oldoldvalus2):
                        line_labels = oldoldlabe
                    else:
                        line_labels = labels5



    
                    

                    line_labels = labeltemp
                    line_values = b

                    residualstartdate = startdate
                    residualenddate = enddate

                    value_min = min(line_values)
                    value_max = max(line_values)

                    outliers = ['f']
                    

                        

                    print(final_meter_id)
                    print(startdate)
                    print(enddate)
                    print(final_values5)

                    parameterems = final_parameterems

                    table = '[' + 'EMStest' + str(final_meter_id) + ']'

                    print(table)
                    print('xxx')



                    labels5 = final_labels5


                    values5 = np.array(final_values5)


                    a = 0
                    X5 = 0
                    X6 = []
                    XYear = []
                    XMonth= []
                    XDay= []
                    XHour= []
                    XMin= []
                    Xsec= []

                    while a < len(labels5):
                        X5 = labels5[a]
                        X5 = X5.replace('[', '')
                        X5 = X5.replace(']', '')
                        X5 = X5.replace("'", "")
                        X5 = X5.replace(":", " ")
                        X5 = X5.replace("-", " ")
                        X5 = X5.replace("/", " ")
                        X5=X5.split()
                        X55 = X5[-3:-1]
                        X6.append(X55)
                        a+=1


                    X7 = np.array(X6)



                    #################################### Smart model datetime


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.replace('-',' ')
                    startdate = startdate.replace(':',' ')
                    startdate = startdate.replace("'"," ")

                    enddate = enddate.replace('-',' ')
                    enddate = enddate.replace(':',' ')
                    enddate = enddate.replace("'"," ")


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.split()
                    enddate = enddate.split()

                    #print(startdate)
                    #print(enddate)

                    startyear = int(startdate[0])
                    startmonth = int(startdate[1])
                    startday = int(startdate[2])

                    endyear = int(enddate[0])
                    endmonth = int(enddate[1])
                    endday = int(enddate[2])

                    startdate = datetime.datetime(startyear, startmonth, startday)
                    enddate = datetime.datetime(endyear, endmonth, endday)
                    z = enddate-startdate

                    #print(z)

                    modelstart = startdate - (4*z)

                    modelend = startdate

                    print(modelstart)
                    print(modelend)

                    weekday00 = []
                    weekday0 = []
                    weekday1 = []
                    weekday2 = []
                    weekday3 = []
                    weekday4 = []
                    weekday5 = []
                    weekday6 = []

                    weekday = []
                    weekend = []

                    weekdaynumber = []
                    weekendnumber = []

                    weekdaydatetime = []
                    weekenddatetime = []

                    modelstart2 = modelstart
                    modelstart3 = modelstart
                    modelend3 = modelend
                    


                    while modelstart2 != modelend + datetime.timedelta(days=1):
                        AA = modelstart2

                        AAday = AA.weekday()

                        #print(AA)
                        #print(AAday)

                        if AAday < 5:
                            weekday.append(str(AA))
                            weekdaynumber.append(AAday)
                            weekdaydatetime.append(AA)
                        else:
                            weekend.append(str(AA))
                            weekendnumber.append(AAday)
                            weekenddatetime.append(AA)
                            

                        modelstart2 = modelstart2 + datetime.timedelta(days=1)



                    print(weekday)

                    print(weekend)

                    print(weekdaynumber)

                    print(weekendnumber)

                    print(weekdaydatetime)

                    print(weekenddatetime)

                    

                    modelstart = str(modelstart)
                    modelstart = "'" + modelstart + "'"

                    modelend = str(modelend)
                    modelend = "'" + modelend + "'"

                    #print(modelstart)

                    #print(modelend)


                    a = 0
                    aa = 0

                    modelweekdaystart = []
                    modelweekdayend = []
                    modelweekendstart = []
                    modelweekendend = []

                    modelweekday = []
                    modelweekend = []

                    modelweekday2 = []
                    modelweekend2 = []

                    while modelstart3 != modelend3 + datetime.timedelta(days=1):

                        if len(weekday) == 0:
                            weekday = weekday
                            b = ''
                            d = -1
                            f = datetime.datetime.now()
                        else:

                            if len(weekday) > a:
                                b = weekday[a]
                                d = weekdaynumber[a]
                                f = weekdaydatetime[a]
                                
                            else:
                                b = weekday[0]
                                d = weekdaynumber[0]
                                f = datetime.datetime.now()

                        if len(weekend) == 0:
                            cc = ''
                            e = -1
                            g = datetime.datetime.now()
                            
                        else:
                            
                            if len(weekend) > aa:
                                cc = weekend[aa]
                                e = weekendnumber[aa]
                                g = weekenddatetime[aa]
                                
                            else:
                                cc = weekend[0]
                                e = weekendnumber[0]
                                g = datetime.datetime.now()
                            


                        if f > g:
                            #print(g)

                            modelweekend.append(cc)

                            if e == 6:
                                


                                #print(modelweekend)

                                g = g + datetime.timedelta(days=1)

                                modelweekend.append(str(g))

                                modelweekend2.append(modelweekend)

                                

                                modelweekend = []

                            
                                

                            
                            aa+=1


                        else:
                            #print(f)

                            modelweekday.append(b)

                            if d == 4:
                                #print(modelweekday)

                                f = f + datetime.timedelta(days=1)

                                modelweekday.append(str(f))

                                
                                

                                modelweekday2.append(modelweekday)

                                modelweekday = []

                            
                            a+=1


                        
                        modelstart3 = modelstart3 + datetime.timedelta(days=1)


                    if len(modelweekday) > 0:
                        
                        f = f + datetime.timedelta(days=1)

                        modelweekday.append(str(f))

                        modelweekday2.append(modelweekday)

                    if len(modelweekend) > 0:
                        
                        g = g + datetime.timedelta(days=1)

                        modelweekend.append(str(g))

                        modelweekend2.append(modelweekend)
                        

                    #print(modelweekday)
                    #print(modelweekend)

                    #print(modelweekday2)
                    print('xxxxxxxxxxxx')
                    print(modelweekday2)
                    #print(modelweekend2)
                    print(modelweekend2)



                    loopdataweekday = []

                    looptimeaxisweekday = []

                    loopdataweekend = []

                    looptimeaxisweekend = []



                    a = 0

                    #print(modelweekday2[3])

                    while a < len(modelweekday2):
                        start = modelweekday2[a][0]
                        end = modelweekday2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        #print(start)
                        #print(end)

                        #print(table)

                        conn = sqlite3.connect('EMSOUT.db')

                        c = conn.cursor()

                        
                        query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        c.execute(query3loop)


                        dataset3loop = c.fetchall()

                        dataset4loop = np.array(dataset3loop)

                        #print(len(dataset4loop))

                        c.execute(query4loop)

                        timeaxis3loop = c.fetchall()

                        #print(len(timeaxis3loop))



                        

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekday.append(dataset4loop)
                                looptimeaxisweekday.append(timeaxis3loop)



                        a +=1

                    print(loopdataweekday)
                    print(looptimeaxisweekday)

                    a = 0
                    

                    while a < len(modelweekend2):
                        start = modelweekend2[a][0]
                        end = modelweekend2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        #print(start)
                        #print(end)

                        #print(table)

                        conn = sqlite3.connect('EMSOUT.db')

                        c = conn.cursor()

                        
                        query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        c.execute(query3loop)


                        dataset3loop = c.fetchall()

                        dataset4loop = np.array(dataset3loop)

                        #print(len(dataset4loop))

                        c.execute(query4loop)

                        timeaxis3loop = c.fetchall()

                        #print(len(timeaxis3loop))



                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekend.append(dataset4loop)
                                looptimeaxisweekend.append(timeaxis3loop)


                        a +=1


                    print(loopdataweekend)
                    print(looptimeaxisweekend)



                    


    ##########weekday data
                    a = 0

                    if len(loopdataweekday) == 0:
                        print('')
                        dataset444 = []
                    else:

                        dataset444 = loopdataweekday[0]

                    while a < len(loopdataweekday):

                        dataset111 = loopdataweekday[a]

                        #print(len(dataset111))

                        #print(dataset111[0])
                        #print(dataset444[0])

                        if np.all(dataset111 == dataset444):
                            print(np.all(dataset111 == dataset444))
                            dataset555 = dataset444

                        else:

                            dataset555 = np.concatenate([dataset555, dataset111])
                            dataset444 = np.concatenate([dataset444, dataset111])

                            #print(len(dataset444))
                            #print(len(dataset555))


                        a+=1


                    #print(dataset444)
                    #print(loopdataweekend[0])


################weekend data
                    a = 0

                    if len(loopdataweekend) == 0:
                        print('')
                        dataset4444 = []
                    else:

                        dataset4444 = loopdataweekend[0]

                    while a < len(loopdataweekend):

                        dataset1111 = loopdataweekend[a]

                        #print(len(dataset1111))

                        #print(dataset1111[0])
                        #print(dataset4444[0])

                        if np.all(dataset1111 == dataset4444):
                            #print(np.all(dataset1111 == dataset4444))
                            dataset5555 = dataset4444

                        else:

                            dataset5555 = np.concatenate([dataset5555, dataset1111])
                            dataset4444 = np.concatenate([dataset4444, dataset1111])

                            #print(len(dataset4444))
                            #print(len(dataset5555))


                        a+=1


                    #print(dataset4444)
                    #print(len(looptimeaxisweekday))
                    #print(looptimeaxisweekday[3])



                            ##########weekday timeaxis
                    a = 0

                    if len(looptimeaxisweekday) == 0:
                        print('')
                        timeaxis444 = []
                    else:

                        timeaxis444 = looptimeaxisweekday[0]

                    while a < len(looptimeaxisweekday):

                        timeaxis111 = looptimeaxisweekday[a]

                        #print(len(timeaxis111))

                        #print(timeaxis111[0])
                        #print(timeaxis444[0])
                        #print(a)

                        if timeaxis111[0] == timeaxis444[0]:
                            timeaxis555 = timeaxis444

                        else:

                            timeaxis555 = timeaxis555 + timeaxis111
                            timeaxis444 = timeaxis444 + timeaxis111
                            

                            #print(len(timeaxis444))
                            #print(len(timeaxis555))


                        a+=1


                    #print(timeaxis444)
                    #print(looptimeaxisweekend[0][0])


################weekend timeaxis
                    a = 0

                    if len(looptimeaxisweekend) == 0:
                        print('')
                        timeaxis4444 = []
                    else:

                        timeaxis4444 = looptimeaxisweekend[0]

                    while a < len(looptimeaxisweekend):

                        timeaxis1111 = looptimeaxisweekend[a]

                        #print(len(timeaxis1111))

                        #print(timeaxis1111[0])
                        #print(timeaxis4444[0])

                        if timeaxis1111[0] == timeaxis4444[0]:
                            timeaxis5555 = timeaxis4444

                        else:

                            #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                            timeaxis5555 = timeaxis5555 + timeaxis1111
                            timeaxis4444 = timeaxis4444 + timeaxis1111

                            #print(len(timeaxis4444))
                            #print(len(timeaxis5555))


                        a+=1


                    #print(timeaxis4444)

                    #print(len(timeaxis444))
                    #print(len(dataset444))

                    #print(len(timeaxis4444))
                    #print(len(dataset4444))



                    x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                    x10fweekday['data'] = dataset444

                    labelsweekday = x10fweekday['timestamp']

                    valuesweekday = x10fweekday['data']

                    valuesweekday = np.array(valuesweekday)

                    #print(labelsweekday)
                    #print(valuesweekday)



                    

                    x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                    x10fweekend['data'] = dataset4444

                    labelsweekend = x10fweekend['timestamp']

                    valuesweekend = x10fweekend['data']

                    valuesweekend = np.array(valuesweekend)

                    #print(labelsweekend)
                    #print(valuesweekend)

                    weekendlabeldateday = []
                    weekdaylabeldateday = []



                    if len(labelsweekday) == 0:
                        print('')

                    else:
                        

                        a = 0
                        
                        X22 = 0
                        X33 = []
                        X777 = []
                        X778 = []
                        X779 = []
                        X77 = []


                        while a < len(labelsweekday):
                            X22 = labelsweekday[a]
                            X22 = X22.replace('[', '')
                            X22 = X22.replace(']', '')
                            X22 = X22.replace("'", "")
                            X22 = X22.replace(":", " ")
                            X22 = X22.replace("-", " ")
                            X22 = X22.replace("/", " ")
                            X22=X22.split()
                            X225 = X22[-3:-1]

                            X771 = X22[0]
                            X772 = X22[1]
                            X773 = X22[2]
                            
                            X777.append(X771)
                            X778.append(X772)
                            X779.append(X773)
                            
                            X33.append(X225)

                            weekdayyear = int(X22[0])
                            weekdaymonth = int(X22[1])
                            weekdayday = int(X22[2])

                            weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                            weekdaylabeldateday.append(weekdaylabeldate.weekday())
                            
                            a+=1

                        X44 = np.array(X33)



                    if len(valuesweekend) == 0:
                        print('')

                    else:



                        a = 0
                        
                        XX22 = 0
                        XX33 = []
                        XX777 = []
                        XX778 = []
                        XX779 = []
                        XX77 = []


                        while a < len(labelsweekend):
                            XX22 = labelsweekend[a]
                            XX22 = XX22.replace('[', '')
                            XX22 = XX22.replace(']', '')
                            XX22 = XX22.replace("'", "")
                            XX22 = XX22.replace(":", " ")
                            XX22 = XX22.replace("-", " ")
                            XX22 = XX22.replace("/", " ")
                            XX22=XX22.split()
                            XX225 = XX22[-3:-1]

                            XX771 = XX22[0]
                            XX772 = XX22[1]
                            XX773 = XX22[2]
                            
                            XX777.append(XX771)
                            XX778.append(XX772)
                            XX779.append(XX773)
                            
                            XX33.append(XX225)

                            weekendyear = int(XX22[0])
                            weekendmonth = int(XX22[1])
                            weekendday = int(XX22[2])

                            weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                            weekendlabeldateday.append(weekendlabeldate.weekday())

                            
                            a+=1

                        XX44 = np.array(XX33)


                    #print(X44)
                    #print(XX44)


                    #print(len(weekdaylabeldateday))
                    #print(weekdaylabeldateday)

                    #print(len(valuesweekday))
                    #print(valuesweekday)


                    a = 3

                    weekdayvaluesavg = []
                    weekdaylabelsavg = []
                    weekdaypredavg = []

                    while a < len(weekdaylabeldateday):
                        a1 = int(valuesweekday[a])
                        a2 = int(valuesweekday[a-1])
                        a3 = int(valuesweekday[a-2])
                        a4 = int(valuesweekday[a-3])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4)/4

                        #print(aavg)

                        if weekdaylabeldateday[a] == 5:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a = a + 4

                        else:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a +=1



                    #print(len(weekdaylabeldateday))
                    #print(len(weekdayvaluesavg))
                    #print(len(weekdaylabelsavg))



                    #print(len(weekendlabeldateday))
                    #print(weekendlabeldateday)

                    #print(len(valuesweekend))
                    #print(valuesweekend)

                        

                    a = 0

                    weekendvaluesavg = []
                    weekendlabelsavg = []
                    weekendpredavg = []

                    while a < len(weekendlabeldateday):
                        a1 = int(valuesweekend[a])
                        a2 = int(valuesweekend[a-1])
                        a3 = int(valuesweekend[a-2])
                        a4 = int(valuesweekend[a-3])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4)/4

                        #print(aavg)

                        if weekendlabeldateday[a] == 0:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a = a + 4

                        else:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a +=1



                    weekdaypredavg = np.array(weekdaypredavg)
                    weekendpredavg = np.array(weekendpredavg)

                    #print(len(weekendlabeldateday))
                    #print(len(weekendvaluesavg))
                    #print(len(weekendlabelsavg))

                    #print(weekendlabeldateday)
                    #print(weekendvaluesavg)
                    #print(weekendlabelsavg)


                    #print(X44)
                    #print(XX44)

                    #print(len(weekdaypredavg))
                    #print(len(weekendpredavg))
                    ###################################################################






                    regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekday) == 0:
                        print('')
                        predvaluweekday = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekday = []

                    else:

                        regr.fit(X44, valuesweekday)
                        #regr.fit(weekdaypredavg, weekdayvaluesavg)
                        predictedweekday = regr.predict(X7)


                        #print(predictedweekday)

                        #print(mean_squared_error(values5, predictedweekday))
                        #print(r2_score(values5, predictedweekday))
                       
                        i = len(predictedweekday)
                        k = 0
                        predvaluweekday = []
                        while k < i:
                            predvalweekday = predictedweekday[k]
                            predvaluweekday.append(predvalweekday)
                            k += 1
                        #print(predvaluweekday)

                        #print(len(predvaluweekday))




                    regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekend) == 0:
                        print('')
                        predvaluweekend = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekend = []

                    else:

                        regrf.fit(XX44, valuesweekend)
                        #regrf.fit(weekendpredavg, weekendvaluesavg)
                        predictedweekend = regrf.predict(X7)


                        #print(predictedweekend)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekend)
                        k = 0
                        predvaluweekend = []
                        while k < i:
                            predvalweekend = predictedweekend[k]
                            predvaluweekend.append(predvalweekend)
                            k += 1
                        #print(predvaluweekend)

                        #print(len(predvaluweekend))

                        print(predvaluweekday)
                        print(predvaluweekend)


                    values = values5
                    labels = labels5
                        
                    


                    

                    
                    
                    

                    ####################################


                    i = len(values)
                    k = 0
                    valu = []
                    while k < i:
                        val = values[k]
                        valu.append(val)
                        k += 1
                    #print(valu)

                    z = len(labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = labels[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)

                    a = 0
                    X2 = 0
               

                    X227 = []
                    X228 = []
                    X229 = []
                    X22 = []
                    X2727 = []

                    while a < len(labels):
                        X2 = str(labels[a])
                        X2 = X2.replace('[', '')
                        X2 = X2.replace(']', '')
                        X2 = X2.replace("'", "")
                        X2 = X2.replace(":", " ")
                        X2 = X2.replace("-", " ")
                        X2 = X2.replace("/", " ")
                        X2=X2.split()
                        X25 = X2[-3:-1]

                        X221 = X2[0]
                        X222 = X2[1]
                        X223 = X2[2]
                        
                        X227.append(X221)
                        X228.append(X222)
                        X229.append(X223)
                        a+=1


                    #print(X227[0])
                    #print(X228[0])
                    #print(X229[0])



                    a = 0

                    while a < len(X227):
                        

                        X2227 = int(X227[a])
                        X2228 = int(X228[a])
                        X2229 = int(X229[a])
                        
                        X22222 = datetime.date(X2227, X2228, X2229)

                        X22222 = X22222.weekday()

                        X2727.append(X22222)

                        a+=1
                        
                    #print(X77)
                    #print(X2727)


                    a=0

                    weekendvalu = []
                    weekdayvalu = []

                    while a < len(valu):
                        if X2727[a] == 5:
                            weekendvalu.append(valu[a])

                        elif X2727[a] == 6:
                            weekendvalu.append(valu[a])

                        else:
                            weekdayvalu.append(valu[a])
                        a+=1
                        

                    weekdaystddev = np.std(weekdayvalu)
                    weekendstddev = np.std(weekendvalu)

                    print(weekdayvalu)
                    print(weekendvalu)
                    print(weekdaystddev)
                    print(weekendstddev)
                    

                    if len(valuesweekday) == 0:
                        print('hi')


                        avgg = np.mean(valu)
                        medavgg = np.median(valu)
                        stddev = np.std(valu)
                        #print(avgg)
                        #print(medavgg)
                        #print(stddev)

                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                        z = avgg + (3*stddev)
                        zz = avgg - (3*stddev)

                        while v < len(valu):
                            if valu[v] > z:
                                #print('bigger')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            elif valu[v] < zz:
                                #print('smaller')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                
                                if v == 0:
                                    print('')
                                else:
                                    valus[v-1] = valu[v-1]

                                    
                                
                            v += 1


                    elif len(predvaluweekend) == 0:

                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            
                        while v < len(valu):
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                            v +=1

                    else:
                        
                        
                            
                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            

                        while v < len(valu):
                            if X2727[v] == 6:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1

                            elif X2727[v] == 5:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1


                            else:
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1









                    
                        



                    if len(values5) < len(oldoldvalus2):


                            
                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        newoutliers = []
                
                
                    
                        while ab < len(oldoldlabe):
                            newoldlab = str(oldoldlabe[ab])
                            newoldlab = newoldlab.replace('-', ' ')
                            newoldlab = newoldlab.replace(':', ' ')
                            newoldlab = newoldlab.split()

                            newoldlab0 = int(newoldlab[0])
                            newoldlab1 = int(newoldlab[1])
                            newoldlab2 = int(newoldlab[2])
                            newoldlab3 = int(newoldlab[3])
                            newoldlab4 = int(newoldlab[4])
                            newoldlab5 = int(newoldlab[5])

                        
                            if bc == len(labels5):
                                #print(bc)
                                bc = bc
                            else:

                                lab = str(labels5[bc])
                                lab = lab.replace('-', ' ')
                                lab = lab.replace(':', ' ')
                                lab = lab.split()

                                lab0 = int(lab[0])
                                lab1 = int(lab[1])
                                lab2 = int(lab[2])
                                lab3 = int(lab[3])
                                lab4 = int(lab[4])
                                lab5 = int(lab[5])


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(values5):
                                        #print(bc)
                                        c = np.nan
                                        newoutliers.append('f')
                                    else:
                                        
                                        newoutliers.append(outliers[bc])
                                        
                                        
                                        bc+=1
                                else:
                                    c = np.nan
                                    #print('no')
                                    newoutliers.append('f')
                            else:
                                c = np.nan
                                #print('no')
                                newoutliers.append('f')

                                    
                            
                            ab+=1
                    else:
                        newoutliers = outliers

                    print(newoutliers)

                    print(outliers)
                    print(len(outliers))

                    print(final_meter_id)
                    print('meter_id')
                    
                    print(line_labels)
                    #print(line_values)
                    
                    #print(oldoldtitle)
                    #print(oldoldoutliers)
                    #print(oldoldvalus)

                    building= request.form.get('buildingselection')
                    utility = request.form.get('utilityselection')

                    a = 0

                    titlefixtemp = ''

                    while a < len(EMStitlefix):
                        titlefix = str(EMStitlefix[a]).split('|')
                        titlefixcheck = int(titlefix[0])

                        if titlefixcheck == int(final_meter_id):
                            titlefixtemp = titlefix[1]

                            a = len(EMStitlefix) + 1
                        else:
                            a+=1

                    print(titlefixtemp)

                    if titlefixtemp == '':
                        title = 'Meter ID: ' + str(final_meter_id) + ' ' + parameterems.replace('`', '')
                    else:
                        title = str(titlefixtemp) + ' ' + parameterems.replace('`', '')


                    legend = title

                    oldoldvalus = oldoldvalusog

                    
                    

                    
                    #print(b)
                    #print(len(b))

                    #print(rpermenant)
                    #print(max(rarray))

                    #print(len(line_labels))
                    print(line_values)
                    print('line_values')
                    #print(len(oldoldoutliers))
                    print(oldoldvalus)

                    print(final_meter_id)
                    print(meter_id2)

                    residualaxismeterid = pd.DataFrame({'meter_id':[final_meter_id]})
                    residualaxismeterid2 = pd.DataFrame({'meter_id':[meter_id2]})
                    
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                    labet = []

                    line_labels = pd.to_datetime(line_labels, format = '%Y-%m-%d %H:%M:%S')

                    z = len(line_labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = line_labels[y]
                        labet.append(lab)
                        y += 1
                    print(labet)

                    line_labels = np.array(labet)

                    print(line_labels)

                    residualsklearndfvalues = pd.DataFrame({'timestamp':line_labels, 'data':line_values})

                    residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                    print(residualsklearndfvalues['data'])

                    residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                    residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                    print(residualsklearndfvalues)

                    testarr = np.array(residualsklearndfvalues['data'])

                    z = len(testarr)
                    y = 0
                    valtest = []
                    while y < z:
                        val = testarr[y]
                        if np.isnan(val) == True:
                            valtest.append('f')
                        else:
                            
                            valtest.append(int(val))
                        y += 1
                    testarrvalus = valtest

                    print(testarrvalus)
                    print(len(testarrvalus))

                    


                    residualsklearndfoutliers = pd.DataFrame({'timestamp':line_labels, 'outliers':outliers})

                    residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')
                    residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]
                    
                    residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                    testarroutliers = np.array(residualsklearndfoutliers['outliers'])

                    print(testarroutliers)

                    z = len(testarroutliers)
                    y = 0
                    outtest = []
                    while y < z:
                        out = testarroutliers[y]
                        if out == 'f':
                            outtest.append('f')
                        elif np.isnan(out) == True:
                            outtest.append('f')
                        else:
                            
                            outtest.append(int(out))
                        y += 1
                    testarroutliers = outtest

                    


                    testarrlabe = residualsklearndfvalues.reset_index()
                    testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                    z = len(testarrlabe)
                    y = 0
                    labetest = []
                    while y < z:
                        lab = testarrlabe[y]
                        labetest.append(lab)
                        y += 1
                    testarrlabe = labetest
                    print(testarrlabe)
                    print(len(testarrlabe))
                    print(len(line_values))

                    print(testarroutliers)
                    print(len(testarroutliers))

                    line_values = testarrvalus
                    line_labels = testarrlabe

                    outliers = testarroutliers

                    title = title.replace(':', '')
                    title = 'Closest Correlation: ' + title + '. Correlation value, r, ' + str(round(rpermenant, 2))

                    line_valuestemp = []
                    oldoldvalustemp= []
                    line_labelstemp= []
                    outlierstemp= []
                    oldoldoutlierstemp= []
                    oldoldlabetemp = []

                    if len(line_labels) != len(oldoldlabe):
                        a = 0
                        bb=0
                        cc=0
                        if len(line_labels) > len(oldoldlabe):
                            
                            while a < len(line_labels):
                                b = str(line_labels[bb])
                                c = str(oldoldlabe[cc])

                                if str(b) == str(c):
                                    line_valuestemp.append(line_values[bb])
                                    oldoldvalustemp.append(oldoldvalus[cc])
                                    line_labelstemp.append(line_labels[bb])
                                    outlierstemp.append(outliers[bb])
                                    oldoldoutlierstemp.append(oldoldoutliers[cc])
                                    oldoldlabetemp.append(oldoldlabe[cc])
                                    bb+=1
                                    cc+=1

                                    if cc == len(oldoldlabe) - 1:
                                        a = len(line_labels) + 1
                                    else:

                                        a+=1
                                else:
                                    bb+=1
                                    a+=1

                        else:
                            while a < len(oldoldlabe):
                                b = str(line_labels[bb])
                                c = str(oldoldlabe[cc])
                                print('2')

                                
                                if b == c:
                                    line_valuestemp.append(line_values[bb])
                                    oldoldvalustemp.append(oldoldvalus[cc])
                                    line_labelstemp.append(line_labels[bb])
                                    outlierstemp.append(outliers[bb])
                                    oldoldoutlierstemp.append(oldoldoutliers[cc])
                                    oldoldlabetemp.append(oldoldlabe[cc])

                                    bb+=1
                                    cc+=1

                                    if bb == len(line_labels) - 1:
                                        a = len(oldoldlabe) + 1
                                    else:

                                        a+=1
                                else:
                                    cc+=1
                                    a+=1

                        line_values = line_valuestemp
                        oldoldvalus = oldoldvalustemp
                        line_labels = line_labelstemp
                        outliers = outlierstemp
                        oldoldoutliers = oldoldoutlierstemp
                        oldoldlabe = oldoldlabetemp


                    print('oldoldvalus')
                    print(oldoldvalus)



                





                elif datatype == 'Synetica':
                    print('a')


                    Syntitlefix = ["MC044-L01/M3|Faraday Lifeboat Electricity", "MC044-L01/M6|Chiller No 1 Electricity", "MC044-L01/M8|Chiller No 2 Electricity", "MC044-L01/M7|MCCP Meter", "MC044-L01/M1|DB LCP", "MC044-L01/M2|UPS Output", "MC044-L01/M4|UPS Output Rectifier", "MC044-L02/M21R856|Central Services Immersion Heater", "MC044-L01/M5|Faraday Building Gas","MC076-L01/M6|Engineering Water","MC076-L01/M3|Engineering Gas Meter","MC076-L01/M9R20|Engineering Heat Meter","MC048-L01/M1|Chaplaincy Centre Electricity", "MC048-L01/M2|Chaplaincy Centre Kitchen Electricity","MC048-L01/M3|Chaplaincy Centre Water", "MC048-L01/M4|Chaplaincy Centre Kitchen Water","MC048-L01/M5|Chaplaincy Centre Heat Meter","MC003_L02_M1|Bailrigg House Electricity","MC003_L02_M4|Bailrigg House Water","MC003_L02_M3|Bailrigg House Gas","AP081-L01/M2|Barker House Farm Water","AP081-L01/M3|Barker House Farm Gas","MC030-L01/M3|Bowland Annexe House Electricity","MC042-L01/M10R0|Bowland Annexe Heat Meter","MC042-L01/M9R3205|Bowland Ash Electricity","MC042-L01/M1|Bowland Ash Water","MC042-L01/M11R0|Bowland Ash Heat Meter","MC030-L01/M2|Bowland Ash Gas","MC014-L01/M1|Bowland Hall 1 - 7 Electricity", "MC014_L02_M1|Bowland Hall 8-15 Electricity","MC014-L01/M2|Bowland Hall 1 - 7 Water", "MC014_L02_M2|Bowland Hall 8-15 Water","MC043-L01/M3|Bowland North Electricity","MC043-L01/M2|Bowland North Water","MC043-L01/M1|Bowland North Heat Meter","MC062-L01/M25R2064|Bowland Tower MCCP Panel", "MC062-L01/M26R2068|Bowland Tower Sprinkler", "MC062-L01/M7|Bowland Tower Dis Board", "MC062-L01/M27R2072|Bowland Tower D & E Lighting", "MC062-L01/M28R2076|Bowland Tower D & E Total", "MC062-L01/M36R2060|Bowland Tower F, G & H Lighting", "MC062-L01/M37R2064|Bowland Tower F, G & H Total", "MC062-L01/M29R2080|Bowland Tower J, K & L Lighting", "MC062-L01/M30R2084|Bowland Tower J, K & L Total", "MC062-L01/M34R2052|Bowland Tower M, N & O Lighting", "MC062-L01/M35R2056|Bowland Tower M, N & O Total", "MC062-L01/M4|Bowland Tower E Flat 16/17", "MC062-L01/M21R2048|Bowland Tower South F 18", "MC062-L01/M22R2052|Bowland Tower S F19/20", "MC062-L01/M1|Bowland Tower East B Flr", "MC062-L01/M2|Bowland Tower East C Flr", "MC062-L01/M13R2064|Bowland Tower South B Flr", "MC062-L01/M24R2060|Bowland Tower South C Flr","MC062-L01/M14R2068|Bowland Tower Water","MC062-L01/M17R2080|Bowland Tower Sth and E Wing Heat Meter", "MC062-L01/M16R2076|Slaidburn House Heat Meter","MC202-L01/M12R999|Charles Carter A Floor A1 Total", "MC202-L01/M13R999|Charles Carter A Floor A1 Lighting", "MC202-L01/M14R999|Charles Carter A Floor A2 Total", "MC202-L01/M15R999|Charles Carter A Floor A2 Lighting", "MC202-L01/M16R999|Charles Carter B Floor B1 Total", "MC202-L01/M17R999|Charles Carter B Floor B1 Lighting", "MC202-L01/M18R999|Charles Carter B Floor B2 Total", "MC202-L01/M19R999|Charles Carter B Floor B2 Lighting", "MC202-L01/M10R72|Charles Carter Plant Room DB", "MC202-L01/M11R72|Charles Carter Comms Plant Room", "MC202-L01/M20R999|Charles Carter C Floor C1 Total", "MC202-L01/M21R999|Charles Carter C Floor C1 Lighting", "MC202-L01/M22R999|Charles Carter C Floor C2 Total", "MC202-L01/M23R999|Charles Carter C Floor C2 Lighting", "MC202-L01/M24R999|Charles Carter D Floor D1 Total", "MC202-L01/M25R999|Charles Carter D Floor D1 Lighting", "MC202-L01/M26R999|Charles Carter D Floor D2 Total", "MC202-L01/M27R999|Charles Carter D Floor D2 Lighting","MC202_L01_M1|Charles Carter Water","MC202_L01_M2|Charles Carter Heat Meter","MC032-L02/M1|County South Flats 5, 6 & 7", "MC032-L01/M16R999|County South DB D2 Lighting", "MC032-L02/M11R999|County South DB C2 Power", "MC032-L02/M12R999|County South DB C2 Lighting", "MC032-L01/M11R999|County South DB B1 Power", "MC032-L01/M12R999|County South DB B1 Lighting", "MC032-L01/M13R999|County South DB C1 Power", "MC032-L01/M14R999|County South DB C1 Lighting", "MC032-L01/M15R999|County South DB D1 Power", "MC032-L03/M1|County South Flats 1 2 3 4", "MC032-L03/M13R999|County South DB D3 Power", "MC032-L03/M14R999|County South DB D3 Lighting", "MC032-L03/M11R999|County South DB C3 Power", "MC032-L03/M12R999|County South DB C3 Lighting", "MC032-L03/M9R999|County South DB B3 Power", "MC032-L03/M10R999|County South DB B3 Lighting", "MC032-L01/M1|County South Flat 10 11 12 13 14 ", "MC032-L02/M13R999|County South BD D2 Power", "MC032-L02/M14R999|County South BD D2 Lighting", "MC032-L011/M8|County South Plant Room Lighting", "MC032-L011/M7|County South Plant Room Power", "MC032-L09/M1|County South Plant Room", "MC032-L04/M1|County South BB01 Riser", "MC032-L04/M2|County South BB02 Riser", "MC032-L04/M3|County South BB03 Riser", "MC032-L04/M10R999|County South DB A1 Power", "MC032-L04/M9R999|County South DB A1 Lighting", "MC032-L04/M8|County South Main Incomer", "MC032-L011/M11R52|County South Kitchen Immersion Heater","MC134-L02/M2|County South Res 75 - 77 Water","MC032-L011/M6|County South Laundrette Heat Meter","MC032-L09/M10R2052|County South Laundrette Gas", "MC134-L02/M1|County South Res 75 - 77","MC126-L01/M1|Fylde Pilling Water","MC078-L02/M1|George Fox Electricity", "MC078-L03/M2|George Fox Immersion Heater Ground Floor Electricity", "MC078-L03/M3|George Fox Immersion Heater 1st Floor Electricity","MC078-L02/M3|George Fox Water","MC031-L01/M3|Great Hall Electricity","MC031-L01/M1|Great Hall Water","MC031-L01/M4|Great Hall Gas","MC070-L04/M5|Biology Basement No 1 Immersion Heater", "MC070-L04/M6|Biology Basement No 2 Immersion Heater", "MC070-L01/M1|IENS Phase 1 Electricity", "MC070-L01/M2|NERC Phase 1 IENS Re Furb", "MC070-L01/M7|Biology Phase 1 No 1 Immersion Heater", "MC070-L01/M8|Biology Phase 1 No 2 Immersion Heater","MC070-L01/M3|IENS Phase 1 Water", "MC070-L03/M1|IENS Phase 2 Water - NERC","MC070-L01/M9R20|IENS Phase 1 Heat Meter", "MC070-L04/M10R20|IENS Phase 2 Heat Meter","MC070-L01/M4|IENS Phase 1 Gas", "MC070-L02/M6|IENS Phase 2 Gas - NERC","MC102-L01/M3|Infolab Electricity", "MC102-L01/M5|Infolab Chiller No 1 Electricity", "MC102-L01/M6|Infolab Chiller No 2 Electricity","MC102-L01/M4|Infolab Water","MC102-L01/M1|Plant Room Gas","MC070-L04/M3|LEC 2 NERC Gas","MC065-L01/M13R5099|DB A1P", "MC065-L01/M14R5099|DB B1L", "MC065-L01/M15R5099|DB B1P", "MC065-L01/M19R5099|DB B2P", "MC065-L01/M12R5099|DB A1L", "MC065-L01/M18R5099|DB B2L", "MC065-L01/M16R5099|DB A2L", "MC065-L01/M17R5099|DB A2P", "MC065-L04/M10R45099|DB C2P", "MC065-L04/M9R45099|DB C2L","MC204-L02/M3|Steam Room", "MC204-L02/M12R2060|AHU 1", "MC204-L02/M13R2064|AHU 2", "MC204-L02/M14R2068|Floating Floor", "MC204-L02/M4|MCCP 1", "MC204-L02/M1|MCCP 2", "MC204-L02/M9R2048|Passenger Lift", "MC204-L02/M6|Sauna", "MC204-L01/M9R999|BasePlRmlgs 01-L", "MC204-L01/M10R999|BasePlRm P DB01P", "MC204-L01/M11R999|Wet CH L DB-02-L", "MC204-L01/M12R999|Wet Ch P DB-02-P", "MC204-L02/M7|DB External", "MC204-L02/M15R2072|DB 5", "MC204-L03/M9R52|Main Electric Sub No 12 Sports Centre", "MC204-L02/M16R2076|DB 6", "MC204-L02/M8|Comms DB", "MC204-L02/M10R2052|Generator", "MC204-L02/M5|Pool Filter", "MC204-L02/M16R2076|Ground Floor Dry Lighting", "MC204-L02/M2|Ground Floor Dry Power", "MC204-L01/M15R999|Ground Floor Fitness Lighting", "MC204-L01/M16R999|Grond Floor Fitness Power", "MC204-L01/M17R999|Roof Lighting", "MC204-L01/M18R999|Roof Power","MC204-L01/M1|Sports Centre Water","MC204-L01/M5|CT Heating DHW Primary", "MC204-L01/M6|MTHW Heating Primary", "MC204-L01/M7|CT Heating Secondary", "MC204-L01/M8|VT Heating Secondary","MC204-L01/M2|Main Hall Gas Meter", "MC204-L01/M3|Gas Boilers", "MC204-L01/M4|Main Gas Meter across the Road","MC075-L02/M1|Management No 1 Immersion Heater", "MC075-L02/M2|Management No 2 Immersion Heater", "MC203-L01/M4|Management Phase 2 Adj Lift 1 Electricity","MC075-L02/M3|Management School Phase 1 Heat Meter","MC062-L01/M40R20|Slaidburn House Electricity", "MC061-L01/M5|LUSU Shop Electricity","MC001-L01/M3|The Croft Electricity","MC001-L01/M1|The Croft Water","MC001-L01/M2|The Croft Gas","MC051-L01/M1|University House 1 Phase 1", "MC051-L01/M3|University House 1 Phase 2", "MC051-L01/M6|University House Immersion Heater","MC051-L01/M5|University House Water","MC051-L01/M4|University House Heat Meter","MC077-L01/M1|Whewell Building Electricity","MC077-L01/M2|Whewell Building Water","MC200-L01/M9R2048|DB 1C", "MC200-L01/M10R2052|BMS Panel", "MC200-L01/M11R2056|Lift", "MC200-L01/M12R2060|Chiller Units", "MC200-L01/M1|DB 1A", "MC200-L01/M2|DB 1B", "MC200-L01/M3|DB 2A", "MC200-L01/M4|DB 2B", "MC200-L01/M5|DB 3A", "MC200-L01/M6|DB 3B", "MC200-L01/M7|Dimmer Rack No 1", "MC200-L01/M8|Dimmer Rack No 2","MC200-L01/M13R2064|LICA Heat Meter","MC061-L04/M23R52|CHP Elct Input","MC061-L01/M14R20|CHP Heat Meter", "MC061-L04/M6|Biomass Heat Meter","MC061-L01/M8|MCCP Electric", "MC061-L01/M1|Circulation Pump No 1", "MC061-L01/M2|Circulation Pump No 2", "MC061-L01/M3|Circulation Pump No 3", "MC061-L01/M4|Circulation Pump No 4","MC061-L01/M6|Water Meter RHS Rear", "MC061-L01/M5|Water Meter LHS Rear","MC171-L01/M9R999|Post Graduate Statistics Electricity","MC171-L01/M1|Post Graduate Statistics Water","MC171-L01/M21R20|Post Graduate Statistics Heat Meter","MC067-L01/M9R52|Pre School Centre Electricity","MC067-L01/M1|Pre School Centre Water","MC067-L01/M2|Pre School Centre Gas","MC050-L01/M1|Security Office Electricity","MC061-L04/M24R52|No 1 Transformer Sub 1 Energy Centre", "MC061-L04/M26R52|No 2 Transformer Sub 1 Energy Centre", "MC061-L04/M14R2060|Boiler House CHP Gas","MC061-L04/M1|Boiler Gas", "MC061-L04/M2|Furness and Fylde Residence", "MC061-L04/M13R2056|Firm Gas", "MC061-L04/M1|3 Gas Boilers","MC199-L01/M11R2048|Chiller No 2", "MC199-L01/M3|LV3-NE Supply", "MC199-L01/M6|ISS Total", "MC199-L01/M13R2056|LV2-ESS Supply", "MC199-L01/M14R2060|Chiller No 1","MC013-L01/M2|No 1 Transformer Sub 3 Gt Hall", "MC013-L01/M4|No 2 Transformer Sub 3 Gt Hall", "MC013-L01/M3|LEC Workshops NE Corner","MC203-L01/M10R1280|No 1 Transformer Sub 5 Grizedale College", "MC203-L01/M11R1280|No 2 Transformer Sub 5 Grizedale College","MC102-L04/M9R52|No 1 Transformer Sub 6 Info Lab", "MC102-L04/M10R52|No 2 Transformer Sub 6 Info Lab","MC138-L01/M9R52|No 1 Transformer Sub 7 Alex Park", "MC138-L01/M12R52|No 2 Transformer Sub 7 Alex Park","MC068-L01/M13R52|No 1 Transformer Sub 8 Lec 1", "MC068-L01/M14R52|Lec 3 No 1 Transformer No 10 Sub Station","MC140-L01/M14R52|No 1 Transformer SS Furness Residence","MC199-L01/M1|Non Ess (MCCN)", "MC199-L01/M4|LV4-NE Supply", "MC199-L01/M10R52|Incomer No 2", "MC199-L01/M12R2052|Standby Gener", "MC071-L02/M1|Flat 1 Comsumer Unit", "MC071-L02/M2|Flat 2 Comsumer Unit", "MC071-L02/M3|Flat 3 Comsumer Unit", "MC071-L02/M4|Flat 4 Comsumer Unit", "MC071-L02/M13R2064|Flat 5 Comsumer Unit", "MC071-L02/M14R2068|Flat 6 Comsumer Unit", "MC071-L02/M15R2072|Flat 7 Comsumer Unit", "MC071-L02/M23R2056|Power Section DB LCDB 021", "MC071-L02/M24R2060|Lighting Section DB LCDB 021", "MC071-L02/M25R2064|Power Section DB NDB 02", "MC071-L02/M26R2068|Lighting Section DB NDB 02", "MC071-L02/M27R2072|Power Section DB LBDB 021", "MC071-L02/M28R2076|Lighting Section DB LBDB 021", "MC071-L02/M29R2080|Power Section DB NDB 01", "MC071-L02/M30R2084|Lighting Section DB NDB 01", "MC071-L02/M31R2088|Power Section DB LADB 021", "MC071-L02/M32R2092|Lighting Section DB LADB 021", "MC071-L01/M18R2084|SW Bus Bar", "MC071-L01/M17R2080|NE Bus Bar", "MC071-L01/M41R2080|Elect A Floor", "MC071-L01/M4|NW Pass Lift", "MC071-L01/M19R2088|South Block DB DB 4X", "MC071-L01/M34R2052|PWR Foyer GDB 3", "MC071-L01/M35R2056|Lgt Foyer GDB 3", "MC071-L01/M3|North East Lift", "MC071-L01/M32R2092|Power DB LBDB 011", "MC071-L01/M34R2052|Power Foyer DB GDB 003", "MC071-L01/M35R2056|Lighting Foyer DB GDB 003", "MC071-L01/M36R2060|Power DB LADB 011", "MC071-L01/M37R2064|Lighting DB LADB 011","MC131-L01/M3|Furness Hawkshead Water", "MC071-L02/M5|Flat 1 Water Meter", "MC071-L02/M6|Flat 2 Water Meter", "MC071-L02/M7|Flat 3 Water Meter", "MC071-L02/M8|Flat 4 Water Meter", "MC071-L02/M16R2076|Flat 5 Water Meter", "MC071-L02/M17R2080|Flat 6 Water Meter", "MC071-L02/M18R2084|Flat 7 Water Meter", "MC071-L01/M38R2068|Main Water Meter", "MC071-L01/M40R2076|Pressurisation Make up Water", "MC071-L01/M38R2068|Furness 140 Main Water IN ","MC071-L02/M9R2048|Flat 1 Heat Meter", "MC071-L02/M10R2052|Flat 2 Heat Meter", "MC071-L02/M11R2056|Flat 3 Heat Meter", "MC071-L02/M12R2060|Flat 4 Heat Meter", "MC071-L02/M19R2088|Flat 5 Heat Meter", "MC071-L02/M20R2092|Flat 6 Heat Meter", "MC071-L02/M21R2048|Flat 7 Heat Meter", "MC071-L01/M23R2056|LPHW DHWS Heat Meter","LV1 UPS 1 Campus Servers DB/E/S4B|Campus Services DB-E-S4B", "LV1 UPS 1 Regional Networking and Services DB/E/S3B|Regional Network and Services DB-E-S3B", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1B|Regional Campus Co-Lo DB-E-S1B", "LV1 UPS 1 Campus Network DB/E/S2B|Campus Network DB-E-S2B", "LV1 UPS 1 Building Comms DB/E/S5B|Building Coms DB-E-S5B", "LV1 UPS 1 Campus Servers DB/E/S4A|Campus Servers DB-E-S4A", "LV1 UPS 1 Regional Networking and Services DB/E/S3A|Regional Networking Services DB-E-S3A", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1A|Regional and Campus Co Lo DB-E-S1A", "LV1 UPS 1 Campus Network DB/E/S2A|Campus Network DB-E-S2A", "LV1 UPS 1 Building Comms DB/E/S5A|Building Coms DB-E-S5A", "LV2 - ESS Supply From LV1 -ESS|LV2 ESS Main M", "LV2 - Essential Mechanical Control Centre 2/6|Ess Mech Control Centre", "LV2 - ESS CB/E/M2 2/8|DB-E-M2", "LV2 - ESS UPS Future|Future UPS", "LV1 -UPS1 Incomer No1|UPSLV-US-1", "LV2 - ESS UPS 2/4|UPSLV-US-4","ISS Main Water Meter|ISS Water Meter","ISS Main Heat Meter|ISS Heat Meter"]   

                    
                    SYNtablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Syntables.csv")

                    SYNtables = SYNtablesdf['tables']

                    SYNtables = np.array(SYNtables)


                    a = 0

                    synY2 = []

                    while a < len(SYNtables):
                        SYNunique = str(SYNtables[a])
                        SYNunique = SYNunique.replace('Syntest', '')
                        synY2.append(SYNunique)
                        

                        


                        a+=1



                    print('SynY')
                    print(synY2)















                    df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    #print(values1)
                    #print(timestamp)
                    print(title)

                    ylabelarray = str(title).split()
                    ylabel = ylabelarray[-1]


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    #print(oldvalues1)
                    #print(oldtimestamp)
                    print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    oldylabel = oldylabelarray[-1]



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    #print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    oldoldylabel = oldoldylabelarray[-1]



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    print('oldoldlabe')
                    print(oldoldlabe)
                    print(len(oldoldlabe))



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisddf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    #print(values1)
                    #print(timestamp)
                    print(title)

                    ylabelarray = str(title).split()
                    ylabel = ylabelarray[-1]


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    #print(oldvalues1)
                    #print(oldtimestamp)
                    print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    oldylabel = oldylabelarray[-1]



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    #print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    oldoldylabel = oldoldylabelarray[-1]



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    print(oldoldlabe)
                    print('oldoldlabe')



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisdf.iloc[0,1]


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max

                    meter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                    meter_id = meter_id.iloc[0,1]
                    oldmeter_id = oldmeter_id.iloc[0,1]
                    oldoldmeter_id = oldoldmeter_id.iloc[0,1]

                    print('meter_id')
                    print('oldmeter_id')
                    print('oldoldmeter_id')

                    print(meter_id)
                    print(oldmeter_id)
                    print(oldoldmeter_id)

                    print('title')
                    print(title)
                    print(oldtitle)
                    print(oldoldtitle)

                    parameterems = str(compare1).split()
                    parameterems = parameterems[-1]

                    print(parameterems)


                    if compare1 == title:
                        print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        


                    elif compare1 == oldtitle:
                        print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold



                    elif compare1 == oldoldtitle:
                        print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    print(startdate)
                    print(enddate)

                    ylabel = ''


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max


                    if compare1 == title:
                        print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        


                    elif compare1 == oldtitle:
                        print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold



                    elif compare1 == oldoldtitle:
                        print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    print(startdate)
                    print(enddate)

                    ylabel = ''


                    print(oldoldvalus)

                    oldoldvalustemp = []
                    labetemp = []

                    oldoldoutlierstemp = []

                    a = 0

                    while a < len(oldoldvalus):

                        b = oldoldvalus[a]

                        if b == 'f':
                            c = np.nan
                            oldoldvalustemp.append(c)
                            a+=1
                        else:
                            oldoldvalustemp.append(int(b))
                            
                            a+=1



                    oldoldvalusog = oldoldvalus


                    print(oldoldvalustemp)
                    print(labetemp)


                    oldoldvalus = oldoldvalustemp

                    dfoldold2 = dfoldold2.replace('f', np.nan)

                    print('dfs')
                    print(dfoldold2)


                    dfoldold2 = dfoldold2.fillna(method = "ffill")

                    dfoldold2 = dfoldold2.fillna(method = "bfill")

                    print('dfs')
                    print(dfoldold2)

                    oldoldvalues2 = dfoldold2.iloc[:,2].values


                    print(oldoldvalues2)


                    oldoldit = len(oldoldvalues2)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues2[oldoldkt]
                        oldoldvalu.append(int(oldoldval))
                        oldoldkt += 1
                    oldoldvalus = oldoldvalu
                    print(oldoldvalu)



                    print('oldoldvalus')
                    print('labe')
                    print(oldoldvalus)
                    print(labe)

                    print(oldoldoutliers)
                    print(len(oldoldoutliers))
                    print(len(oldoldvalus))
                    print(len(labe))


    


    ###########################################Synetica

                    


                    a = 0

                    b = []
                    labeltemp = []
                    oldvaluestemp = []

                    rpermenant = 0

                    rarray = []

                    title = ''


                        


                    print(len(synY2))

                    while a < len(synY2):

                        #print(a)

                        meter_id = synY2[a]
                        parametersyn = '`reading`'
                        table = '[' + 'Syntest' + str(meter_id) + ']'

                        #df3synaug18oct18test = df2synaug18oct18test.sort_values(by=['timestamp']).set_index("timestamp")

                        #df4synaug18oct18test = df3synaug18oct18test[df3synaug18oct18test['name'] == meter_id]

                        #df4synaug18oct18test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                        #dfsyn5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                        conn = sqlite3.connect('SynOUT.db')

                        #dfsyn5.to_sql('Synclosest', conn, if_exists='replace', index=False)

                        c = conn.cursor()

                        query = "SELECT " + parametersyn + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        x = pd.DataFrame(timeaxis, columns=['timestamp'])
                        x['data'] = dataset2

                        x['timestamp'] = timeaxis2

                        xxx = x['timestamp']

                        x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                        #x2 = x.set_index('timestamp')

                        labels5 = xxx

                        values5 = x['data']

                        values5 = np.array(values5)

                        oldoldvalus2 = np.array(oldoldvalus)


                        ####################################################

                        if len(labels5) == 0:
                            print(table)


                        else:

                            x = x.set_index('timestamp')
                            x.index = x.index.map(lambda j: j.replace(second=0))

                            print(x['data'])

                            x = x.resample('T').asfreq()

                            print(x)

                            testarr = np.array(x['data'])

                            print(testarr)

                            x2 = pd.Series(testarr)
                            y2 = pd.Series(oldoldvalus2)

                            print(x2)
                            print(y2)

                            
                            
                            r = x2.corr(y2)

                            #print(r)
                            #print(rpermenant)

                            if r > rpermenant:
                                parametersyn = parametersyn.replace("`","")
                                title2 = 'Meter ID: ' + str(meter_id) + ' ' + parametersyn
                                final_meter_id2 = meter_id
                                final_parameterems = parametersyn
                                final_values6 = values5
                                final_labels5 = labels5



                                if title2 == oldoldtitle3:
                                    #print('11')
                                    rpermenant = rpermenant
                                else:
                                    #print('22')
                                    title = title2
                                    rpermenant = r
                                    final_meter_id = final_meter_id2
                                    final_values5 = final_values6
                                    
                                    ylabel = parametersyn
                                    b = values5
                                    labeltemp = labels5
                                    oldvaluestemp = oldoldvalus
                                
                            else:
                                rpermenant = rpermenant

                            rarray.append(r)


                        #a +=5
                        a +=1


                    


                    print(line_labels)
                    print(oldoldtitle)
                    print(oldoldoutliers)
                    print(oldoldvalus)
                    print(title2)
                    

                    print(title)
                    print(b)

                    print(rpermenant)

                    print(final_meter_id)

                    if len(values5) < len(oldoldvalus2):
                        line_labels = oldoldlabe
                    else:
                        line_labels = labels5

                    

                    line_labels = labeltemp
                    line_values = b

                    residualstartdate = startdate
                    residualenddate = enddate

                    value_min = min(line_values)
                    value_max = max(line_values)

                    outliers = ['f']



                    if len(line_values) > len(oldoldvalus):
                        
                        oldoldvalus = oldvaluestemp
                        newoldoutliers = []

                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        while ab < len(line_labels):
                            
                            #print(ab)
                            

                            lab = str(line_labels[ab])
                            lab = lab.replace('-', ' ')
                            lab = lab.replace(':', ' ')
                            lab = lab.split()

                            lab0 = int(lab[0])
                            lab1 = int(lab[1])
                            lab2 = int(lab[2])
                            lab3 = int(lab[3])
                            lab4 = int(lab[4])
                            lab5 = int(lab[5])

                        
                            if bc == len(oldoldlabe):
                                #print(bc)
                                bc = bc
                            else:
                                newoldlab = str(oldoldlabe[bc])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                                


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)
                            if diff > datetime.timedelta(seconds=00, minutes=5, hours=0, days=0):
                                xy = datetime.timedelta(seconds=00, minutes=9, hours=0, days=0)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(oldoldoutliers):
                                        #print(bc)
                                        
                                        newoldoutliers.append('f')
                                    else:
                                        
                                        newoldoutliers.append(oldoldoutliers[bc])
                                        
                                        
                                        bc+=1
                                else:
                                    
                                    #print('no')
                                    newoldoutliers.append('f')
                            else:
                                
                                #print('no')
                                newoldoutliers.append('f')

                                    

                            ab+=1
                        oldoldoutliers = newoldoutliers
                        

                    print(final_meter_id)
                    print(startdate)
                    print(enddate)
                    print(final_values5)

                    parameterems = final_parameterems

                    table = '[' + 'Syntest' + str(final_meter_id) + ']'

                    print(table)
                    print('xxx')



                    labels5 = final_labels5


                    values5 = np.array(final_values5)


                    a = 0
                    X5 = 0
                    X6 = []
                    XYear = []
                    XMonth= []
                    XDay= []
                    XHour= []
                    XMin= []
                    Xsec= []

                    while a < len(labels5):
                        X5 = labels5[a]
                        X5 = X5.replace('[', '')
                        X5 = X5.replace(']', '')
                        X5 = X5.replace("'", "")
                        X5 = X5.replace(":", " ")
                        X5 = X5.replace("-", " ")
                        X5 = X5.replace("/", " ")
                        X5=X5.split()
                        X55 = X5[-3:-1]
                        X6.append(X55)
                        a+=1


                    X7 = np.array(X6)



                    #################################### Smart model datetime


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.replace('-',' ')
                    startdate = startdate.replace(':',' ')
                    startdate = startdate.replace("'"," ")

                    enddate = enddate.replace('-',' ')
                    enddate = enddate.replace(':',' ')
                    enddate = enddate.replace("'"," ")


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.split()
                    enddate = enddate.split()

                    #print(startdate)
                    #print(enddate)

                    startyear = int(startdate[0])
                    startmonth = int(startdate[1])
                    startday = int(startdate[2])

                    endyear = int(enddate[0])
                    endmonth = int(enddate[1])
                    endday = int(enddate[2])

                    startdate = datetime.datetime(startyear, startmonth, startday)
                    enddate = datetime.datetime(endyear, endmonth, endday)
                    z = enddate-startdate

                    #print(z)

                    modelstart = startdate - (4*z)

                    modelend = startdate

                    print(modelstart)
                    print(modelend)

                    weekday00 = []
                    weekday0 = []
                    weekday1 = []
                    weekday2 = []
                    weekday3 = []
                    weekday4 = []
                    weekday5 = []
                    weekday6 = []

                    weekday = []
                    weekend = []

                    weekdaynumber = []
                    weekendnumber = []

                    weekdaydatetime = []
                    weekenddatetime = []

                    modelstart2 = modelstart
                    modelstart3 = modelstart
                    modelend3 = modelend
                    


                    while modelstart2 != modelend + datetime.timedelta(days=1):
                        AA = modelstart2

                        AAday = AA.weekday()

                        #print(AA)
                        #print(AAday)

                        if AAday < 5:
                            weekday.append(str(AA))
                            weekdaynumber.append(AAday)
                            weekdaydatetime.append(AA)
                        else:
                            weekend.append(str(AA))
                            weekendnumber.append(AAday)
                            weekenddatetime.append(AA)
                            

                        modelstart2 = modelstart2 + datetime.timedelta(days=1)



                    print(weekday)

                    print(weekend)

                    print(weekdaynumber)

                    print(weekendnumber)

                    print(weekdaydatetime)

                    print(weekenddatetime)

                    

                    modelstart = str(modelstart)
                    modelstart = "'" + modelstart + "'"

                    modelend = str(modelend)
                    modelend = "'" + modelend + "'"

                    #print(modelstart)

                    #print(modelend)


                    a = 0
                    aa = 0

                    modelweekdaystart = []
                    modelweekdayend = []
                    modelweekendstart = []
                    modelweekendend = []

                    modelweekday = []
                    modelweekend = []

                    modelweekday2 = []
                    modelweekend2 = []

                    while modelstart3 != modelend3 + datetime.timedelta(days=1):

                        if len(weekday) == 0:
                            weekday = weekday
                            b = ''
                            d = -1
                            f = datetime.datetime.now()
                        else:

                            if len(weekday) > a:
                                b = weekday[a]
                                d = weekdaynumber[a]
                                f = weekdaydatetime[a]
                                
                            else:
                                b = weekday[0]
                                d = weekdaynumber[0]
                                f = datetime.datetime.now()

                        if len(weekend) == 0:
                            cc = ''
                            e = -1
                            g = datetime.datetime.now()
                            
                        else:
                            
                            if len(weekend) > aa:
                                cc = weekend[aa]
                                e = weekendnumber[aa]
                                g = weekenddatetime[aa]
                                
                            else:
                                cc = weekend[0]
                                e = weekendnumber[0]
                                g = datetime.datetime.now()
                            


                        if f > g:
                            #print(g)

                            modelweekend.append(cc)

                            if e == 6:
                                


                                #print(modelweekend)

                                g = g + datetime.timedelta(days=1)

                                modelweekend.append(str(g))

                                modelweekend2.append(modelweekend)

                                

                                modelweekend = []

                            
                                

                            
                            aa+=1


                        else:
                            #print(f)

                            modelweekday.append(b)

                            if d == 4:
                                #print(modelweekday)

                                f = f + datetime.timedelta(days=1)

                                modelweekday.append(str(f))

                                
                                

                                modelweekday2.append(modelweekday)

                                modelweekday = []

                            
                            a+=1


                        
                        modelstart3 = modelstart3 + datetime.timedelta(days=1)


                    if len(modelweekday) > 0:
                        
                        f = f + datetime.timedelta(days=1)

                        modelweekday.append(str(f))

                        modelweekday2.append(modelweekday)

                    if len(modelweekend) > 0:
                        
                        g = g + datetime.timedelta(days=1)

                        modelweekend.append(str(g))

                        modelweekend2.append(modelweekend)
                        

                    #print(modelweekday)
                    #print(modelweekend)

                    #print(modelweekday2)
                    print('xxxxxxxxxxxx')
                    print(modelweekday2)
                    #print(modelweekend2)
                    print(modelweekend2)



                    loopdataweekday = []

                    looptimeaxisweekday = []

                    loopdataweekend = []

                    looptimeaxisweekend = []



                    a = 0

                    #print(modelweekday2[3])

                    while a < len(modelweekday2):
                        start = modelweekday2[a][0]
                        end = modelweekday2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        #print(start)
                        #print(end)

                        #print(table)

                        conn = sqlite3.connect('SynOUT.db')
                        c = conn.cursor()

                        
                        query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        c.execute(query3loop)


                        dataset3loop = c.fetchall()

                        dataset4loop = np.array(dataset3loop)

                        #print(len(dataset4loop))

                        c.execute(query4loop)

                        timeaxis3loop = c.fetchall()

                        #print(len(timeaxis3loop))



                        

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekday.append(dataset4loop)
                                looptimeaxisweekday.append(timeaxis3loop)



                        a +=1

                    print(loopdataweekday)
                    print(looptimeaxisweekday)

                    a = 0
                    

                    while a < len(modelweekend2):
                        start = modelweekend2[a][0]
                        end = modelweekend2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        #print(start)
                        #print(end)

                        #print(table)

                        conn = sqlite3.connect('SynOUT.db')

                        c = conn.cursor()

                        
                        query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                        c.execute(query3loop)


                        dataset3loop = c.fetchall()

                        dataset4loop = np.array(dataset3loop)

                        #print(len(dataset4loop))

                        c.execute(query4loop)

                        timeaxis3loop = c.fetchall()

                        #print(len(timeaxis3loop))



                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekend.append(dataset4loop)
                                looptimeaxisweekend.append(timeaxis3loop)


                        a +=1


                    print(loopdataweekend)
                    print(looptimeaxisweekend)



                    


    ##########weekday data
                    a = 0

                    if len(loopdataweekday) == 0:
                        print('')
                        dataset444 = []
                    else:

                        dataset444 = loopdataweekday[0]

                    while a < len(loopdataweekday):

                        dataset111 = loopdataweekday[a]

                        #print(len(dataset111))

                        #print(dataset111[0])
                        #print(dataset444[0])

                        if np.all(dataset111 == dataset444):
                            print(np.all(dataset111 == dataset444))
                            dataset555 = dataset444

                        else:

                            dataset555 = np.concatenate([dataset555, dataset111])
                            dataset444 = np.concatenate([dataset444, dataset111])

                            #print(len(dataset444))
                            #print(len(dataset555))


                        a+=1


                    #print(dataset444)
                    #print(loopdataweekend[0])


################weekend data
                    a = 0

                    if len(loopdataweekend) == 0:
                        print('')
                        dataset4444 = []
                    else:

                        dataset4444 = loopdataweekend[0]

                    while a < len(loopdataweekend):

                        dataset1111 = loopdataweekend[a]

                        #print(len(dataset1111))

                        #print(dataset1111[0])
                        #print(dataset4444[0])

                        if np.all(dataset1111 == dataset4444):
                            #print(np.all(dataset1111 == dataset4444))
                            dataset5555 = dataset4444

                        else:

                            dataset5555 = np.concatenate([dataset5555, dataset1111])
                            dataset4444 = np.concatenate([dataset4444, dataset1111])

                            #print(len(dataset4444))
                            #print(len(dataset5555))


                        a+=1


                    #print(dataset4444)
                    #print(len(looptimeaxisweekday))
                    #print(looptimeaxisweekday[3])



                            ##########weekday timeaxis
                    a = 0

                    if len(looptimeaxisweekday) == 0:
                        print('')
                        timeaxis444 = []
                    else:

                        timeaxis444 = looptimeaxisweekday[0]

                    while a < len(looptimeaxisweekday):

                        timeaxis111 = looptimeaxisweekday[a]

                        #print(len(timeaxis111))

                        #print(timeaxis111[0])
                        #print(timeaxis444[0])
                        #print(a)

                        if timeaxis111[0] == timeaxis444[0]:
                            timeaxis555 = timeaxis444

                        else:

                            timeaxis555 = timeaxis555 + timeaxis111
                            timeaxis444 = timeaxis444 + timeaxis111
                            

                            #print(len(timeaxis444))
                            #print(len(timeaxis555))


                        a+=1


                    #print(timeaxis444)
                    #print(looptimeaxisweekend[0][0])


################weekend timeaxis
                    a = 0

                    if len(looptimeaxisweekend) == 0:
                        print('')
                        timeaxis4444 = []
                    else:

                        timeaxis4444 = looptimeaxisweekend[0]

                    while a < len(looptimeaxisweekend):

                        timeaxis1111 = looptimeaxisweekend[a]

                        #print(len(timeaxis1111))

                        #print(timeaxis1111[0])
                        #print(timeaxis4444[0])

                        if timeaxis1111[0] == timeaxis4444[0]:
                            timeaxis5555 = timeaxis4444

                        else:

                            #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                            timeaxis5555 = timeaxis5555 + timeaxis1111
                            timeaxis4444 = timeaxis4444 + timeaxis1111

                            #print(len(timeaxis4444))
                            #print(len(timeaxis5555))


                        a+=1


                    #print(timeaxis4444)

                    #print(len(timeaxis444))
                    #print(len(dataset444))

                    #print(len(timeaxis4444))
                    #print(len(dataset4444))



                    x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                    x10fweekday['data'] = dataset444

                    labelsweekday = x10fweekday['timestamp']

                    valuesweekday = x10fweekday['data']

                    valuesweekday = np.array(valuesweekday)

                    #print(labelsweekday)
                    #print(valuesweekday)



                    

                    x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                    x10fweekend['data'] = dataset4444

                    labelsweekend = x10fweekend['timestamp']

                    valuesweekend = x10fweekend['data']

                    valuesweekend = np.array(valuesweekend)

                    #print(labelsweekend)
                    #print(valuesweekend)

                    weekendlabeldateday = []
                    weekdaylabeldateday = []



                    if len(labelsweekday) == 0:
                        print('')

                    else:
                        

                        a = 0
                        
                        X22 = 0
                        X33 = []
                        X777 = []
                        X778 = []
                        X779 = []
                        X77 = []


                        while a < len(labelsweekday):
                            X22 = labelsweekday[a]
                            X22 = X22.replace('[', '')
                            X22 = X22.replace(']', '')
                            X22 = X22.replace("'", "")
                            X22 = X22.replace(":", " ")
                            X22 = X22.replace("-", " ")
                            X22 = X22.replace("/", " ")
                            X22=X22.split()
                            X225 = X22[-3:-1]

                            X771 = X22[0]
                            X772 = X22[1]
                            X773 = X22[2]
                            
                            X777.append(X771)
                            X778.append(X772)
                            X779.append(X773)
                            
                            X33.append(X225)

                            weekdayyear = int(X22[0])
                            weekdaymonth = int(X22[1])
                            weekdayday = int(X22[2])

                            weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                            weekdaylabeldateday.append(weekdaylabeldate.weekday())
                            
                            a+=1

                        X44 = np.array(X33)



                    if len(valuesweekend) == 0:
                        print('')

                    else:



                        a = 0
                        
                        XX22 = 0
                        XX33 = []
                        XX777 = []
                        XX778 = []
                        XX779 = []
                        XX77 = []


                        while a < len(labelsweekend):
                            XX22 = labelsweekend[a]
                            XX22 = XX22.replace('[', '')
                            XX22 = XX22.replace(']', '')
                            XX22 = XX22.replace("'", "")
                            XX22 = XX22.replace(":", " ")
                            XX22 = XX22.replace("-", " ")
                            XX22 = XX22.replace("/", " ")
                            XX22=XX22.split()
                            XX225 = XX22[-3:-1]

                            XX771 = XX22[0]
                            XX772 = XX22[1]
                            XX773 = XX22[2]
                            
                            XX777.append(XX771)
                            XX778.append(XX772)
                            XX779.append(XX773)
                            
                            XX33.append(XX225)

                            weekendyear = int(XX22[0])
                            weekendmonth = int(XX22[1])
                            weekendday = int(XX22[2])

                            weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                            weekendlabeldateday.append(weekendlabeldate.weekday())

                            
                            a+=1

                        XX44 = np.array(XX33)


                    #print(X44)
                    #print(XX44)


                    #print(len(weekdaylabeldateday))
                    #print(weekdaylabeldateday)

                    #print(len(valuesweekday))
                    #print(valuesweekday)


                    a = 3

                    weekdayvaluesavg = []
                    weekdaylabelsavg = []
                    weekdaypredavg = []

                    while a < len(weekdaylabeldateday):
                        a1 = int(valuesweekday[a])
                        a2 = int(valuesweekday[a-1])
                        a3 = int(valuesweekday[a-2])
                        a4 = int(valuesweekday[a-3])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4)/4

                        #print(aavg)

                        if weekdaylabeldateday[a] == 5:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a = a + 4

                        else:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a +=1



                    #print(len(weekdaylabeldateday))
                    #print(len(weekdayvaluesavg))
                    #print(len(weekdaylabelsavg))



                    #print(len(weekendlabeldateday))
                    #print(weekendlabeldateday)

                    #print(len(valuesweekend))
                    #print(valuesweekend)

                        

                    a = 0

                    weekendvaluesavg = []
                    weekendlabelsavg = []
                    weekendpredavg = []

                    while a < len(weekendlabeldateday):
                        a1 = int(valuesweekend[a])
                        a2 = int(valuesweekend[a-1])
                        a3 = int(valuesweekend[a-2])
                        a4 = int(valuesweekend[a-3])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4)/4

                        #print(aavg)

                        if weekendlabeldateday[a] == 0:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a = a + 4

                        else:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a +=1



                    weekdaypredavg = np.array(weekdaypredavg)
                    weekendpredavg = np.array(weekendpredavg)

                    #print(len(weekendlabeldateday))
                    #print(len(weekendvaluesavg))
                    #print(len(weekendlabelsavg))

                    #print(weekendlabeldateday)
                    #print(weekendvaluesavg)
                    #print(weekendlabelsavg)


                    #print(X44)
                    #print(XX44)

                    #print(len(weekdaypredavg))
                    #print(len(weekendpredavg))
                    ###################################################################






                    regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekday) == 0:
                        print('')
                        predvaluweekday = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekday = []

                    else:

                        regr.fit(X44, valuesweekday)
                        #regr.fit(weekdaypredavg, weekdayvaluesavg)
                        predictedweekday = regr.predict(X7)


                        #print(predictedweekday)

                        #print(mean_squared_error(values5, predictedweekday))
                        #print(r2_score(values5, predictedweekday))
                       
                        i = len(predictedweekday)
                        k = 0
                        predvaluweekday = []
                        while k < i:
                            predvalweekday = predictedweekday[k]
                            predvaluweekday.append(predvalweekday)
                            k += 1
                        #print(predvaluweekday)

                        #print(len(predvaluweekday))




                    regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekend) == 0:
                        print('')
                        predvaluweekend = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekend = []

                    else:

                        regrf.fit(XX44, valuesweekend)
                        #regrf.fit(weekendpredavg, weekendvaluesavg)
                        predictedweekend = regrf.predict(X7)


                        #print(predictedweekend)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekend)
                        k = 0
                        predvaluweekend = []
                        while k < i:
                            predvalweekend = predictedweekend[k]
                            predvaluweekend.append(predvalweekend)
                            k += 1
                        #print(predvaluweekend)

                        #print(len(predvaluweekend))

                        print(predvaluweekday)
                        print(predvaluweekend)


                    values = values5
                    labels = labels5
                        
                    


                    

                    
                    
                    

                    ####################################


                    i = len(values)
                    k = 0
                    valu = []
                    while k < i:
                        val = values[k]
                        valu.append(val)
                        k += 1
                    #print(valu)

                    z = len(labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = labels[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)

                    a = 0
                    X2 = 0
               

                    X227 = []
                    X228 = []
                    X229 = []
                    X22 = []
                    X2727 = []

                    while a < len(labels):
                        X2 = str(labels[a])
                        X2 = X2.replace('[', '')
                        X2 = X2.replace(']', '')
                        X2 = X2.replace("'", "")
                        X2 = X2.replace(":", " ")
                        X2 = X2.replace("-", " ")
                        X2 = X2.replace("/", " ")
                        X2=X2.split()
                        X25 = X2[-3:-1]

                        X221 = X2[0]
                        X222 = X2[1]
                        X223 = X2[2]
                        
                        X227.append(X221)
                        X228.append(X222)
                        X229.append(X223)
                        a+=1


                    #print(X227[0])
                    #print(X228[0])
                    #print(X229[0])



                    a = 0

                    while a < len(X227):
                        

                        X2227 = int(X227[a])
                        X2228 = int(X228[a])
                        X2229 = int(X229[a])
                        
                        X22222 = datetime.date(X2227, X2228, X2229)

                        X22222 = X22222.weekday()

                        X2727.append(X22222)

                        a+=1
                        
                    #print(X77)
                    #print(X2727)


                    a=0

                    weekendvalu = []
                    weekdayvalu = []

                    while a < len(valu):
                        if X2727[a] == 5:
                            weekendvalu.append(valu[a])

                        elif X2727[a] == 6:
                            weekendvalu.append(valu[a])

                        else:
                            weekdayvalu.append(valu[a])
                        a+=1
                        

                    weekdaystddev = np.std(weekdayvalu)
                    weekendstddev = np.std(weekendvalu)

                    print(weekdayvalu)
                    print(weekendvalu)
                    print(weekdaystddev)
                    print(weekendstddev)
                    

                    if len(valuesweekday) == 0:
                        print('hi')


                        avgg = np.mean(valu)
                        medavgg = np.median(valu)
                        stddev = np.std(valu)
                        #print(avgg)
                        #print(medavgg)
                        #print(stddev)

                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                        z = avgg + (3*stddev)
                        zz = avgg - (3*stddev)

                        while v < len(valu):
                            if valu[v] > z:
                                #print('bigger')
                                outliers.append(int(valu[v]))
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            elif valu[v] < zz:
                                #print('smaller')
                                outliers.append(int(valu[v]))
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                
                                if v == 0:
                                    print('')
                                else:
                                    valus[v-1] = valu[v-1]

                                    
                                
                            v += 1

                    elif len(predvaluweekend) == 0:

                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            
                        while v < len(valu):
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                            v +=1

                    else:
                        
                        
                            
                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            

                        while v < len(valu):
                            if X2727[v] == 6:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(int(valu[v]))
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(int(valu[v]))
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1

                            elif X2727[v] == 5:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(int(valu[v]))
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(int(valu[v]))
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(int(valu[v]))
                                        
                                    
                                v += 1


                            else:
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(int(valu[v]))
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(int(valu[v]))
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1






                    print('outliers')
                    print(outliers)


                    
                        



                    









                        ####################################
                    if len(values5) < len(oldoldvalus2):


                        ## oldold valus processing
                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        newoutliers = []
                
                
                    
                        while ab < len(oldoldlabe):
                            newoldlab = str(oldoldlabe[ab])
                            newoldlab = newoldlab.replace('-', ' ')
                            newoldlab = newoldlab.replace(':', ' ')
                            newoldlab = newoldlab.split()

                            newoldlab0 = int(newoldlab[0])
                            newoldlab1 = int(newoldlab[1])
                            newoldlab2 = int(newoldlab[2])
                            newoldlab3 = int(newoldlab[3])
                            newoldlab4 = int(newoldlab[4])
                            newoldlab5 = int(newoldlab[5])

                        
                            if bc == len(labels5):
                                print(bc)
                            else:

                                lab = str(labels5[bc])
                                lab = lab.replace('-', ' ')
                                lab = lab.replace(':', ' ')
                                lab = lab.split()

                                lab0 = int(lab[0])
                                lab1 = int(lab[1])
                                lab2 = int(lab[2])
                                lab3 = int(lab[3])
                                lab4 = int(lab[4])
                                lab5 = int(lab[5])


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(values5):
                                        #print(bc)
                                        c = np.nan
                                        newoutliers.append('f')
                                    else:
                                        if outliers[bc] == 'f':
                                            newoutliers.append(outliers[bc])

                                        else:
                                            newoutliers.append(int(outliers[bc]))
                                        
                                        
                                        bc+=1
                                else:
                                    c = np.nan
                                    #print('no')
                                    newoutliers.append('f')
                            else:
                                c = np.nan
                                #print('no')
                                newoutliers.append('f')

                                    

                            ab+=1

                


                    elif len(values5) > len(oldoldvalus2):


                        ## oldold valus processing
                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        newoutliers = []
                
                
                    
                        while ab < len(labels5):
                            

                            lab = str(labels5[ab])
                            lab = lab.replace('-', ' ')
                            lab = lab.replace(':', ' ')
                            lab = lab.split()

                            lab0 = int(lab[0])
                            lab1 = int(lab[1])
                            lab2 = int(lab[2])
                            lab3 = int(lab[3])
                            lab4 = int(lab[4])
                            lab5 = int(lab[5])

                        
                            if bc == len(oldoldvalus2):
                                print(bc)
                            else:
                                newoldlab = str(oldoldlabe[bc])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                                


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(oldoldvalus2):
                                        #print(bc)
                                        c = np.nan
                                        newoutliers.append('f')
                                    else:
                                        if oldoldoutliers[bc] == 'f':
                                            newoutliers.append(oldoldoutliers[bc])

                                        else:
                                            newoutliers.append(int(oldoldoutliers[bc]))
                                        
                                        
                                        
                                        
                                        bc+=1
                                else:
                                    c = np.nan
                                    #print('no')
                                    newoutliers.append('f')
                            else:
                                c = np.nan
                                #print('no')
                                newoutliers.append('f')

                                    

                            ab+=1

                

                    else:
                        newoutliers = outliers


                        ######################
                    print('aaaaaaaaaaa')
                    print(newoutliers)
                    print(len(newoutliers))

                    print(outliers)
                    print(len(outliers))
                    print(oldoldoutliers)
                    print(len(oldoldoutliers))


                    

                    print(final_meter_id)
                    print('meter_id')

                    a = 0

                    titlefixtemp = ''

                    while a < len(Syntitlefix):
                        titlefix = str(Syntitlefix[a]).split('|')
                        titlefixcheck = titlefix[0]

                        if titlefixcheck == final_meter_id:
                            titlefixtemp = titlefix[1]

                            a = len(Syntitlefix) + 1
                        else:
                            a+=1

                    print(titlefixtemp)

                    if titlefixtemp == '':
                        title = 'Meter ID: ' + str(final_meter_id) + ' ' + parameterems.replace('`', '')
                    else:
                        title = str(titlefixtemp) + ' ' + parameterems.replace('`', '')

                    

                    
                    

                    


                    #print(title)
                    #print(line_labels)
                    #print(line_values)
                    
                    #print(oldoldtitle)
                    #print(oldoldoutliers)
                    #print(oldoldvalus)

                    legend = title
                    
                    oldoldvalus = oldoldvalusog
                    
                    #print(b)
                    #print(len(b))

                    #print(rpermenant)
                    #print(max(rarray))

                    #print(len(line_labels))
                    #print(len(line_values))
                    #print(len(oldoldoutliers))
                    #print(len(oldoldvalus))

                    print(final_meter_id)
                    print(meter_id2)

                    residualaxismeterid = pd.DataFrame({'meter_id':[final_meter_id]})
                    residualaxismeterid2 = pd.DataFrame({'meter_id':[meter_id2]})
                    
                    residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                    labet = []

                    line_labels = pd.to_datetime(line_labels, format = '%Y-%m-%d %H:%M:%S')

                    z = len(line_labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = line_labels[y]
                        labet.append(lab)
                        y += 1
                    print(labet)

                    line_labels = np.array(labet)

                    print(line_labels)

                    residualsklearndfvalues = pd.DataFrame({'timestamp':line_labels, 'data':line_values})

                    residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                    print(residualsklearndfvalues['data'])

                    residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                    residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                    print(residualsklearndfvalues)

                    testarr = np.array(residualsklearndfvalues['data'])

                    z = len(testarr)
                    y = 0
                    valtest = []
                    while y < z:
                        val = testarr[y]
                        if np.isnan(val) == True:
                            valtest.append('f')
                        else:
                            
                            valtest.append(int(val))
                        y += 1
                    testarrvalus = valtest

                    print(testarrvalus)
                    print(len(testarrvalus))

                    


                    residualsklearndfoutliers = pd.DataFrame({'timestamp':line_labels, 'outliers':outliers})

                    residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')

                    residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]
                    
                    residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                    testarroutliers = np.array(residualsklearndfoutliers['outliers'])

                    print(testarroutliers)

                    z = len(testarroutliers)
                    y = 0
                    outtest = []
                    while y < z:
                        out = testarroutliers[y]
                        if out == 'f':
                            outtest.append('f')
                        elif np.isnan(out) == True:
                            outtest.append('f')
                        else:
                            
                            outtest.append(int(out))
                        y += 1
                    testarroutliers = outtest

                    


                    testarrlabe = residualsklearndfvalues.reset_index()
                    testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                    z = len(testarrlabe)
                    y = 0
                    labetest = []
                    while y < z:
                        lab = testarrlabe[y]
                        labetest.append(lab)
                        y += 1
                    testarrlabe = labetest
                    print(testarrlabe)
                    print(len(testarrlabe))
                    print(len(line_values))

                    print(testarroutliers)
                    print(len(testarroutliers))

                    print(len(oldoldlabe))

                    line_values = testarrvalus
                    line_labels = testarrlabe

                    outliers = testarroutliers

                    

                    title = title.replace(':', '')
                    title = 'Closest Correlation: ' + title + '. Correlation value, r, ' + str(round(rpermenant, 2))

                    line_valuestemp = []
                    oldvalustemp= []
                    oldoldvalustemp= []
                    line_labelstemp= []
                    outlierstemp= []
                    oldoutlierstemp= []
                    oldoldoutlierstemp= []
                    oldoldlabetemp = []


                    if len(line_labels) != len(oldoldlabe):
                        a = 0
                        bb=0
                        cc=0
                        if len(line_labels) > len(oldoldlabe):
                            
                            while a < len(line_labels):
                                b = str(line_labels[bb])
                                c = str(oldoldlabe[cc])

                                if str(b) == str(c):
                                    line_valuestemp.append(line_values[bb])
                                    oldoldvalustemp.append(oldoldvalus[cc])
                                    line_labelstemp.append(line_labels[bb])
                                    outlierstemp.append(outliers[bb])
                                    oldoldoutlierstemp.append(oldoldoutliers[cc])
                                    oldoldlabetemp.append(oldoldlabe[cc])
                                    bb+=1
                                    cc+=1

                                    if cc == len(oldoldlabe) - 1:
                                        a = len(line_labels) + 1
                                    else:

                                        a+=1
                                else:
                                    bb+=1
                                    a+=1

                        else:
                            while a < len(oldoldlabe):
                                b = str(line_labels[bb])
                                c = str(oldoldlabe[cc])
                                print('2')

                                
                                if b == c:
                                    line_valuestemp.append(line_values[bb])
                                    oldoldvalustemp.append(oldoldvalus[cc])
                                    line_labelstemp.append(line_labels[bb])
                                    outlierstemp.append(outliers[bb])
                                    oldoldoutlierstemp.append(oldoldoutliers[cc])
                                    oldoldlabetemp.append(oldoldlabe[cc])

                                    bb+=1
                                    cc+=1

                                    if bb == len(line_labels) - 1:
                                        a = len(oldoldlabe) + 1
                                    else:

                                        a+=1
                                else:
                                    cc+=1
                                    a+=1

                        line_values = line_valuestemp
                        oldoldvalus = oldoldvalustemp
                        line_labels = line_labelstemp
                        outliers = outlierstemp
                        oldoldoutliers = oldoldoutlierstemp
                        oldoldlabe = oldoldlabetemp
                        line_outliers = outliers






                elif datatype == 'Wifi':
                    print('a')

                    wifitablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Wifitables.csv")

                    wifitables = wifitablesdf['tables']

                    wifitables = np.array(wifitables)

                    a = 0

                    wifiY7 = []

                    while a < len(wifitables):
                        wifiunique = str(wifitables[a]).replace('|', '')
                        wifiunique = wifiunique.replace('wifitest', '')
                        wifiY7.append(wifiunique)
                        

                        


                        a+=1

                    a = 0

                    wifiY8 = []

                    while a < len(wifitables):
                        wifiunique = str(wifitables[a])
                        wifiunique = wifiunique.replace('wifitest', '')
                        wifiunique = wifiunique.split('|')
                        print(wifiunique)
                        wifiY8.append(wifiunique)

                        a+=1

                    print('WifiY7')
                    print(wifiY7)
                    print('WifiY8')
                    print(wifiY8)

                    
                    wifiY6 = wifiY8


                    print(len(wifiY6))
                    print(len(wifiY7))

                    wifiY7temp = []

                    if len(wifiY6) > len(wifiY7):
                        a = 0
                        b = 0
                        while a < len(wifiY6):

                            Building_name = wifiY6[a][0]
                            Floor_name = wifiY6[a][1]
                            
                            Building_name = Building_name.strip()
                            Floor_name = Floor_name.strip()

                            check11 = Building_name.upper() + Floor_name.upper()
                            check22 = str(wifiY7[b])

                            print(check11)
                            print(check22)

                            if check11 == check22:
                                wifiY7temp.append(wifiY7[b])
                                a+=1
                                b+=1

                            else:
                                wifiY7temp.append('f')
                                a+=1

                        wifiY7 = wifiY7temp


                    print(wifiY7)
                    print(len(wifiY6))
                    print(len(wifiY7))



                    df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    #print(values1)
                    #print(timestamp)
                    print(title)

                    ylabelarray = str(title).split()
        
                    


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    #print(oldvalues1)
                    #print(oldtimestamp)
                    print(oldtitle)

                    oldylabelarray = str(oldtitle).split()

                    



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    #print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()

                    



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    #print(oldoldlabe)



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisddf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    #print(values1)
                    #print(timestamp)
                    print(title)

                    ylabelarray = str(title).split()
                    if ylabelarray[-1] == 'Count':
                        ylabel = str(ylabelarray[-3]) + ' ' + str(ylabelarray[-2]) + ' ' + str(ylabelarray[-1])


                    else:
                        ylabel = ylabelarray[-1]


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    #print(oldvalues1)
                    #print(oldtimestamp)
                    print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    if oldylabelarray[-1] == 'Count':
                        oldylabel = str(oldylabelarray[-3]) + ' ' + str(oldylabelarray[-2]) + ' ' + str(oldylabelarray[-1])

                    else:
                        oldylabel = oldylabelarray[-1]



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    #print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    if oldoldylabelarray[-1] == 'Count':
                        oldoldylabel = str(oldoldylabelarray[-3]) + ' ' + str(oldoldylabelarray[-2]) + ' ' + str(oldoldylabelarray[-1])

                    else:
                        oldoldylabel = oldoldylabelarray[-1]



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    #print(oldoldlabe)



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisdf.iloc[0,1]


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max

                    meter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                    meter_id = meter_id.iloc[0,1]
                    oldmeter_id = oldmeter_id.iloc[0,1]
                    oldoldmeter_id = oldoldmeter_id.iloc[0,1]

                    print('meter_id')
                    print('oldmeter_id')
                    print('oldoldmeter_id')

                    print(meter_id)
                    print(oldmeter_id)
                    print(oldoldmeter_id)

                    print('title')
                    print(title)
                    print(oldtitle)
                    print(oldoldtitle)


                    if compare1 == title:
                        print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        


                    elif compare1 == oldtitle:
                        print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold



                    elif compare1 == oldoldtitle:
                        print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    print(startdate)
                    print(enddate)

                    ylabel = ''


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max


                    if compare1 == title:
                        print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        


                    elif compare1 == oldtitle:
                        print('2')
                        oldoldtitle = compare1
                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold



                    elif compare1 == oldoldtitle:
                        print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    print(startdate)
                    print(enddate)

                    ylabel = ''

                    print(oldoldvalus)

                    oldoldvalustemp = []
                    labetemp = []

                    oldoldoutlierstemp = []

                    a = 0

                    while a < len(oldoldvalus):

                        b = oldoldvalus[a]

                        if b == 'f':
                            c = np.nan
                            oldoldvalustemp.append(c)
                            a+=1
                        else:
                            oldoldvalustemp.append(int(b))
                            
                            a+=1

                    print(oldoldvalustemp)
                    print(labetemp)

                    oldoldvalusog = oldoldvalus


                    oldoldvalus = oldoldvalustemp


                    dfoldold2 = dfoldold2.replace('f', np.nan)

                    print('dfs')
                    print(dfoldold2)


                    dfoldold2 = dfoldold2.fillna(method = "ffill")

                    dfoldold2 = dfoldold2.fillna(method = "bfill")

                    print('dfs')
                    print(dfoldold2)

                    oldoldvalues2 = dfoldold2.iloc[:,2].values


                    print(oldoldvalues2)


                    oldoldit = len(oldoldvalues2)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues2[oldoldkt]
                        oldoldvalu.append(int(oldoldval))
                        oldoldkt += 1
                    oldoldvalus = oldoldvalu
                    print(oldoldvalu)



                    print('oldoldvalus')
                    print('labe')
                    print(oldoldvalus)
                    print(labe)

                    print(oldoldoutliers)
                    print(len(oldoldoutliers))
                    print(len(oldoldvalus))
                    print(len(labe))

                    

 
    ###########################################wifi


                    

                    a = 0
                    AA = 0

                    b = []
                    labeltemp = []
                    oldvaluestemp = []

                    rpermenant = 0

                    rarray = []

                    title = ''
                    

                    

                    #print(df2aug18feb19test)


                        


                    print(len(wifiY7))

                    while a < len(wifiY7):

                        if wifiY7[a] == 'f':
                            a+=1
                        else:

                            #print(a)

                            #Building_name = wifiY6[a]
                            #Floor_name = wifiY6[a][AA]
                            Building_name = wifiY6[a][0]
                            Floor_name = wifiY6[a][1]

                            Building_name = str(Building_name).strip()
                            Floor_name = str(Floor_name).strip()
                            table = '[' + 'wifitest' + str(wifiY7[a]) + ']'

                            Building_name = str(Building_name).title()
                            Floor_name = str(Floor_name).title()



                            
                            parameterwifi = '`Associated Client Count`'

                                

                            #dfaug18feb19test = pd.concat([dfoct18])


                            #df2aug18feb19test = dfaug18feb19test.loc[:, ['Building','Floor', 'time','Associated Client Count', 'Authenticated Client Count']]

                            #df3aug18feb19test = df2aug18feb19test.sort_values(by=['Building', 'Floor'])

                            #df4aug18feb19test = df3aug18feb19test.set_index("time")

                            #df5aug18feb19test = df4aug18feb19test[df4aug18feb19test['Building'].str.contains(Building_name)]

                            #df6aug18feb19test = df5aug18feb19test[df5aug18feb19test['Floor'].str.contains(Floor_name)]

                            #df6aug18feb19test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                            #dfsyn5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                            conn = sqlite3.connect('/Users/Luke/ENGR301/For Cloud and GitHub/test2.db')

                            #dfsyn5.to_sql('wificlosest', conn, if_exists='replace', index=False)

                            c = conn.cursor()

                            query = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                            query2 = "SELECT `time` FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                            c.execute(query)

                            dataset = c.fetchall()


                            dataset2 = np.array(dataset)


                            c.execute(query2)

                            timeaxis = c.fetchall()
                            timeaxis2 = np.array(timeaxis)

                            x = pd.DataFrame(timeaxis, columns=['time'])
                            x['data'] = dataset2

                            x['time'] = timeaxis2

                            xxx = x['time']

                            x['time'] = pd.to_datetime(x['time'], format = '%Y-%m-%d')

                            #x2 = x.set_index('timestamp')

                            labels5 = xxx

                            values5 = x['data']

                            values5 = np.array(values5)

                            #print(values5[0:5])
                            

                            oldoldvalus2 = np.array(oldoldvalus)

                            #print(len(values5))
                            #print(len(oldoldvalus2))

                            if len(labels5) == 0:
                                print(table)

                            else:
                                print(x['time'])
                                x = x.set_index('time')
                                x.index = x.index.map(lambda j: j.replace(second=0))

                                print(x[x.index.duplicated()])
                                x = x[~x.index.duplicated()]

                                print(x[x.index.duplicated()])

                                print(x['data'])

                                x = x.resample('T').asfreq()

                                print(x)

                                testarr = np.array(x['data'])

                                print(testarr)

                                x2 = pd.Series(testarr)
                                y2 = pd.Series(oldoldvalus2)

                                print(x2)
                                print(y2)

                                
                                
                                r = x2.corr(y2)

                                #print(r)
                                #print(rpermenant)

                                if r > rpermenant:
                                    parameterwifi = parameterwifi.replace("`","")
                                    Building_name = Building_name.replace("'","")
                                    Floor_name = Floor_name.replace("'","")
                                    
                                    title2 = Building_name.title() + ': ' + Floor_name.title() + ' ' + parameterwifi
                                    #print(title2)
                                    #print(oldoldtitle)
                                    final_meter_id2 = Building_name.upper() + Floor_name.upper()
                                    final_meter_id3 = Building_name.upper() + ' ' + Floor_name.upper()
                                    final_values6 = values5
                                    final_parameterwifi2 = '`' + parameterwifi + '`'
                                    final_labels6 = labels5

                                    if title2 == oldoldtitle:
                                        #print('11')
                                        rpermenant = rpermenant
                                    else:
                                        #print('22')
                                        title = title2
                                        rpermenant = r

                                        final_meter_id = final_meter_id2

                                        final_meter_id4 = final_meter_id3
                                        final_values5 = final_values6
                                        final_parameterwifi = final_parameterwifi2
                                        final_labels5 = final_labels6
                                        
                                        ylabel = parameterwifi
                                        b = values5
                                        labeltemp = labels5
                                        oldvaluestemp = oldoldvalus
                                    
                                else:
                                    rpermenant = rpermenant

                                rarray.append(r)


                            #a +=5
                            a +=1



                    

                    line_labels = labeltemp
                    line_values = b

                    residualstartdate = startdate
                    residualenddate = enddate

                    value_min = min(line_values)
                    value_max = max(line_values)

                    outliers = ['f']
                    

                    if len(line_values) > len(oldoldvalus):
                        
                        oldoldvalus = oldvaluestemp
                        newoldoutliers = []

                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        while ab < len(line_labels):
                            
                            #print(ab)
                            

                            lab = str(line_labels[ab])
                            lab = lab.replace('-', ' ')
                            lab = lab.replace(':', ' ')
                            lab = lab.split()

                            lab0 = int(lab[0])
                            lab1 = int(lab[1])
                            lab2 = int(lab[2])
                            lab3 = int(lab[3])
                            lab4 = int(lab[4])
                            lab5 = int(lab[5])

                        
                            if bc == len(oldoldlabe):
                                print(bc)
                            else:
                                newoldlab = str(oldoldlabe[bc])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                                


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(oldoldoutliers):
                                        #print(bc)
                                        
                                        newoldoutliers.append('f')
                                    else:
                                        
                                        newoldoutliers.append(oldoldoutliers[bc])
                                        
                                        
                                        bc+=1
                                else:
                                    
                                    #print('no')
                                    newoldoutliers.append('f')
                            else:
                                
                                #print('no')
                                newoldoutliers.append('f')

                                    

                            ab+=1
                        oldoldoutliers = newoldoutliers

                    if len(line_values) > len(oldoldvalus):
                        
                        oldoldvalus = oldvaluestemp
                        newoldoutliers = []

                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        while ab < len(line_labels):
                            
                            #print(ab)
                            

                            lab = str(line_labels[ab])
                            lab = lab.replace('-', ' ')
                            lab = lab.replace(':', ' ')
                            lab = lab.split()

                            lab0 = int(lab[0])
                            lab1 = int(lab[1])
                            lab2 = int(lab[2])
                            lab3 = int(lab[3])
                            lab4 = int(lab[4])
                            lab5 = int(lab[5])

                        
                            if bc == len(oldoldlabe):
                                #print(bc)
                                bc = bc
                            else:
                                newoldlab = str(oldoldlabe[bc])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                                


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(oldoldoutliers):
                                        #print(bc)
                                        
                                        newoldoutliers.append('f')
                                    else:
                                        
                                        newoldoutliers.append(oldoldoutliers[bc])
                                        
                                        
                                        bc+=1
                                else:
                                    
                                    #print('no')
                                    newoldoutliers.append('f')
                            else:
                                
                                #print('no')
                                newoldoutliers.append('f')

                                    

                            ab+=1
                        oldoldoutliers = newoldoutliers
                        

                    print(final_meter_id)
                    print(startdate)
                    print(enddate)
                    print(final_values5)

                    parameterems = final_parameterwifi

                    table = '[' + 'wifitest' + str(final_meter_id) + ']'

                    print(table)
                    print('xxx')



                    labels5 = final_labels5


                    values5 = np.array(final_values5)


                    a = 0
                    X5 = 0
                    X6 = []
                    XYear = []
                    XMonth= []
                    XDay= []
                    XHour= []
                    XMin= []
                    Xsec= []

                    while a < len(labels5):
                        X5 = labels5[a]
                        X5 = X5.replace('[', '')
                        X5 = X5.replace(']', '')
                        X5 = X5.replace("'", "")
                        X5 = X5.replace(":", " ")
                        X5 = X5.replace("-", " ")
                        X5 = X5.replace("/", " ")
                        X5=X5.split()
                        X55 = X5[-3:-1]
                        X6.append(X55)
                        a+=1


                    X7 = np.array(X6)



                    #################################### Smart model datetime


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.replace('-',' ')
                    startdate = startdate.replace(':',' ')
                    startdate = startdate.replace("'"," ")

                    enddate = enddate.replace('-',' ')
                    enddate = enddate.replace(':',' ')
                    enddate = enddate.replace("'"," ")


                    #print(startdate)
                    #print(enddate)

                    startdate = startdate.split()
                    enddate = enddate.split()

                    #print(startdate)
                    #print(enddate)

                    startyear = int(startdate[0])
                    startmonth = int(startdate[1])
                    startday = int(startdate[2])

                    endyear = int(enddate[0])
                    endmonth = int(enddate[1])
                    endday = int(enddate[2])

                    startdate = datetime.datetime(startyear, startmonth, startday)
                    enddate = datetime.datetime(endyear, endmonth, endday)
                    z = enddate-startdate

                    #print(z)

                    modelstart = startdate - (4*z)

                    modelend = startdate

                    print(modelstart)
                    print(modelend)

                    weekday00 = []
                    weekday0 = []
                    weekday1 = []
                    weekday2 = []
                    weekday3 = []
                    weekday4 = []
                    weekday5 = []
                    weekday6 = []

                    weekday = []
                    weekend = []

                    weekdaynumber = []
                    weekendnumber = []

                    weekdaydatetime = []
                    weekenddatetime = []

                    modelstart2 = modelstart
                    modelstart3 = modelstart
                    modelend3 = modelend
                    


                    while modelstart2 != modelend + datetime.timedelta(days=1):
                        AA = modelstart2

                        AAday = AA.weekday()

                        #print(AA)
                        #print(AAday)

                        if AAday < 5:
                            weekday.append(str(AA))
                            weekdaynumber.append(AAday)
                            weekdaydatetime.append(AA)
                        else:
                            weekend.append(str(AA))
                            weekendnumber.append(AAday)
                            weekenddatetime.append(AA)
                            

                        modelstart2 = modelstart2 + datetime.timedelta(days=1)



                    print(weekday)

                    print(weekend)

                    print(weekdaynumber)

                    print(weekendnumber)

                    print(weekdaydatetime)

                    print(weekenddatetime)

                    

                    modelstart = str(modelstart)
                    modelstart = "'" + modelstart + "'"

                    modelend = str(modelend)
                    modelend = "'" + modelend + "'"

                    #print(modelstart)

                    #print(modelend)


                    a = 0
                    aa = 0

                    modelweekdaystart = []
                    modelweekdayend = []
                    modelweekendstart = []
                    modelweekendend = []

                    modelweekday = []
                    modelweekend = []

                    modelweekday2 = []
                    modelweekend2 = []

                    while modelstart3 != modelend3 + datetime.timedelta(days=1):

                        if len(weekday) == 0:
                            weekday = weekday
                            b = ''
                            d = -1
                            f = datetime.datetime.now()
                        else:

                            if len(weekday) > a:
                                b = weekday[a]
                                d = weekdaynumber[a]
                                f = weekdaydatetime[a]
                                
                            else:
                                b = weekday[0]
                                d = weekdaynumber[0]
                                f = datetime.datetime.now()

                        if len(weekend) == 0:
                            cc = ''
                            e = -1
                            g = datetime.datetime.now()
                            
                        else:
                            
                            if len(weekend) > aa:
                                cc = weekend[aa]
                                e = weekendnumber[aa]
                                g = weekenddatetime[aa]
                                
                            else:
                                cc = weekend[0]
                                e = weekendnumber[0]
                                g = datetime.datetime.now()
                            


                        if f > g:
                            #print(g)

                            modelweekend.append(cc)

                            if e == 6:
                                


                                #print(modelweekend)

                                g = g + datetime.timedelta(days=1)

                                modelweekend.append(str(g))

                                modelweekend2.append(modelweekend)

                                

                                modelweekend = []

                            
                                

                            
                            aa+=1


                        else:
                            #print(f)

                            modelweekday.append(b)

                            if d == 4:
                                #print(modelweekday)

                                f = f + datetime.timedelta(days=1)

                                modelweekday.append(str(f))

                                
                                

                                modelweekday2.append(modelweekday)

                                modelweekday = []

                            
                            a+=1


                        
                        modelstart3 = modelstart3 + datetime.timedelta(days=1)


                    if len(modelweekday) > 0:
                        
                        f = f + datetime.timedelta(days=1)

                        modelweekday.append(str(f))

                        modelweekday2.append(modelweekday)

                    if len(modelweekend) > 0:
                        
                        g = g + datetime.timedelta(days=1)

                        modelweekend.append(str(g))

                        modelweekend2.append(modelweekend)
                        

                    #print(modelweekday)
                    #print(modelweekend)

                    #print(modelweekday2)
                    print('xxxxxxxxxxxx')
                    print(modelweekday2)
                    #print(modelweekend2)
                    print(modelweekend2)



                    loopdataweekday = []

                    looptimeaxisweekday = []

                    loopdataweekend = []

                    looptimeaxisweekend = []



                    a = 0

                    #print(modelweekday2[3])

                    while a < len(modelweekday2):
                        start = modelweekday2[a][0]
                        end = modelweekday2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        #print(start)
                        #print(end)

                        #print(table)

                        conn = sqlite3.connect('test2.db')

                        c = conn.cursor()

                        
                        query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                        query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                        c.execute(query3loop)


                        dataset3loop = c.fetchall()

                        dataset4loop = np.array(dataset3loop)

                        #print(len(dataset4loop))

                        c.execute(query4loop)

                        timeaxis3loop = c.fetchall()

                        #print(len(timeaxis3loop))



                        

                    

                        

                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekday.append(dataset4loop)
                                looptimeaxisweekday.append(timeaxis3loop)



                        a +=1

                    print(loopdataweekday)
                    print(looptimeaxisweekday)

                    a = 0
                    

                    while a < len(modelweekend2):
                        start = modelweekend2[a][0]
                        end = modelweekend2[a][-1]

                        

                        start = str(start)
                        end = str(end)

                        start = "'" + start + "'"
                        end = "'" + end + "'"

                        #print(start)
                        #print(end)

                        #print(table)

                        conn = sqlite3.connect('test2.db')

                        c = conn.cursor()

                        
                        query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                        query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                        c.execute(query3loop)


                        dataset3loop = c.fetchall()

                        dataset4loop = np.array(dataset3loop)

                        #print(len(dataset4loop))

                        c.execute(query4loop)

                        timeaxis3loop = c.fetchall()

                        #print(len(timeaxis3loop))



                        if len(dataset4loop) == 0:
                            print('0')

                        else:
                            if len(timeaxis3loop) == 0:
                                print('0')

                            else:

                                loopdataweekend.append(dataset4loop)
                                looptimeaxisweekend.append(timeaxis3loop)


                        a +=1


                    print(loopdataweekend)
                    print(looptimeaxisweekend)



                    


    ##########weekday data
                    a = 0

                    if len(loopdataweekday) == 0:
                        print('')
                        dataset444 = []
                    else:

                        dataset444 = loopdataweekday[0]

                    while a < len(loopdataweekday):

                        dataset111 = loopdataweekday[a]

                        #print(len(dataset111))

                        #print(dataset111[0])
                        #print(dataset444[0])

                        if np.all(dataset111 == dataset444):
                            print(np.all(dataset111 == dataset444))
                            dataset555 = dataset444

                        else:

                            dataset555 = np.concatenate([dataset555, dataset111])
                            dataset444 = np.concatenate([dataset444, dataset111])

                            #print(len(dataset444))
                            #print(len(dataset555))


                        a+=1


                    #print(dataset444)
                    #print(loopdataweekend[0])


################weekend data
                    a = 0

                    if len(loopdataweekend) == 0:
                        print('')
                        dataset4444 = []
                    else:

                        dataset4444 = loopdataweekend[0]

                    while a < len(loopdataweekend):

                        dataset1111 = loopdataweekend[a]

                        #print(len(dataset1111))

                        #print(dataset1111[0])
                        #print(dataset4444[0])

                        if np.all(dataset1111 == dataset4444):
                            #print(np.all(dataset1111 == dataset4444))
                            dataset5555 = dataset4444

                        else:

                            dataset5555 = np.concatenate([dataset5555, dataset1111])
                            dataset4444 = np.concatenate([dataset4444, dataset1111])

                            #print(len(dataset4444))
                            #print(len(dataset5555))


                        a+=1


                    #print(dataset4444)
                    #print(len(looptimeaxisweekday))
                    #print(looptimeaxisweekday[3])



                            ##########weekday timeaxis
                    a = 0

                    if len(looptimeaxisweekday) == 0:
                        print('')
                        timeaxis444 = []
                    else:

                        timeaxis444 = looptimeaxisweekday[0]

                    while a < len(looptimeaxisweekday):

                        timeaxis111 = looptimeaxisweekday[a]

                        #print(len(timeaxis111))

                        #print(timeaxis111[0])
                        #print(timeaxis444[0])
                        #print(a)

                        if timeaxis111[0] == timeaxis444[0]:
                            timeaxis555 = timeaxis444

                        else:

                            timeaxis555 = timeaxis555 + timeaxis111
                            timeaxis444 = timeaxis444 + timeaxis111
                            

                            #print(len(timeaxis444))
                            #print(len(timeaxis555))


                        a+=1


                    #print(timeaxis444)
                    #print(looptimeaxisweekend[0][0])


################weekend timeaxis
                    a = 0

                    if len(looptimeaxisweekend) == 0:
                        print('')
                        timeaxis4444 = []
                    else:

                        timeaxis4444 = looptimeaxisweekend[0]

                    while a < len(looptimeaxisweekend):

                        timeaxis1111 = looptimeaxisweekend[a]

                        #print(len(timeaxis1111))

                        #print(timeaxis1111[0])
                        #print(timeaxis4444[0])

                        if timeaxis1111[0] == timeaxis4444[0]:
                            timeaxis5555 = timeaxis4444

                        else:

                            #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                            timeaxis5555 = timeaxis5555 + timeaxis1111
                            timeaxis4444 = timeaxis4444 + timeaxis1111

                            #print(len(timeaxis4444))
                            #print(len(timeaxis5555))


                        a+=1


                    #print(timeaxis4444)

                    #print(len(timeaxis444))
                    #print(len(dataset444))

                    #print(len(timeaxis4444))
                    #print(len(dataset4444))



                    x10fweekday = pd.DataFrame(timeaxis444, columns=['time'])
                    x10fweekday['data'] = dataset444

                    labelsweekday = x10fweekday['time']

                    valuesweekday = x10fweekday['data']

                    valuesweekday = np.array(valuesweekday)

                    #print(labelsweekday)
                    #print(valuesweekday)



                    

                    x10fweekend = pd.DataFrame(timeaxis4444, columns=['time'])
                    x10fweekend['data'] = dataset4444

                    labelsweekend = x10fweekend['time']

                    valuesweekend = x10fweekend['data']

                    valuesweekend = np.array(valuesweekend)

                    #print(labelsweekend)
                    #print(valuesweekend)

                    weekendlabeldateday = []
                    weekdaylabeldateday = []



                    if len(labelsweekday) == 0:
                        print('')

                    else:
                        

                        a = 0
                        
                        X22 = 0
                        X33 = []
                        X777 = []
                        X778 = []
                        X779 = []
                        X77 = []


                        while a < len(labelsweekday):
                            X22 = labelsweekday[a]
                            X22 = X22.replace('[', '')
                            X22 = X22.replace(']', '')
                            X22 = X22.replace("'", "")
                            X22 = X22.replace(":", " ")
                            X22 = X22.replace("-", " ")
                            X22 = X22.replace("/", " ")
                            X22=X22.split()
                            X225 = X22[-3:-1]

                            X771 = X22[0]
                            X772 = X22[1]
                            X773 = X22[2]
                            
                            X777.append(X771)
                            X778.append(X772)
                            X779.append(X773)
                            
                            X33.append(X225)

                            weekdayyear = int(X22[0])
                            weekdaymonth = int(X22[1])
                            weekdayday = int(X22[2])

                            weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                            weekdaylabeldateday.append(weekdaylabeldate.weekday())
                            
                            a+=1

                        X44 = np.array(X33)



                    if len(valuesweekend) == 0:
                        print('')

                    else:



                        a = 0
                        
                        XX22 = 0
                        XX33 = []
                        XX777 = []
                        XX778 = []
                        XX779 = []
                        XX77 = []


                        while a < len(labelsweekend):
                            XX22 = labelsweekend[a]
                            XX22 = XX22.replace('[', '')
                            XX22 = XX22.replace(']', '')
                            XX22 = XX22.replace("'", "")
                            XX22 = XX22.replace(":", " ")
                            XX22 = XX22.replace("-", " ")
                            XX22 = XX22.replace("/", " ")
                            XX22=XX22.split()
                            XX225 = XX22[-3:-1]

                            XX771 = XX22[0]
                            XX772 = XX22[1]
                            XX773 = XX22[2]
                            
                            XX777.append(XX771)
                            XX778.append(XX772)
                            XX779.append(XX773)
                            
                            XX33.append(XX225)

                            weekendyear = int(XX22[0])
                            weekendmonth = int(XX22[1])
                            weekendday = int(XX22[2])

                            weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                            weekendlabeldateday.append(weekendlabeldate.weekday())

                            
                            a+=1

                        XX44 = np.array(XX33)


                    #print(X44)
                    #print(XX44)


                    #print(len(weekdaylabeldateday))
                    #print(weekdaylabeldateday)

                    #print(len(valuesweekday))
                    #print(valuesweekday)


                    a = 25

                    weekdayvaluesavg = []
                    weekdaylabelsavg = []
                    weekdaypredavg = []

                    while a < len(weekdaylabeldateday):
                        a1 = int(valuesweekday[a])
                        a2 = int(valuesweekday[a-1])
                        a3 = int(valuesweekday[a-2])
                        a4 = int(valuesweekday[a-3])
                        a5 = int(valuesweekday[a-4])
                        a6 = int(valuesweekday[a-5])
                        a7 = int(valuesweekday[a-6])
                        a8 = int(valuesweekday[a-7])
                        a9 = int(valuesweekday[a-8])
                        a10 = int(valuesweekday[a-9])
                        a11 = int(valuesweekday[a-10])
                        a12 = int(valuesweekday[a-11])
                        a13 = int(valuesweekday[a-12])
                        a14 = int(valuesweekday[a-13])
                        a15 = int(valuesweekday[a-14])
                        a16 = int(valuesweekday[a-15])
                        a17 = int(valuesweekday[a-16])
                        a18 = int(valuesweekday[a-17])
                        a19 = int(valuesweekday[a-18])
                        a20 = int(valuesweekday[a-19])
                        a21 = int(valuesweekday[a-20])
                        a22 = int(valuesweekday[a-21])
                        a23 = int(valuesweekday[a-22])
                        a24 = int(valuesweekday[a-23])
                        a25 = int(valuesweekday[a-24])
                        a26 = int(valuesweekday[a-25])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                        

                        #print(aavg)

                        if weekdaylabeldateday[a] == 5:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a = a + 26

                        else:

                            weekdayvaluesavg.append(aavg)

                            weekdaylabelsavg.append(labelsweekday[a])

                            weekdaypredavg.append(X33[a])

                            a +=1



                    print(len(weekdaylabeldateday))
                    print(len(weekdayvaluesavg))
                    print(len(weekdaylabelsavg))



                    print(len(weekendlabeldateday))
                    #print(weekendlabeldateday)

                    print(len(valuesweekend))
                    #print(valuesweekend)

                        

                    a = 25

                    weekendvaluesavg = []
                    weekendlabelsavg = []
                    weekendpredavg = []

                    while a < len(weekendlabeldateday):
                        a1 = int(valuesweekend[a])
                        a2 = int(valuesweekend[a-1])
                        a3 = int(valuesweekend[a-2])
                        a4 = int(valuesweekend[a-3])
                        a5 = int(valuesweekend[a-4])
                        a6 = int(valuesweekend[a-5])
                        a7 = int(valuesweekend[a-6])
                        a8 = int(valuesweekend[a-7])
                        a9 = int(valuesweekend[a-8])
                        a10 = int(valuesweekend[a-9])
                        a11 = int(valuesweekend[a-10])
                        a12 = int(valuesweekend[a-11])
                        a13 = int(valuesweekend[a-12])
                        a14 = int(valuesweekend[a-13])
                        a15 = int(valuesweekend[a-14])
                        a16 = int(valuesweekend[a-15])
                        a17 = int(valuesweekend[a-16])
                        a18 = int(valuesweekend[a-17])
                        a19 = int(valuesweekend[a-18])
                        a20 = int(valuesweekend[a-19])
                        a21 = int(valuesweekend[a-20])
                        a22 = int(valuesweekend[a-21])
                        a23 = int(valuesweekend[a-22])
                        a24 = int(valuesweekend[a-23])
                        a25 = int(valuesweekend[a-24])
                        a26 = int(valuesweekend[a-25])

                        #print(a4)

                        

                        aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                        #print(aavg)

                        if weekendlabeldateday[a] == 0:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a = a + 26

                        else:

                            weekendvaluesavg.append(aavg)

                            weekendlabelsavg.append(labelsweekend[a])

                            weekendpredavg.append(XX33[a])

                            a +=1



                    weekdaypredavg = np.array(weekdaypredavg)
                    weekendpredavg = np.array(weekendpredavg)

                    print(len(weekendlabeldateday))
                    print(len(weekendvaluesavg))
                    print(len(weekendlabelsavg))

                    print(weekendlabeldateday)
                    print(weekendvaluesavg)
                    print(weekendlabelsavg)


                    #print(X44)
                    #print(XX44)

                    print(len(weekdaypredavg))
                    print(len(weekendpredavg))







                    regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekday) == 0:
                        print('')
                        predvaluweekday = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekday = []

                    else:

                        regr.fit(X44, valuesweekday)
                        #regr.fit(weekdaypredavg, weekdayvaluesavg)
                        predictedweekday = regr.predict(X7)


                        #print(predictedweekday)

                        #print(mean_squared_error(values5, predictedweekday))
                        #print(r2_score(values5, predictedweekday))
                       
                        i = len(predictedweekday)
                        k = 0
                        predvaluweekday = []
                        while k < i:
                            predvalweekday = predictedweekday[k]
                            predvaluweekday.append(predvalweekday)
                            k += 1
                        #print(predvaluweekday)

                        #print(len(predvaluweekday))




                    regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                    if len(valuesweekend) == 0:
                        print('')
                        predvaluweekend = []
                    elif len(labels5) == 0:
                        print('')
                        predvaluweekend = []

                    else:

                        regrf.fit(XX44, valuesweekend)
                        #regrf.fit(weekendpredavg, weekendvaluesavg)
                        predictedweekend = regrf.predict(X7)


                        #print(predictedweekend)

                        #print(mean_squared_error(values5, predicted))
                        #print(r2_score(values5, predicted))
                       
                        i = len(predictedweekend)
                        k = 0
                        predvaluweekend = []
                        while k < i:
                            predvalweekend = predictedweekend[k]
                            predvaluweekend.append(predvalweekend)
                            k += 1
                        #print(predvaluweekend)

                        #print(len(predvaluweekend))

                        print(predvaluweekday)
                        print(predvaluweekend)


                    values = values5
                    labels = labels5
                        
                    


                    

                    
                    
                    

                    ####################################


                    i = len(values)
                    k = 0
                    valu = []
                    while k < i:
                        val = values[k]
                        valu.append(val)
                        k += 1
                    #print(valu)

                    z = len(labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = labels[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)

                    a = 0
                    X2 = 0
               

                    X227 = []
                    X228 = []
                    X229 = []
                    X22 = []
                    X2727 = []

                    while a < len(labels):
                        X2 = str(labels[a])
                        X2 = X2.replace('[', '')
                        X2 = X2.replace(']', '')
                        X2 = X2.replace("'", "")
                        X2 = X2.replace(":", " ")
                        X2 = X2.replace("-", " ")
                        X2 = X2.replace("/", " ")
                        X2=X2.split()
                        X25 = X2[-3:-1]

                        X221 = X2[0]
                        X222 = X2[1]
                        X223 = X2[2]
                        
                        X227.append(X221)
                        X228.append(X222)
                        X229.append(X223)
                        a+=1


                    #print(X227[0])
                    #print(X228[0])
                    #print(X229[0])



                    a = 0

                    while a < len(X227):
                        

                        X2227 = int(X227[a])
                        X2228 = int(X228[a])
                        X2229 = int(X229[a])
                        
                        X22222 = datetime.date(X2227, X2228, X2229)

                        X22222 = X22222.weekday()

                        X2727.append(X22222)

                        a+=1
                        
                    #print(X77)
                    #print(X2727)


                    a=0

                    weekendvalu = []
                    weekdayvalu = []

                    while a < len(valu):
                        if X2727[a] == 5:
                            weekendvalu.append(valu[a])

                        elif X2727[a] == 6:
                            weekendvalu.append(valu[a])

                        else:
                            weekdayvalu.append(valu[a])
                        a+=1
                        

                    weekdaystddev = np.std(weekdayvalu)
                    weekendstddev = np.std(weekendvalu)

                    print(weekdayvalu)
                    print(weekendvalu)
                    print(weekdaystddev)
                    print(weekendstddev)
                    

                    if len(valuesweekday) == 0:
                        print('hi')


                        avgg = np.mean(valu)
                        medavgg = np.median(valu)
                        stddev = np.std(valu)
                        #print(avgg)
                        #print(medavgg)
                        #print(stddev)

                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                        z = avgg + (stddev)
                        zz = avgg - (stddev)

                        while v < len(valu):
                            if valu[v] > z:
                                #print('bigger')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            elif valu[v] < zz:
                                #print('smaller')
                                outliers.append(valu[v])
                                if v == 0:
                                    print('')
                                else:
                                    outliers[v-1] = valu[v-1]
                                
                            
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                                
                                if v == 0:
                                    print('')
                                else:
                                    valus[v-1] = valu[v-1]

                                    
                                
                            v += 1


                    elif len(predvaluweekend) == 0:

                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            
                        while v < len(valu):
                            if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                #print('bigger')
                                #print((predvalweekdayu[v] + stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                #print('smaller')
                                #print((predvalweekdayu[v] - stddev))
                                outliers.append(valu[v])
                                
                                    
                                
                                valus.append('f')

                            else:
                                #print('is not')
                                outliers.append('f')
                                valus.append(valu[v])
                            v +=1

                    else:
                        
                        
                            
                        stddev = np.std(valu)
                        v = 0
                        u = len(line_values)
                        outliers = []
                        valus = []
                            

                        while v < len(valu):
                            if X2727[v] == 6:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1

                            elif X2727[v] == 5:

                                if valu[v] > (predvaluweekend[v] + weekendstddev):
                                    #print('bigger weekend')
                                    #print((predvaluweekend[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                    #print('smaller weekend')
                                    #print((predvaluweekend[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not weekend')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1


                            else:
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                        
                                    
                                v += 1





                
            


                    print(outliers)
                    print(len(outliers))

                    #outliers = newoutliers

                        

                    print(title)
                    print(line_labels)
                    print(line_values)
                    
                    print(oldoldtitle)
                    print(oldoldoutliers)
                    print(oldoldvalus)

                    legend = title

                    oldoldvalus = oldoldvalusog

                    

                    print(final_meter_id4)

                    final_meter_id = str(final_meter_id4).title()
                    

                    
                    print(b)
                    print(len(b))

                    print(rpermenant)
                    print(max(rarray))

                    print(len(line_labels))
                    print(len(line_values))
                    print(len(oldoldoutliers))
                    print(len(oldoldvalus))

                    print('oldoldylabel')
                    print(oldoldylabel)
                    print(final_meter_id)

                    ###########################

                    labet = []

                    line_labels = pd.to_datetime(line_labels, format = '%Y-%m-%d %H:%M:%S')

                    z = len(line_labels)
                    y = 0
                    labe = []
                    while y < z:
                        lab = line_labels[y]
                        labet.append(lab)
                        y += 1
                    print(labet)

                    line_labels = np.array(labet)

                    residualsklearndfvalues = pd.DataFrame({'time':line_labels, 'data':line_values})
                    residualsklearndfoutliers = pd.DataFrame({'time':line_labels, 'outliers':outliers})

                    

                    residualsklearndfvalues = residualsklearndfvalues.set_index('time')

                    residualsklearndfvalues.index = residualsklearndfvalues.index.map(lambda x: x.replace(second=0))
                    
                    print(residualsklearndfvalues['data'].head(30))

                    residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                    residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                    print(residualsklearndfvalues.head(75))

                    testarr = np.array(residualsklearndfvalues['data'])

                    z = len(testarr)
                    y = 0
                    valtest = []
                    while y < z:
                        val = testarr[y]
                        if np.isnan(val) == True:
                            valtest.append('f')
                        else:
                            
                            valtest.append(int(val))
                        y += 1
                    testarrvalus = valtest

                    print(testarrvalus)
                    print(len(testarrvalus))

                    testarrlabe = residualsklearndfvalues.reset_index()
                    testarrlabe = pd.to_datetime(testarrlabe['time'], format = '%Y-%m-%d %H:%M')

                    z = len(testarrlabe)
                    y = 0
                    labetest = []
                    while y < z:
                        lab = testarrlabe[y]
                        labetest.append(lab)
                        y += 1
                    testarrlabe = labetest
                    #print(testarrlabe)
                    #print(len(testarrlabe))
                    #print(len(line_values))

                    line_values = testarrvalus
                    line_labels = testarrlabe


                    residualsklearndfoutliers = residualsklearndfoutliers.set_index('time')
                    residualsklearndfoutliers.index = residualsklearndfoutliers.index.map(lambda x: x.replace(second=0))


                    print(residualsklearndfoutliers[160:220])
                    residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]
                    
                    residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()

                    print(residualsklearndfoutliers[880:940])

                    residualsklearndfoutliers = residualsklearndfoutliers.fillna('f')

                    print(residualsklearndfoutliers[880:940])


                    testarroutliers = np.array(residualsklearndfoutliers['outliers'])

                    print('outliers')
                    print(outliers)
                    print(testarroutliers[160:220])

                    z = len(testarroutliers)
                    y = 0
                    outtest = []
                    while y < z:
                        out = testarroutliers[y]
                        if out == 'f':
                            outtest.append(out)
                        
                        else:
                            
                            outtest.append(int(out))
                        y += 1
                    testarroutliers = outtest

                    print(testarroutliers)
                    print(len(testarroutliers))

                    line_outliers = testarroutliers
                    outliers = testarroutliers

                    print(line_outliers)
                    #print(line_labels)
                    print(line_values)
                    print(len(oldlabe))
                    #print(len(line_labels))
                    print(len(line_values))

                    print(line_labels[0:100])
                    print(oldlabe[0:100])

                    line_valuestemp = []
                    oldvalustemp= []
                    oldoldvalustemp= []
                    line_labelstemp= []
                    outlierstemp= []
                    oldoutlierstemp= []
                    oldoldoutlierstemp= []
                    oldoldlabetemp = []

                    if len(line_labels) != len(oldoldlabe):
                        a = 0
                        bb=0
                        cc=0
                        if len(line_labels) > len(oldoldlabe):
                            
                            while a < len(line_labels):
                                b = str(line_labels[bb])
                                c = str(oldoldlabe[cc])

                                #print('1')

                                print(b)
                                print(c)
                                if b == c:
                                    line_valuestemp.append(line_values[bb])
                                    oldoldvalustemp.append(oldoldvalus[cc])
                                    line_labelstemp.append(line_labels[bb])
                                    outlierstemp.append(outliers[bb])
                                    oldoldoutlierstemp.append(oldoldoutliers[cc])
                                    oldoldlabetemp.append(oldoldlabe[cc])
                                    
                                    bb+=1
                                    cc+=1

                                    if cc == len(oldlabe) - 1:
                                        a = len(line_labels) + 1
                                    else:

                                        a+=1
                                else:
                                    cc+=1
                                    a+=1
              

                        else:
                            while a < len(oldoldlabe):
                                b = str(line_labels[bb])
                                c = str(oldoldlabe[cc])

                                #print(b)
                                #print(c)
                                if b == c:
                                    line_valuestemp.append(line_values[bb])
                                    oldoldvalustemp.append(oldoldvalus[cc])
                                    line_labelstemp.append(line_labels[bb])
                                    outlierstemp.append(outliers[bb])
                                    oldoldoutlierstemp.append(oldoldoutliers[cc])
                                    oldoldlabetemp.append(oldoldlabe[cc])

                                    bb+=1
                                    cc+=1

                                    if bb == len(line_labels) - 1:
                                        a = len(oldlabe) + 1
                                    else:

                                        a+=1
                                else:
                                    cc+=1
                                    a+=1

                        line_values = line_valuestemp
                        oldoldvalus = oldoldvalustemp
                        line_labels = line_labelstemp
                        outliers = outlierstemp
                        oldoldoutliers = oldoldoutlierstemp
                        oldoldlabetemp = oldoldlabe

                        print(len(line_valuestemp))

                    title = title.replace(':', '')
                    title = 'Closest Correlation: ' + title + '. Correlation value, r, ' + str(round(rpermenant, 2))


                else:

                    

                    EMStablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/EMStables.csv")

                    EMStables = EMStablesdf['tables']

                    EMStables = np.array(EMStables)

                    a = 0

                    emsY = []

                    while a < len(EMStables):
                        EMSunique = str(EMStables[a])
                        EMSunique = EMSunique.replace('EMStest', '')
                        emsY.append(EMSunique)
                        

                        


                        a+=1



                    print('emsY')
                    print(emsY)

                    EMStitlefix = ["101|The Croft Electricity", "233|The Croft Water", "234|The Croft Gas", "1|Campus Services", "2|Regional Network and Services", "3|Regional Campus Co-Lo", "4|Campus Network", "5|Building Coms B", "6|Campus Servers", "7|Regional Networking Services", "8|Regional and Campus Co Lo", "24|Campus Network", "25|Building Coms A", "26|Incomer No 2 From LV2 ESS", "27|Inc No1 ESS Sw", "28|LV2 ESS Main M", "29|Ess Mech Control Centre", "30|DB-E-M1", "31|DB-E-M2", "96|Chiller No 2", "97|LV3-NE Supply", "100|ISS Total", "132|LV2-ESS Supply", "133|Chiller No 1", "264|Future UPS", "267|UPSLV-US-1", "268|UPSLV-US-3", "269|UPSLV-US-4", "374|UPS2A", "266|ISS Water Meter", "265|ISS Heat Meter","9|Chaplaincy Centre", "10|Chaplaincy Centre Kitchen", "14|Chaplaincy Centre Immersion Heater","11|Chaplaincy Centre", "12|Chaplaincy Centre Kitchen", "13|Chaplaincy Centre Heat meter", "200|Bowland Annexe Electricity", "43|Bowland Annexe Water", "201|Bowland Annexe Heating", "44|Great Hall Immersion Heater 1", "45|Great Hall Immersion Heater 2", "197|Great Hall Electricity", "211|No 1 Transformer Sub 3 Great Hall", "213|No 2 Transformer Sub 3 Great Hall","41|Great Hall Water", "198|Great Hall Gas", "42|Great Hall Heating","37|Conference Centre Electricity","38|Conference Centre Natural Gas","33|Infolab Electricity", "35|Chiller 1", "36|Chiller 2", "39|Transformer Sub 6 Info Lab 1", "40|Transformer Sub 6 Info Lab 2","34|Water Meter","32|Plant Room Natural Gas", "15|Bowland Hall 1-7 Electricity", "515|Bowland Hall 8-15 Electricity", "16|Bowland Hall 1-7 Water", "516|Bowland Hall 8-15 Water","215|Bowland Hall 1-15 Gas", "47|IENS Phase 1 Electricity", "64|IENS Phase 2 Electricity","17|IENS Phase 2 Water","281|IENS Phase 1 Natural Gas", "19|IENS Phase 2 Natural Gas","21|Biology Basement No 1 Immersion Heater", "22|Biology Basement No 2 Immersion Heater", "23|Biology Basement Animal Rooms Immersion Heater", "46|IENS Phase 1 Electricity", "51|Biology Phase 1 Immersion Heater 1", "52|Biology Phase 1 Immersion Heater 2", "85|Transformer No. 1 Sub 8 LEC 1", "87|Bus Bar Greenhouses 1", "88|Bus Bar Greenhouses 2","48|IENS Phase 1 Water","49|IENS Phase 1 Gas","50|IENS Phase 1 Heat Meter", "18|IENS Phase 2 Heat Meter","86|LEC 3 No. 1 Transformer No. 10 Sub Station","20|LEC 3 Water", "282|LEC 3 Natural Gas","53|Transformer Sub 5 Grizedale College 1", "54|Transformer Sub 5 Grizedale College 2", "57|Grizedale Town House 1", "60|Grizedale Town House 2", "273|Grizedale Bar Electricity", "276|Grizedale Laundry", "279|Grizedale Laundry Lighting","274|Grizedale Bar Water", "277|Grizedale Laundry Water", "514|Grizedale Residences Water","275|Grizedale Bar Gas", "278|Grizedale Laundry Gas", "513|Grizedale Residences Natural Gas","280|Grizedale Bar 101-108","55|Management Phase 1 Electricity", "56|Management Extension Electricity", "107|Management Immersion Heater No 1", "108|Management Immersion Heater No 2", "129|Management Phase 2 Adj Lift 1 Electricity","139|Management School Water","106|Management School Phase 1 Heat Meter","58|Pendle Main 2","59|Charles Carter Building", "298|Charles Carter A Floor A1 Total", "299|Charles Carter A Floor A1 Lighting", "300|Charles Carter A Floor A2 Total", "301|Charles Carter A Floor A2 Lighting", "302|Charles Carter B Floor B1 Total", "303|Charles Carter B Floor B1 Lighting", "304|Charles Carter B Floor B2 Total", "305|Charles Carter B Floor B2 Lighting", "306|Charles Carter Plant Room DB", "307|Charles Carter Comms Plant Room", "308|Charles Carter Plant Room Total", "310|Charles Carter Mechanical Plant", "325|Charles Carter C Floor C1 Total", "326|Charles Carter C Floor C1 Lighting", "327|Charles Carter C Floor C2 Total", "328|Charles Carter C Floor C2 Lighting", "329|Charles Carter D Floor D1 Total", "330|Charles Carter D Floor D1 Lighting", "331|Charles Carter D Floor D2 Total", "332|Charles Carter D Floor D2 Lighting","311|Charles Carter Water Meter","309|Charles Carter Heat Meter","61|Lonsdale Laundrette Electricity","62|Lonsdale Laundrette Water","63|Lonsdale Laundrette Gas","65|CHP Electricity Input", "66|CHP Output Gen", "69|Biomass Boiler Electricity", "181|Boiler House CHP Gas","67|CHP Heat Meter", "68|Biomass Heat Meter","182|Boiler Gas", "184|Firm Gas", "185|3 Gas Boilers","70|Post Graduate Statistics Building Electricity","71|Post Graduate Statistics Building Water","72|Post Graduate Statistics Building Heat Meter","73|Maintenance Workshop 2 Electricity","151|Maintenance Workshops Water","316|Maintenance Workshops Heat Meter","74|Anne Helme Garage Electricity","75|Anne Helme Garage Water Meter","76|County South Flats 5, 6, 7", "77|County South DB D2 Power", "78|County South DB D2 Lighting", "79|County South DB C2 Power", "80|County South DB C2 Lighting", "116|County South DB B1 Power", "117|County South DB B1 Lighting", "118|County South DB C1 Power", "119|County South DB C1 Lighting", "120|County South DB D1 Power", "121|County South DB D1 Lighting", "171|County South Flats 1, 2, 3, 4", "172|County South DB D3 Power", "173|County South DB D3 Lighting", "174|County South DB C3 Power", "175|County South DB C3 Lighting", "176|County South DB B3 Power", "177|County South DB B3 Lighting", "210|County South Block 75 - 77", "214|County Town Houses and County South No. 3 Substation", "223|County South C20 Modem", "238|County South BD D2 Power", "239|County South BD D2 Lighting", "242|County South Plant Room Lighting", "243|County South Plant Room Power", "244|County South Plant Room", "246|County South IAS -Old Supply", "335|County South BB01 Riser", "336|County South BB02 Riser", "337|County South BB03 Riser", "338|County South LT Plant Room", "339|County South C20 Modem Comm DB", "340|County South Plant Room Panel", "341|County South DB A1 Power", "342|County South DB A1 Lighting", "343|County South Laundrette DB", "344|County South Existing Lift", "345|County South DB 2 Room A62", "346|County South FASS", "347|County South DB LK Room 107", "348|County South DB Ext Mech Power", "349|County South Main Incomer", "372|County South Kitchen Immersion Heater", "373|County South Laundry Immersion Heater","240|County South Laundrette Water", "334|County South Residences 75 - 77 Water","241|County South Laundrette Gas", "333|County South Residences 75 - 77 Gas","245|County South Plant Room Heat Meter","236|Fylde Residences Electricity","81|Fylde Lytham Water", "209|Fylde Pilling Water","183|Furness and Fylde Residence Gas","82|Uni Travel Corr Electricity", "83|Uni Travel Front Electricity","84|Uni Travel Water","89|Faraday Lifeboat Electricity", "91|Chiller No 1", "92|Chiller No 2", "93|MCCP Meter", "158|Central Services Immersion Heater", "155|DB LCP", "156|UPS Output", "157|UPS Output Rectifier","90|Faraday Building Gas","94|Bowland Ash Electricity", "205|Bowland Ash Immersion Heater 1", "204|Bowland Ash Immersion Heater 2", "206|Bowland Ash Muslim Prayer Room","199|Bowland Ash Water","203|Bowland Ash Gas", "202|Bowland Ash Heating", "95|Non Ess (MCCN)", "98|LV4-NE Supply", "99|Incomer No. 2", "130|Chiller No 3 Fut", "131|Standby Generator","102|Bowland North Electricity","103|Bowland North Water","104|Bowland North Heat Meter","235|No 1 Transformer SS Furness Residence", "237|Furness Residence Electricity", "286|Furness Perimeter Residence Electricity", "289|Furness Perimeter Residence Immersion Heater", "105|Furness Hawkshead Water", "208|Furness Colton Water", "287|Furness Perimeter Residence Water","288|Furness Perimeter Residence Heat Meter","109|Charity Shop Electricity Meter","110|Charity Shop Water Meter","111|LUSU Housing Electricity Meter","112|John Creed 1", "135|John Creed Immersion Heater","113|John Creed Residence 3 Blocks Water", "517|John Creed Residence 4 Blocks Water","134|John Creed Residences Heat Meter","216|LEC Workshops NE Corner Electricity","114|LEC Remote Workshop Water","115|LEC Remote Workshop Gas","122|Security Office Electricity","123|Robinsons Left Electricity Meter", "124|Robinsons Right Electricity Meter", "125|Robinsons Water Meter","187|Bowland Tower South and East Wing Electricity", "126|Bowland Tower Ent DB", "127|Bowland Tower MCCP Panel", "128|Bowland Tower Sprinkler", "190|Bowland Tower Dis Board", "192|Bowland Tower Plantroom Input 7", "262|Bowland Tower Electric", "394|Bowland Tower Floor D & E Lighting Electric", "395|Bowland Tower Floor D & E Total Electricity", "396|Bowland Tower Floor F, G & H Lighting Electric", "397|Bowland Tower Floor F, G & H Total Electricity", "398|Bowland Tower Floor J, K & L Lighting Electric", "399|Bowland Tower Floor J, K & L Total Electricity", "400|Bowland Tower Floor M, N & O Lighting Electric", "401|Bowland Tower Floor M, N & O Total Electricity", "417|Bowland Tower RmB41comms Electricity", "418|Bowland Tower E Flat16/17 Electricity", "419|Bowland Tower South Flat 18 Electricity", "420|Bowland Tower South Flat 19/20 Electricity", "421|Bowland Tower East B Floor Electricity", "422|Bowland Tower East C Floor Electricity", "423|Bowland Tower South B Floor Electricity", "424|Bowland Tower South C Floor Electricity","263|Bowland Tower Water", "162|Bowland Tower Water 2", "375|Bowland Tower Slaid Hot Water", "376|Bowland Tower Hot Water F","160|Bowland Tower South and East Wing Heating", "377|Bowland Tower Heating","136|Furness College Electricity", "460|Flat 1 Comsumer Unit", "461|Flat 2 Comsumer Unit", "462|Flat 3 Comsumer Unit", "463|Flat 4 Comsumer Unit", "382|Flat 5 Comsumer Unit", "383|Flat 6 Comsumer Unit", "384|Flat 7 Comsumer Unit", "385|Flat 8 Comsumer Unit", "407|Power Section DB LCDB 021", "408|Lighting Section DB LCDB 021", "409|Power Section DB NDB 02", "410|Lighting Section DB NDB 02", "411|Power Section DB LBDB 021", "412|Lighting Section DB LBDB 021", "413|Power Section DB NDB 01", "414|Lighting Section DB NDB 01", "415|Power Section DB LADB 021", "416|Lighting Section DB LADB 021", "437|A Floor Electricity", "438|A Floor Electricity Check", "444|SW Electrical Bus Bar", "445|NW Electrical Bus Bar", "446|South Block DB DB 4X", "447|Green Room DB", "448|Computer Shop", "449|The Venue", "450|NE Plant Room DB", "468|Foyer Area D8 GDB 003", "469|North East Lift", "470|Power DB LBDB 011", "471|Power Foyer DB GDB 003", "473|Lighting Foyer DB GDB 003", "474|Power DB LADB 011", "475|Lighting DB LADB 011", "431|SW Bus Bar", "432|NE Bus Bar", "433|South Bl DB 4X", "434|NE Plant Room DB", "439|NW Pass Lift", "440|SCR TV Room", "441|Bar Dis Board ", "442|Switch Room Dis B", "443|OSS Walk Lights", "452|Pwr LB DB 11", "453|Light LB DB 11", "454|PWR Foyer GDB 3", "455|Lgt Foyer GDB 3", "456|PWR LA DB 3", "457|Light LA DB 11", "458|CW DHW System", "472|NrthBL CFlrNDB02","464|Flat 1 Water Meter", "465|Flat 2 Water Meter", "466|Flat 3 Water Meter", "467|Flat 4 Water Meter", "402|Flat 6 Water Meter", "403|Flat 7 Water Meter", "436|Pressurisation Make up Water", "476|Cold Water Meter for DHWS", "477|Main Water Meter", "459|College 140 Main Water IN", "378|Flat 1 Heat Meter", "379|Flat 2 Heat Meter", "380|Flat 3 Heat Meter", "381|Flat 4 Heat Meter", "404|Flat 5 Heat Meter", "405|Flat 6 Heat Meter", "406|Flat 7 Heat Meter", "451|LPHW DHWS Heat Meter", "435|College 140 DHWS Heat Meter","142|Engineering Immersion Heater","141|Engineering Water","138|Engineering Gas Meter","137|Engineering Heat Meter","143|Barker House Farm Electricity","144 |Barker House Farm Water","145|Barker House Farm Natural Gas","207|Bailrigg House Electricity", "147|Bailrigg House Water", "146|Bailrigg House Gas", "148|Cartmel Laundrette Electricity","149|Cartmel Laundrette Water","150|Cartmel Laundrette Gas","229|Whewell Building Electricity","230|Whewell Building Water","217|University House Phase 1 Electricity", "218|University House Phase 2 Electricity", "219|University House Lift D Floor Electricity", "222|University House Immersion Hater Electricity","221|University House Water","220|University House Heat Meter", "247|Sultans Electricity","283|Sultans Water","284|Sultans Gas","285|Ketchup", "227|No 1 Transformer Sub 7 Alex Park", "228|No 2 Transformer Sub 7 Alex Park","290|Steam Room Electricity", "291|AHU 1", "292|AHU 2", "293|Floating Floor", "294|MCCP 1", "295|MCCP 2", "296|Passenger Lift", "297|Sauna", "351|Emergency Light", "352|BasePlRmlgs 01-L", "353|BasePlRm P DB01P", "354|Wet CH L DB-02-L", "355|Wet Ch P DB-02-P", "356|DB External", "357|DB 5", "358|Main Electric Sub No 12 Sports Centre", "359|DB 6", "360|DB-07-P", "361|Comms DB", "362|Generator", "363|Pool Filter", "425|Ground Floor Dry Lighting", "426|Ground Floor Dry Power", "427|Ground Floor Fitness Lighting", "428|Ground Floor Fitness Power", "429|Roof Lighting", "430|Roof Power", "386|Sports Centre Water", "140|Old Sports Centre Water","387|Main Hall Gas Meter", "388|Sports Centre Gas Boilers", "389|Main Gas Meter across the Road","390|CT Heating DHW Primary", "391|MTHW Heating Primary", "392|CT Heating Secondary", "393|VT Heating Secondary","224|Pre School Electricity","225|Pre School Water","226|Pre School Gas","169|Post Office Electricity", "170|Post Office Water","167|Diggles Electricity","168|Diggles Water","180|Orange Telephones Electricity","153|MCCP Electric", "154|3 Boilers H Out ", "312|Circulation Pump No 1", "313|Circulation Pump No 2", "314|Circulation Pump No 3", "315|Circulation Pump No 4", "178|No 1 Transformer Sub 1 Energy Centre", "179|No 2 Transformer Sub 1 Energy Centre", "317|Water Meter RHS Rear", "318|Water Meter LHS Rear","152|Energy Centre Oil","364|DB 1A", "365|DB 1B", "319|DB 1C", "366|DB 2A", "367|DB 2B", "368|DB 3A", "369|DB 3B", "320|BMS Panel", "321|Lift Electricity", "322|Chiller Units", "370|Dimmer Rack No 1", "371|Dimmer Rack No 2", "212|Total of LEC Workshops and LICA","324|LICA Water","323|LICA Heat Meter","270|Lancaster House Electric","271|Lancaster House Hotel Water","272|Lancaster House Hotel Gas","231|County Town Houses Water","232|County Town Houses Gas Meter","194|George Fox Electricity", "258|B27 Immersion Heater Ground Floor", "259|B27 Immersion Heater 1st Floor", "260|George Fox B Floor NE", "261|George Fox B Floor SW", "195|George Fox Water","257|George Fox B27 Heat Meter","255|Wongs Kitchen Electricity","196|Wongs Kitchen Water","256|Wongs Kitchen Gas","191|Greggs Electricity","193|Greggs Water","188|Create Electricity","189|Create Water","165|Hairdressers Electricity","186|Hairdressers Water No 1", "166|Hairdressers Water No 2","163|Ice Cream Shop Electricity","164|Ice Cream Shop Water","252|Slaidburn House Electricity","161|Slaidburn House Water","159|Slaidburn House Heat Meter","251|Spar No 1 Electricity", "250|Spar No 2 Electricity","253|Spar Water","249|T Mobile Electricity","248|Student Union Electricity", "350|Student Union Office Electricity","254|Student Union Shop Water","479|DB LG2LP", "480|DB LG3L", "482|DB LG3P", "483|DB A1P", "484|DB B1L", "485|DB B1P", "486|DB B2P", "487|DB A1L", "488|DB B2L", "489|DB A2L", "490|DB A2P", "491|DBCP4 COM2", "492|DB3LP", "493|MCP5", "494|DB C2P", "495|DB C2L", "496|MCP3", "497|DBD4LP", "499|DB LG4P", "500|DB LG4L", "501|DB LG5L", "502|DB LG5P", "504|MCP01", "506|DB COMMS", "507|MCP03", "508|DB C1L", "509|DB C1P", "510|DB D1LP", "511|MCP02", "512|DB D2LP", "481|Book WATER", "503|DIST HEAT EAST","478|Book HEAT", "505|DOM HOT WATER"]                           

                    SYNtablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Syntables.csv")

                    SYNtables = SYNtablesdf['tables']

                    SYNtables = np.array(SYNtables)


                    a = 0

                    synY2 = []

                    while a < len(SYNtables):
                        SYNunique = str(SYNtables[a])
                        SYNunique = SYNunique.replace('Syntest', '')
                        synY2.append(SYNunique)
                        

                        


                        a+=1



                    print('SynY')
                    print(synY2)

                    Syntitlefix = ["MC044-L01/M3|Faraday Lifeboat Electricity", "MC044-L01/M6|Chiller No 1 Electricity", "MC044-L01/M8|Chiller No 2 Electricity", "MC044-L01/M7|MCCP Meter", "MC044-L01/M1|DB LCP", "MC044-L01/M2|UPS Output", "MC044-L01/M4|UPS Output Rectifier", "MC044-L02/M21R856|Central Services Immersion Heater", "MC044-L01/M5|Faraday Building Gas","MC076-L01/M6|Engineering Water","MC076-L01/M3|Engineering Gas Meter","MC076-L01/M9R20|Engineering Heat Meter","MC048-L01/M1|Chaplaincy Centre Electricity", "MC048-L01/M2|Chaplaincy Centre Kitchen Electricity","MC048-L01/M3|Chaplaincy Centre Water", "MC048-L01/M4|Chaplaincy Centre Kitchen Water","MC048-L01/M5|Chaplaincy Centre Heat Meter","MC003_L02_M1|Bailrigg House Electricity","MC003_L02_M4|Bailrigg House Water","MC003_L02_M3|Bailrigg House Gas","AP081-L01/M2|Barker House Farm Water","AP081-L01/M3|Barker House Farm Gas","MC030-L01/M3|Bowland Annexe House Electricity","MC042-L01/M10R0|Bowland Annexe Heat Meter","MC042-L01/M9R3205|Bowland Ash Electricity","MC042-L01/M1|Bowland Ash Water","MC042-L01/M11R0|Bowland Ash Heat Meter","MC030-L01/M2|Bowland Ash Gas","MC014-L01/M1|Bowland Hall 1 - 7 Electricity", "MC014_L02_M1|Bowland Hall 8-15 Electricity","MC014-L01/M2|Bowland Hall 1 - 7 Water", "MC014_L02_M2|Bowland Hall 8-15 Water","MC043-L01/M3|Bowland North Electricity","MC043-L01/M2|Bowland North Water","MC043-L01/M1|Bowland North Heat Meter","MC062-L01/M25R2064|Bowland Tower MCCP Panel", "MC062-L01/M26R2068|Bowland Tower Sprinkler", "MC062-L01/M7|Bowland Tower Dis Board", "MC062-L01/M27R2072|Bowland Tower D & E Lighting", "MC062-L01/M28R2076|Bowland Tower D & E Total", "MC062-L01/M36R2060|Bowland Tower F, G & H Lighting", "MC062-L01/M37R2064|Bowland Tower F, G & H Total", "MC062-L01/M29R2080|Bowland Tower J, K & L Lighting", "MC062-L01/M30R2084|Bowland Tower J, K & L Total", "MC062-L01/M34R2052|Bowland Tower M, N & O Lighting", "MC062-L01/M35R2056|Bowland Tower M, N & O Total", "MC062-L01/M4|Bowland Tower E Flat 16/17", "MC062-L01/M21R2048|Bowland Tower South F 18", "MC062-L01/M22R2052|Bowland Tower S F19/20", "MC062-L01/M1|Bowland Tower East B Flr", "MC062-L01/M2|Bowland Tower East C Flr", "MC062-L01/M13R2064|Bowland Tower South B Flr", "MC062-L01/M24R2060|Bowland Tower South C Flr","MC062-L01/M14R2068|Bowland Tower Water","MC062-L01/M17R2080|Bowland Tower Sth and E Wing Heat Meter", "MC062-L01/M16R2076|Slaidburn House Heat Meter","MC202-L01/M12R999|Charles Carter A Floor A1 Total", "MC202-L01/M13R999|Charles Carter A Floor A1 Lighting", "MC202-L01/M14R999|Charles Carter A Floor A2 Total", "MC202-L01/M15R999|Charles Carter A Floor A2 Lighting", "MC202-L01/M16R999|Charles Carter B Floor B1 Total", "MC202-L01/M17R999|Charles Carter B Floor B1 Lighting", "MC202-L01/M18R999|Charles Carter B Floor B2 Total", "MC202-L01/M19R999|Charles Carter B Floor B2 Lighting", "MC202-L01/M10R72|Charles Carter Plant Room DB", "MC202-L01/M11R72|Charles Carter Comms Plant Room", "MC202-L01/M20R999|Charles Carter C Floor C1 Total", "MC202-L01/M21R999|Charles Carter C Floor C1 Lighting", "MC202-L01/M22R999|Charles Carter C Floor C2 Total", "MC202-L01/M23R999|Charles Carter C Floor C2 Lighting", "MC202-L01/M24R999|Charles Carter D Floor D1 Total", "MC202-L01/M25R999|Charles Carter D Floor D1 Lighting", "MC202-L01/M26R999|Charles Carter D Floor D2 Total", "MC202-L01/M27R999|Charles Carter D Floor D2 Lighting","MC202_L01_M1|Charles Carter Water","MC202_L01_M2|Charles Carter Heat Meter","MC032-L02/M1|County South Flats 5, 6 & 7", "MC032-L01/M16R999|County South DB D2 Lighting", "MC032-L02/M11R999|County South DB C2 Power", "MC032-L02/M12R999|County South DB C2 Lighting", "MC032-L01/M11R999|County South DB B1 Power", "MC032-L01/M12R999|County South DB B1 Lighting", "MC032-L01/M13R999|County South DB C1 Power", "MC032-L01/M14R999|County South DB C1 Lighting", "MC032-L01/M15R999|County South DB D1 Power", "MC032-L03/M1|County South Flats 1 2 3 4", "MC032-L03/M13R999|County South DB D3 Power", "MC032-L03/M14R999|County South DB D3 Lighting", "MC032-L03/M11R999|County South DB C3 Power", "MC032-L03/M12R999|County South DB C3 Lighting", "MC032-L03/M9R999|County South DB B3 Power", "MC032-L03/M10R999|County South DB B3 Lighting", "MC032-L01/M1|County South Flat 10 11 12 13 14 ", "MC032-L02/M13R999|County South BD D2 Power", "MC032-L02/M14R999|County South BD D2 Lighting", "MC032-L011/M8|County South Plant Room Lighting", "MC032-L011/M7|County South Plant Room Power", "MC032-L09/M1|County South Plant Room", "MC032-L04/M1|County South BB01 Riser", "MC032-L04/M2|County South BB02 Riser", "MC032-L04/M3|County South BB03 Riser", "MC032-L04/M10R999|County South DB A1 Power", "MC032-L04/M9R999|County South DB A1 Lighting", "MC032-L04/M8|County South Main Incomer", "MC032-L011/M11R52|County South Kitchen Immersion Heater","MC134-L02/M2|County South Res 75 - 77 Water","MC032-L011/M6|County South Laundrette Heat Meter","MC032-L09/M10R2052|County South Laundrette Gas", "MC134-L02/M1|County South Res 75 - 77","MC126-L01/M1|Fylde Pilling Water","MC078-L02/M1|George Fox Electricity", "MC078-L03/M2|George Fox Immersion Heater Ground Floor Electricity", "MC078-L03/M3|George Fox Immersion Heater 1st Floor Electricity","MC078-L02/M3|George Fox Water","MC031-L01/M3|Great Hall Electricity","MC031-L01/M1|Great Hall Water","MC031-L01/M4|Great Hall Gas","MC070-L04/M5|Biology Basement No 1 Immersion Heater", "MC070-L04/M6|Biology Basement No 2 Immersion Heater", "MC070-L01/M1|IENS Phase 1 Electricity", "MC070-L01/M2|NERC Phase 1 IENS Re Furb", "MC070-L01/M7|Biology Phase 1 No 1 Immersion Heater", "MC070-L01/M8|Biology Phase 1 No 2 Immersion Heater","MC070-L01/M3|IENS Phase 1 Water", "MC070-L03/M1|IENS Phase 2 Water - NERC","MC070-L01/M9R20|IENS Phase 1 Heat Meter", "MC070-L04/M10R20|IENS Phase 2 Heat Meter","MC070-L01/M4|IENS Phase 1 Gas", "MC070-L02/M6|IENS Phase 2 Gas - NERC","MC102-L01/M3|Infolab Electricity", "MC102-L01/M5|Infolab Chiller No 1 Electricity", "MC102-L01/M6|Infolab Chiller No 2 Electricity","MC102-L01/M4|Infolab Water","MC102-L01/M1|Plant Room Gas","MC070-L04/M3|LEC 2 NERC Gas","MC065-L01/M13R5099|DB A1P", "MC065-L01/M14R5099|DB B1L", "MC065-L01/M15R5099|DB B1P", "MC065-L01/M19R5099|DB B2P", "MC065-L01/M12R5099|DB A1L", "MC065-L01/M18R5099|DB B2L", "MC065-L01/M16R5099|DB A2L", "MC065-L01/M17R5099|DB A2P", "MC065-L04/M10R45099|DB C2P", "MC065-L04/M9R45099|DB C2L","MC204-L02/M3|Steam Room", "MC204-L02/M12R2060|AHU 1", "MC204-L02/M13R2064|AHU 2", "MC204-L02/M14R2068|Floating Floor", "MC204-L02/M4|MCCP 1", "MC204-L02/M1|MCCP 2", "MC204-L02/M9R2048|Passenger Lift", "MC204-L02/M6|Sauna", "MC204-L01/M9R999|BasePlRmlgs 01-L", "MC204-L01/M10R999|BasePlRm P DB01P", "MC204-L01/M11R999|Wet CH L DB-02-L", "MC204-L01/M12R999|Wet Ch P DB-02-P", "MC204-L02/M7|DB External", "MC204-L02/M15R2072|DB 5", "MC204-L03/M9R52|Main Electric Sub No 12 Sports Centre", "MC204-L02/M16R2076|DB 6", "MC204-L02/M8|Comms DB", "MC204-L02/M10R2052|Generator", "MC204-L02/M5|Pool Filter", "MC204-L02/M16R2076|Ground Floor Dry Lighting", "MC204-L02/M2|Ground Floor Dry Power", "MC204-L01/M15R999|Ground Floor Fitness Lighting", "MC204-L01/M16R999|Grond Floor Fitness Power", "MC204-L01/M17R999|Roof Lighting", "MC204-L01/M18R999|Roof Power","MC204-L01/M1|Sports Centre Water","MC204-L01/M5|CT Heating DHW Primary", "MC204-L01/M6|MTHW Heating Primary", "MC204-L01/M7|CT Heating Secondary", "MC204-L01/M8|VT Heating Secondary","MC204-L01/M2|Main Hall Gas Meter", "MC204-L01/M3|Gas Boilers", "MC204-L01/M4|Main Gas Meter across the Road","MC075-L02/M1|Management No 1 Immersion Heater", "MC075-L02/M2|Management No 2 Immersion Heater", "MC203-L01/M4|Management Phase 2 Adj Lift 1 Electricity","MC075-L02/M3|Management School Phase 1 Heat Meter","MC062-L01/M40R20|Slaidburn House Electricity", "MC061-L01/M5|LUSU Shop Electricity","MC001-L01/M3|The Croft Electricity","MC001-L01/M1|The Croft Water","MC001-L01/M2|The Croft Gas","MC051-L01/M1|University House 1 Phase 1", "MC051-L01/M3|University House 1 Phase 2", "MC051-L01/M6|University House Immersion Heater","MC051-L01/M5|University House Water","MC051-L01/M4|University House Heat Meter","MC077-L01/M1|Whewell Building Electricity","MC077-L01/M2|Whewell Building Water","MC200-L01/M9R2048|DB 1C", "MC200-L01/M10R2052|BMS Panel", "MC200-L01/M11R2056|Lift", "MC200-L01/M12R2060|Chiller Units", "MC200-L01/M1|DB 1A", "MC200-L01/M2|DB 1B", "MC200-L01/M3|DB 2A", "MC200-L01/M4|DB 2B", "MC200-L01/M5|DB 3A", "MC200-L01/M6|DB 3B", "MC200-L01/M7|Dimmer Rack No 1", "MC200-L01/M8|Dimmer Rack No 2","MC200-L01/M13R2064|LICA Heat Meter","MC061-L04/M23R52|CHP Elct Input","MC061-L01/M14R20|CHP Heat Meter", "MC061-L04/M6|Biomass Heat Meter","MC061-L01/M8|MCCP Electric", "MC061-L01/M1|Circulation Pump No 1", "MC061-L01/M2|Circulation Pump No 2", "MC061-L01/M3|Circulation Pump No 3", "MC061-L01/M4|Circulation Pump No 4","MC061-L01/M6|Water Meter RHS Rear", "MC061-L01/M5|Water Meter LHS Rear","MC171-L01/M9R999|Post Graduate Statistics Electricity","MC171-L01/M1|Post Graduate Statistics Water","MC171-L01/M21R20|Post Graduate Statistics Heat Meter","MC067-L01/M9R52|Pre School Centre Electricity","MC067-L01/M1|Pre School Centre Water","MC067-L01/M2|Pre School Centre Gas","MC050-L01/M1|Security Office Electricity","MC061-L04/M24R52|No 1 Transformer Sub 1 Energy Centre", "MC061-L04/M26R52|No 2 Transformer Sub 1 Energy Centre", "MC061-L04/M14R2060|Boiler House CHP Gas","MC061-L04/M1|Boiler Gas", "MC061-L04/M2|Furness and Fylde Residence", "MC061-L04/M13R2056|Firm Gas", "MC061-L04/M1|3 Gas Boilers","MC199-L01/M11R2048|Chiller No 2", "MC199-L01/M3|LV3-NE Supply", "MC199-L01/M6|ISS Total", "MC199-L01/M13R2056|LV2-ESS Supply", "MC199-L01/M14R2060|Chiller No 1","MC013-L01/M2|No 1 Transformer Sub 3 Gt Hall", "MC013-L01/M4|No 2 Transformer Sub 3 Gt Hall", "MC013-L01/M3|LEC Workshops NE Corner","MC203-L01/M10R1280|No 1 Transformer Sub 5 Grizedale College", "MC203-L01/M11R1280|No 2 Transformer Sub 5 Grizedale College","MC102-L04/M9R52|No 1 Transformer Sub 6 Info Lab", "MC102-L04/M10R52|No 2 Transformer Sub 6 Info Lab","MC138-L01/M9R52|No 1 Transformer Sub 7 Alex Park", "MC138-L01/M12R52|No 2 Transformer Sub 7 Alex Park","MC068-L01/M13R52|No 1 Transformer Sub 8 Lec 1", "MC068-L01/M14R52|Lec 3 No 1 Transformer No 10 Sub Station","MC140-L01/M14R52|No 1 Transformer SS Furness Residence","MC199-L01/M1|Non Ess (MCCN)", "MC199-L01/M4|LV4-NE Supply", "MC199-L01/M10R52|Incomer No 2", "MC199-L01/M12R2052|Standby Gener", "MC071-L02/M1|Flat 1 Comsumer Unit", "MC071-L02/M2|Flat 2 Comsumer Unit", "MC071-L02/M3|Flat 3 Comsumer Unit", "MC071-L02/M4|Flat 4 Comsumer Unit", "MC071-L02/M13R2064|Flat 5 Comsumer Unit", "MC071-L02/M14R2068|Flat 6 Comsumer Unit", "MC071-L02/M15R2072|Flat 7 Comsumer Unit", "MC071-L02/M23R2056|Power Section DB LCDB 021", "MC071-L02/M24R2060|Lighting Section DB LCDB 021", "MC071-L02/M25R2064|Power Section DB NDB 02", "MC071-L02/M26R2068|Lighting Section DB NDB 02", "MC071-L02/M27R2072|Power Section DB LBDB 021", "MC071-L02/M28R2076|Lighting Section DB LBDB 021", "MC071-L02/M29R2080|Power Section DB NDB 01", "MC071-L02/M30R2084|Lighting Section DB NDB 01", "MC071-L02/M31R2088|Power Section DB LADB 021", "MC071-L02/M32R2092|Lighting Section DB LADB 021", "MC071-L01/M18R2084|SW Bus Bar", "MC071-L01/M17R2080|NE Bus Bar", "MC071-L01/M41R2080|Elect A Floor", "MC071-L01/M4|NW Pass Lift", "MC071-L01/M19R2088|South Block DB DB 4X", "MC071-L01/M34R2052|PWR Foyer GDB 3", "MC071-L01/M35R2056|Lgt Foyer GDB 3", "MC071-L01/M3|North East Lift", "MC071-L01/M32R2092|Power DB LBDB 011", "MC071-L01/M34R2052|Power Foyer DB GDB 003", "MC071-L01/M35R2056|Lighting Foyer DB GDB 003", "MC071-L01/M36R2060|Power DB LADB 011", "MC071-L01/M37R2064|Lighting DB LADB 011","MC131-L01/M3|Furness Hawkshead Water", "MC071-L02/M5|Flat 1 Water Meter", "MC071-L02/M6|Flat 2 Water Meter", "MC071-L02/M7|Flat 3 Water Meter", "MC071-L02/M8|Flat 4 Water Meter", "MC071-L02/M16R2076|Flat 5 Water Meter", "MC071-L02/M17R2080|Flat 6 Water Meter", "MC071-L02/M18R2084|Flat 7 Water Meter", "MC071-L01/M38R2068|Main Water Meter", "MC071-L01/M40R2076|Pressurisation Make up Water", "MC071-L01/M38R2068|Furness 140 Main Water IN ","MC071-L02/M9R2048|Flat 1 Heat Meter", "MC071-L02/M10R2052|Flat 2 Heat Meter", "MC071-L02/M11R2056|Flat 3 Heat Meter", "MC071-L02/M12R2060|Flat 4 Heat Meter", "MC071-L02/M19R2088|Flat 5 Heat Meter", "MC071-L02/M20R2092|Flat 6 Heat Meter", "MC071-L02/M21R2048|Flat 7 Heat Meter", "MC071-L01/M23R2056|LPHW DHWS Heat Meter","LV1 UPS 1 Campus Servers DB/E/S4B|Campus Services DB-E-S4B", "LV1 UPS 1 Regional Networking and Services DB/E/S3B|Regional Network and Services DB-E-S3B", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1B|Regional Campus Co-Lo DB-E-S1B", "LV1 UPS 1 Campus Network DB/E/S2B|Campus Network DB-E-S2B", "LV1 UPS 1 Building Comms DB/E/S5B|Building Coms DB-E-S5B", "LV1 UPS 1 Campus Servers DB/E/S4A|Campus Servers DB-E-S4A", "LV1 UPS 1 Regional Networking and Services DB/E/S3A|Regional Networking Services DB-E-S3A", "LV1 UPS 1 Regional & Campus CO LO DB/E/S1A|Regional and Campus Co Lo DB-E-S1A", "LV1 UPS 1 Campus Network DB/E/S2A|Campus Network DB-E-S2A", "LV1 UPS 1 Building Comms DB/E/S5A|Building Coms DB-E-S5A", "LV2 - ESS Supply From LV1 -ESS|LV2 ESS Main M", "LV2 - Essential Mechanical Control Centre 2/6|Ess Mech Control Centre", "LV2 - ESS CB/E/M2 2/8|DB-E-M2", "LV2 - ESS UPS Future|Future UPS", "LV1 -UPS1 Incomer No1|UPSLV-US-1", "LV2 - ESS UPS 2/4|UPSLV-US-4","ISS Main Water Meter|ISS Water Meter","ISS Main Heat Meter|ISS Heat Meter"]   



                    wifitablesdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Wifitables.csv")

                    wifitables = wifitablesdf['tables']

                    wifitables = np.array(wifitables)

                    a = 0

                    wifiY7 = []

                    while a < len(wifitables):
                        wifiunique = str(wifitables[a]).replace('|', '')
                        wifiunique = wifiunique.replace('wifitest', '')
                        wifiY7.append(wifiunique)
                        

                        


                        a+=1

                    a = 0

                    wifiY8 = []

                    while a < len(wifitables):
                        wifiunique = str(wifitables[a])
                        wifiunique = wifiunique.replace('wifitest', '')
                        wifiunique = wifiunique.split('|')
                        print(wifiunique)
                        wifiY8.append(wifiunique)

                        a+=1

                    print('WifiY7')
                    print(wifiY7)
                    print('WifiY8')
                    print(wifiY8)

                    

                    wifiY6 = wifiY8


                    print(len(wifiY6))
                    print(len(wifiY7))

                    wifiY7temp = []

                    if len(wifiY6) > len(wifiY7):
                        a = 0
                        b = 0
                        while a < len(wifiY6):

                            Building_name = wifiY6[a][0]
                            Floor_name = wifiY6[a][1]
                            
                            Building_name = Building_name.strip()
                            Floor_name = Floor_name.strip()

                            check11 = Building_name.upper() + Floor_name.upper()
                            check22 = str(wifiY7[b])

                            print(check11)
                            print(check22)

                            if check11 == check22:
                                wifiY7temp.append(wifiY7[b])
                                a+=1
                                b+=1

                            else:
                                wifiY7temp.append('f')
                                a+=1

                        wifiY7 = wifiY7temp


                    print(wifiY7)
                    print(len(wifiY6))
                    print(len(wifiY7))































                    df = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    print(values1)
                    #print(timestamp)
                    print(title)

                    ylabelarray = str(title).split()
                    


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    #print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    print(oldvalues1)
                    #print(oldtimestamp)
                    print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    #print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    oldoldylabel = oldoldylabelarray[-1]
                    



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    #print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    #print(oldoldlabe)



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisddf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                    values1 = df.iloc[:,2].values
                    timestamp = df.iloc[:,1].values
                    title = df.columns[2]
                    print(values1)
                    #print(timestamp)
                    print(title)

                    ylabelarray = str(title).split()
                    ylabel = ylabelarray[-1]
                    if ylabelarray[-1] == 'Count':
                        ylabel = str(ylabelarray[-3]) + ' ' + str(ylabelarray[-2]) + ' ' + str(ylabelarray[-1])


                    else:
                        ylabel = ylabelarray[-1]


                    it = len(values1)
                    kt = 0
                    valu = []
                    while kt < it:
                        val = values1[kt]
                        valu.append(val)
                        kt += 1
                    print(valu)

                    z = len(timestamp)
                    y = 0
                    labe = []
                    while y < z:
                        lab = timestamp[y]
                        labe.append(lab)
                        y += 1
                    #print(labe)



                    dfold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                    oldvalues1 = dfold.iloc[:,2].values
                    oldtimestamp = dfold.iloc[:,1].values
                    oldtitle = dfold.columns[2]
                    print(oldvalues1)
                    #print(oldtimestamp)
                    print(oldtitle)

                    oldylabelarray = str(oldtitle).split()
                    if oldylabelarray[-1] == 'Count':
                        oldylabel = str(oldylabelarray[-3]) + ' ' + str(oldylabelarray[-2]) + ' ' + str(oldylabelarray[-1])


                    else:
                        oldylabel = oldylabelarray[-1]



                    oldit = len(oldvalues1)
                    oldkt = 0
                    oldvalu = []
                    while oldkt < oldit:
                        oldval = oldvalues1[oldkt]
                        oldvalu.append(oldval)
                        oldkt += 1
                    print(oldvalu)

                    oldz = len(oldtimestamp)
                    oldy = 0
                    oldlabe = []
                    while oldy < oldz:
                        oldlab = oldtimestamp[oldy]
                        oldlabe.append(oldlab)
                        oldy += 1
                    #print(oldlabe)



                    dfoldold = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")
                    oldoldvalues1 = dfoldold.iloc[:,2].values
                    oldoldtimestamp = dfoldold.iloc[:,1].values
                    oldoldtitle = dfoldold.columns[2]
                    print(oldoldvalues1)
                    #print(oldoldtimestamp)
                    print(oldoldtitle)

                    oldoldylabelarray = str(oldoldtitle).split()
                    if oldoldylabelarray[-1] == 'Count':
                        oldoldylabel = str(oldoldylabelarray[-3]) + ' ' + str(oldoldylabelarray[-2]) + ' ' + str(oldoldylabelarray[-1])


                    else:
                        oldoldylabel = oldoldylabelarray[-1]



                    oldoldit = len(oldoldvalues1)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues1[oldoldkt]
                        oldoldvalu.append(oldoldval)
                        oldoldkt += 1
                    print(oldoldvalu)

                    oldoldz = len(oldoldtimestamp)
                    oldoldy = 0
                    oldoldlabe = []
                    while oldoldy < oldoldz:
                        oldoldlab = oldoldtimestamp[oldoldy]
                        oldoldlabe.append(oldoldlab)
                        oldoldy += 1
                    #print(oldoldlabe)



                    dfpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                    dfpredvalues1 = dfpred.iloc[:,2].values

                    it = len(dfpredvalues1)
                    kt = 0
                    predvalu = []
                    while kt < it:
                        predval = dfpredvalues1[kt]
                        predvalu.append(predval)
                        kt += 1
                    #print(predvalu)


                    dfoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                    dfoldpredvalues1 = dfoldpred.iloc[:,2].values

                    it = len(dfoldpredvalues1)
                    kt = 0
                    oldpredvalu = []
                    while kt < it:
                        oldpredval = dfoldpredvalues1[kt]
                        oldpredvalu.append(oldpredval)
                        kt += 1
                    #print(oldpredvalu)


                    dfoldoldpred = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")
                    dfoldoldpredvalues1 = dfoldoldpred.iloc[:,2].values

                    it = len(dfoldoldpredvalues1)
                    kt = 0
                    oldoldpredvalu = []
                    while kt < it:
                        oldoldpredval = dfoldoldpredvalues1[kt]
                        oldoldpredvalu.append(oldoldpredval)
                        kt += 1
                    #print(oldoldpredvalu)

                    axisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                    value_max = axisdf.iloc[0,2]
                    value_min = axisdf.iloc[0,1]

                    oldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                    oldvalue_max = oldaxisdf.iloc[0,2]
                    oldvalue_min = oldaxisdf.iloc[0,1]

                    oldoldaxisdf = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")
                    oldoldvalue_max = oldoldaxisdf.iloc[0,2]
                    oldoldvalue_min = oldoldaxisdf.iloc[0,1]


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max


                    meter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                    oldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                    oldoldmeter_id = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")
                    meter_id = meter_id.iloc[0,1]
                    oldmeter_id = oldmeter_id.iloc[0,1]
                    oldoldmeter_id = oldoldmeter_id.iloc[0,1]

                    print('meter_id')
                    print('oldmeter_id')
                    print('oldoldmeter_id')

                    print(meter_id)
                    print(oldmeter_id)
                    print(oldoldmeter_id)

                    print('title')
                    print(title)
                    print(oldtitle)
                    print(oldoldtitle)

                    parameterems = str(compare1).split()
                    parameterems = parameterems[-1]

                    print(parameterems)


                    if compare1 == title:
                        print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        


                    elif compare1 == oldtitle:
                        print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold



                    elif compare1 == oldoldtitle:
                        print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    print(startdate)
                    print(enddate)

                    ylabel = ''


                    title2 = title
                    oldtitle2 = oldtitle
                    oldoldtitle2 = oldoldtitle

                    value_min2 =value_min
                    value_max2 =value_max
                    oldvalue_min2 =oldvalue_min
                    oldvalue_max2 =oldvalue_max
                    oldoldvalue_min2 =oldoldvalue_min
                    oldoldvalue_max2 =oldoldvalue_max


                    if compare1 == title:
                        print('1')
                        oldoldtitle = compare1

                        meter_id = meter_id
                        meter_id2 = meter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = predvalu
                        
                        oldoldvalus = valu
                        
                        #oldoldtitle = title
                        

                        oldoldvalue_min = value_min2
                        oldoldvalue_max = value_max2

                        oldoldylabel = ylabel

                        dfoldold2 = df

                        


                    elif compare1 == oldtitle:
                        print('2')
                        oldoldtitle = compare1

                        meter_id = oldmeter_id
                        meter_id2 = oldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems

                        oldoldoutliers = oldpredvalu
                        
                        oldoldvalus = oldvalu
                        
                        #oldoldtitle = oldtitle
                        

                        oldoldvalue_min = oldvalue_min2
                        oldoldvalue_max = oldvalue_max2
                        oldoldylabel = oldylabel

                        dfoldold2 = dfold



                    elif compare1 == oldoldtitle:
                        print('3')
                        oldoldtitle = compare1

                        meter_id = oldoldmeter_id
                        meter_id2 = oldoldmeter_id
                        
                        oldoldtitle3 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems


                        oldoldoutliers = oldoldpredvalu
                        
                        oldoldvalus = oldoldvalu
                        
                        #oldoldtitle = oldoldtitle
                        

                        oldoldvalue_min = oldoldvalue_min2
                        oldoldvalue_max = oldoldvalue_max2

                        oldoldylabel = oldoldylabel

                        dfoldold2 = dfoldold


                    line_labels = labe

                    residualstartdate = ''
                    residualenddate = ''

                    startdate = line_labels[0]
                    enddate = line_labels[-1]

                    startdate = str(startdate).replace('T',' ')
                    startdate = "'" + startdate + "'"
                    enddate = str(enddate).replace('T',' ')
                    enddate = "'" + enddate + "'"

                    print(startdate)
                    print(enddate)

                    ylabel = ''

                    print(oldoldvalus)

                    oldoldvalustemp = []
                    labetemp = []

                    oldoldoutlierstemp = []

                    a = 0

                    while a < len(oldoldvalus):

                        b = oldoldvalus[a]

                        if b == 'f':
                            c = np.nan
                            oldoldvalustemp.append(c)
                            a+=1
                        else:
                            oldoldvalustemp.append(int(b))
                            
                            a+=1

                    print(oldoldvalustemp)
                    print(labetemp)

                    
                    oldoldvalusog = oldoldvalus

                    oldoldvalus = oldoldvalustemp

                    dfoldold2 = dfoldold2.replace('f', np.nan)

                    print('dfs')
                    print(dfoldold2)


                    dfoldold2 = dfoldold2.fillna(method = "ffill")

                    dfoldold2 = dfoldold2.fillna(method = "bfill")

                    print('dfs')
                    print(dfoldold2)

                    oldoldvalues2 = dfoldold2.iloc[:,2].values


                    print(oldoldvalues2)


                    oldoldit = len(oldoldvalues2)
                    oldoldkt = 0
                    oldoldvalu = []
                    while oldoldkt < oldoldit:
                        oldoldval = oldoldvalues2[oldoldkt]
                        oldoldvalu.append(int(oldoldval))
                        oldoldkt += 1
                    oldoldvalus = oldoldvalu
                    print(oldoldvalu)





                    print('oldoldvalus')
                    print('labe')
                    print(oldoldvalus)
                    print(labe)

                    print(oldoldoutliers)
                    print(len(oldoldoutliers))
                    print(len(oldoldvalus))
                    print(len(labe))
    ###########################################EMS

                    



                    a = 0

                    b = []
                    labeltemp = []
                    oldvaluestemp = []

                    finalvalues5 = []

                    rpermenant = 0

                    rarray = []

                    title = ''

                    print(len(emsY))

                    print(oldoldvalus)


                    while a < len(emsY):

                        #print(a)

                        meter_id = int(emsY[a])
                        parameterems = '`consumption`'

                        table = '[' + 'EMStest' + str(meter_id) + ']'

                        #dfemsaug18oct18test = pd.concat([dfemsoct18, dfemsnov18])

                        #df2emsaug18oct18test = dfemsaug18oct18test.loc[:, ['timestamp','metadata_id', 'consumption', 'meter_reading']]

                       # df3emsaug18oct18test = df2emsaug18oct18test.sort_values(by=['timestamp']).set_index("timestamp")

                        #df4emsaug18oct18test = df3emsaug18oct18test[df3emsaug18oct18test['metadata_id'] == meter_id]

                        #df4emsaug18oct18test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                        #dfems5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                        conn = sqlite3.connect('EMSOUT.db')

                        #dfems5.to_sql('EMSclosest', conn, if_exists='replace', index=False)

                        c = conn.cursor()

                        query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        x = pd.DataFrame(timeaxis, columns=['timestamp'])
                        x['data'] = dataset2

                        x['timestamp'] = timeaxis2

                        xxx = x['timestamp']

                        x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                        #x2 = x.set_index('timestamp')

                        labels5 = xxx

                        values5 = x['data']

                        values5 = np.array(values5)

                        oldoldvalus2 = np.array(oldoldvalus)
                    ####################################################

                        if len(labels5) == 0:
                            print(table)
                            print('2')
                            

                        else:
                            
                            x = x.set_index('timestamp')
                            x.index = x.index.map(lambda j: j.replace(second=0))

                            print(x['data'])

                            x = x.resample('T').asfreq()

                            print(x)

                            testarr = np.array(x['data'])

                            print(testarr)

                            x2 = pd.Series(testarr)
                            y2 = pd.Series(oldoldvalus2)

                            print(x2)
                            print(y2)

                            
                            
                            r = x2.corr(y2)

                            #print(r)
                            #print(rpermenant)


                        if len(labels5) == 0:
                            print(table)

                        else:

                            if r > rpermenant:
                                parameterems = parameterems.replace("`","")




                                title2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems
                                finalparameter2 = parameterems
                                final_id2 = str(meter_id)
                                finalvalues6 = values5
                                print(title2)
                                print(values5)
                                finallabels6 = labels5

                                if title2 == oldoldtitle3:
                                    #print('11')
                                    rpermenant = rpermenant
                                    
                                else:
                                    #print('22')
                                    title = title2
                                    rpermenant = r

                                    finalparameter = finalparameter2
                                    final_id = final_id2
                                    finalvalues5 = finalvalues6
                                    finallabels5 = finallabels6
                                    
                                    ylabel = parameterems

                                    b = values5
                                    labeltemp = labels5
                                    finalvalues5 = values5
                                
                            else:
                                rpermenant = rpermenant

                            rarray.append(r)


                        #a +=70
                        #a +=20
                        a +=1


                    print(line_labels)
                    print(oldoldtitle)
                    print(oldoldoutliers)
                    print(oldoldvalus)

                    

                    print(title)
                    print(b)

                    print('finalvalues5 8')
                    print(finalvalues5)

                    print(rpermenant)

                    line_values = b

                    if len(values5) < len(oldoldvalus2):
                        line_labels = oldoldlabe
                    else:
                        line_labels = labels5




                    a = 0

                    while a < len(emsY):

                        #print(a)

                        meter_id = int(emsY[a])
                        parameterems = '`meter_reading`'
                        table = '[' + 'EMStest' + str(meter_id) + ']'

                        #dfemsaug18oct18test = pd.concat([dfemsoct18, dfemsnov18])

                        #df2emsaug18oct18test = dfemsaug18oct18test.loc[:, ['timestamp','metadata_id', 'consumption', 'meter_reading']]

                        #df3emsaug18oct18test = df2emsaug18oct18test.sort_values(by=['timestamp']).set_index("timestamp")

                        #df4emsaug18oct18test = df3emsaug18oct18test[df3emsaug18oct18test['metadata_id'] == meter_id]

                        #df4emsaug18oct18test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                        #dfems5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                        conn = sqlite3.connect('EMSOUT.db')

                        #dfems5.to_sql('EMSclosest', conn, if_exists='replace', index=False)

                        c = conn.cursor()

                        query = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        x = pd.DataFrame(timeaxis, columns=['timestamp'])
                        x['data'] = dataset2

                        x['timestamp'] = timeaxis2

                        xxx = x['timestamp']

                        x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                        #x2 = x.set_index('timestamp')

                        labels5 = xxx

                        values5 = x['data']

                        values5 = np.array(values5)

                        oldoldvalus2 = np.array(oldoldvalus)
                    ####################################################

                        if len(labels5) == 0:
                            #print(table)
                            table = table

                        else:

                            x = x.set_index('timestamp')
                            x.index = x.index.map(lambda j: j.replace(second=0))

                            print(x['data'])

                            x = x.resample('T').asfreq()

                            print(x)

                            testarr = np.array(x['data'])

                            print(testarr)

                            x2 = pd.Series(testarr)
                            y2 = pd.Series(oldoldvalus2)

                            print(x2)
                            print(y2)

                            
                            
                            r = x2.corr(y2)

                            #print(r)
                            #print(rpermenant)

                        if len(labels5) == 0:
                            print(table)

                        else:

                            if r > rpermenant:
                                parameterems = parameterems.replace("`","")

                                
                                title2 = 'Meter ID: ' + str(meter_id) + ' ' + parameterems
                                finalparameter2 = parameterems
                                final_id2 = str(meter_id)
                                finalvalues6 = values5
                                print(title2)
                                print(values5)
                                finallabels6 = labels5

                                if title2 == oldoldtitle3:
                                    #print('11')
                                    rpermenant = rpermenant
                                    
                                else:
                                    #print('22')
                                    title = title2
                                    rpermenant = r

                                    finalparameter = finalparameter2
                                    final_id = final_id2
                                    finalvalues5 = finalvalues6
                                    finallabels5 = finallabels6
                                    
                                    ylabel = parameterems
                                    b = values5
                                    labeltemp = labels5
                                    finalvalues5 = values5
                                
                            else:
                                rpermenant = rpermenant

                            rarray.append(r)


                        #a +=70
                        #a +=20
                        a +=1



                    print(line_labels)
                    print(oldoldtitle)
                    print(oldoldoutliers)
                    print(oldoldvalus)

                    

                    print(title)
                    print(b)

                    print('finalvalues5 7')
                    print(finalvalues5)

                    print(rpermenant)

                    line_values = b

                    if len(values5) < len(oldoldvalus2):
                        line_labels = oldoldlabe
                    else:
                        line_labels = labels5











                    


    ###########################################Synetica

                    


                    a = 0


                        


                    print(len(synY2))

                    while a < len(synY2):

                        #print(a)

                        meter_id = synY2[a]
                        parametersyn = '`reading`'
                        table = '[' + 'Syntest' + str(meter_id) + ']'

                        #df3synaug18oct18test = df2synaug18oct18test.sort_values(by=['timestamp']).set_index("timestamp")

                        #df4synaug18oct18test = df3synaug18oct18test[df3synaug18oct18test['name'] == meter_id]

                        #df4synaug18oct18test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                        #dfsyn5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                        conn = sqlite3.connect('SynOUT.db')

                        #dfsyn5.to_sql('Synclosest', conn, if_exists='replace', index=False)

                        c = conn.cursor()

                        query = "SELECT " + parametersyn + " FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        query2 = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + startdate + " AND" + enddate

                        c.execute(query)

                        dataset = c.fetchall()


                        dataset2 = np.array(dataset)


                        c.execute(query2)

                        timeaxis = c.fetchall()
                        timeaxis2 = np.array(timeaxis)

                        x = pd.DataFrame(timeaxis, columns=['timestamp'])
                        x['data'] = dataset2

                        x['timestamp'] = timeaxis2

                        xxx = x['timestamp']

                        x['timestamp'] = pd.to_datetime(x['timestamp'], format = '%Y-%m-%d')

                        #x2 = x.set_index('timestamp')

                        labels5 = xxx

                        values5 = x['data']

                        values5 = np.array(values5)

                        oldoldvalus2 = np.array(oldoldvalus)


                        ####################################################

                        if len(labels5) == 0:
                            #print(table)
                            table=table


                        else:

                            x = x.set_index('timestamp')
                            x.index = x.index.map(lambda j: j.replace(second=0))

                            print(x['data'])

                            x = x.resample('T').asfreq()

                            print(x)

                            testarr = np.array(x['data'])

                            print(testarr)

                            x2 = pd.Series(testarr)
                            y2 = pd.Series(oldoldvalus2)

                            print(x2)
                            print(y2)

                            
                            
                            r = x2.corr(y2)

                            #print(r)
                            #print(rpermenant)

                            print(finalvalues5)

                        if len(labels5) == 0:
                            print(table)

                        else:

                        


                            if r > rpermenant:
                                parametersyn = parametersyn.replace("`","")
                                title2 = 'Meter ID: ' + str(meter_id) + ' ' + parametersyn
                                finalparameter2 = parametersyn
                                final_id2 = str(meter_id)
                                finalvalues6 = values5
                                print(title2)
                                print(values5)
                                finallabels6 = labels5

                                if title2 == oldoldtitle3:
                                    #print('11')
                                    rpermenant = rpermenant
                                else:
                                    #print('22')
                                    title = title2
                                    rpermenant = r

                                    finalparameter = finalparameter2
                                    final_id = final_id2
                                    finalvalues5 = finalvalues6
                                    finallabels5 = finallabels6
                                    
                                    ylabel = parametersyn
 
                                    b = values5
                                    labeltemp = labels5
                                    oldvaluestemp = oldoldvalus
                                
                            else:
                                rpermenant = rpermenant


                            rarray.append(r)
                        #a +=20
                        a +=1

                    


                    print(line_labels)
                    print(oldoldtitle)
                    print(oldoldoutliers)
                    print(oldoldvalus)

                    

                    print(title)
                    print(b)
                    print('finalvalues5')
                    print(finalvalues5)

                    print(rpermenant)

                    if len(values5) < len(oldoldvalus2):
                        line_labels = oldoldlabe
                    else:
                        line_labels = labels5









    ###########################################wifi

                    print('finalvalues5 2')
                    print(finalvalues5)


                    

                    a = 0
                    AA = 0

                    

                    #print(df2aug18feb19test)


                        


                    print(len(wifiY7))

                    while a < len(wifiY7):

                        if wifiY7[a] == 'f':
                            a+=1
                        else:

                            #print(a)

                            #Building_name = wifiY6[a]
                            #Floor_name = wifiY6[a][AA]
                            Building_name = wifiY6[a][0]
                            Floor_name = wifiY6[a][1]

                            Building_name = str(Building_name).strip()
                            Floor_name = str(Floor_name).strip()
                            table = '[' + 'wifitest' + str(wifiY7[a]) + ']'

                            Building_name = str(Building_name).title()
                            Floor_name = str(Floor_name).title()

                            
                            parameterwifi = '`Associated Client Count`'

                                

                            #dfaug18feb19test = pd.concat([dfoct18])


                            #df2aug18feb19test = dfaug18feb19test.loc[:, ['Building','Floor', 'time','Associated Client Count', 'Authenticated Client Count']]

                            #df3aug18feb19test = df2aug18feb19test.sort_values(by=['Building', 'Floor'])

                            #df4aug18feb19test = df3aug18feb19test.set_index("time")

                            #df5aug18feb19test = df4aug18feb19test[df4aug18feb19test['Building'].str.contains(Building_name)]

                            #df6aug18feb19test = df5aug18feb19test[df5aug18feb19test['Floor'].str.contains(Floor_name)]

                            #df6aug18feb19test.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")



                            #dfsyn5 = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Closest.csv")


                            conn = sqlite3.connect('/Users/Luke/ENGR301/For Cloud and GitHub/test2.db')

                            #dfsyn5.to_sql('wificlosest', conn, if_exists='replace', index=False)

                            c = conn.cursor()

                            query = "SELECT " + parameterwifi + " FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                            query2 = "SELECT `time` FROM " + table + " WHERE time BETWEEN" + startdate + " AND" + enddate

                            c.execute(query)

                            dataset = c.fetchall()


                            dataset2 = np.array(dataset)


                            c.execute(query2)

                            timeaxis = c.fetchall()
                            timeaxis2 = np.array(timeaxis)

                            x = pd.DataFrame(timeaxis, columns=['time'])
                            x['data'] = dataset2

                            x['time'] = timeaxis2

                            xxx = x['time']

                            x['time'] = pd.to_datetime(x['time'], format = '%Y-%m-%d')

                            #x2 = x.set_index('timestamp')

                            labels5 = xxx

                            values5 = x['data']

                            values5 = np.array(values5)

                            #print(values5[0:5])
                            

                            oldoldvalus2 = np.array(oldoldvalus)

                            #print(len(values5))
                            #print(len(oldoldvalus2))

                            if len(labels5) == 0:
                                #print(table)
                                table=table

                            else:

                                print(x['time'])
                                x = x.set_index('time')
                                x.index = x.index.map(lambda j: j.replace(second=0))

                                print(x[x.index.duplicated()])
                                x = x[~x.index.duplicated()]

                                print(x[x.index.duplicated()])

                                print(x['data'])

                                x = x.resample('T').asfreq()

                                print(x)

                                testarr = np.array(x['data'])

                                print(testarr)

                                x2 = pd.Series(testarr)
                                y2 = pd.Series(oldoldvalus2)

                                print(x2)
                                print(y2)

                                
                                
                                r = x2.corr(y2)

                                #print(r)
                                #print(rpermenant)


                            if len(labels5) == 0:
                                print(table)

                            else:


                                if r > rpermenant:
                                    parameterwifi = parameterwifi.replace("`","")
                                    Building_name = Building_name.replace("'","")
                                    Floor_name = Floor_name.replace("'","")
                                    
                                    title2 = Building_name.title() + ': ' + Floor_name.title() + ' ' + parameterwifi
                                    #print(title2)
                                    #print(oldoldtitle)
                                    

                                    finalparameter2 = '`' + parameterwifi + '`'
                                    final_id2 = Building_name.upper() + Floor_name.upper()
                                    final_meter_id3 = Building_name.upper() + ' ' + Floor_name.upper()
                                    finalvalues6 = values5
                                    print(title2)
                                    print(values5)
                                    finallabels6 = labels5

                                    if str(title2).title() == str(oldoldtitle).title():
                                        #print('11')
                                        rpermenant = rpermenant
                                    else:
                                        #print('22')
                                        title = title2
                                        title = Building_name + ': ' + Floor_name + ' ' + parameterwifi
                                        
                                        rpermenant = r

                                        finalparameter = finalparameter2
                                        final_id = final_id2

                                        final_meter_id4 = final_meter_id3
                                        finalvalues5 = finalvalues6
                                       
                                        finallabels5 = finallabels6
                                        
                                        ylabel = parameterwifi
 
                                        b = values5
                                        labeltemp = labels5
                                        oldvaluestemp = oldoldvalus
                                    
                                else:
                                    rpermenant = rpermenant


                                rarray.append(r)
                            #a +=10
                            a +=1


                    print('finalvalues5 1')
                    print(finalvalues5)

                    
                    line_labels = labeltemp
                    line_values = b

                    residualstartdate = startdate
                    residualenddate = enddate

                    value_min = min(line_values)
                    value_max = max(line_values)

                    outliers = ['f']
                    

                    if len(line_values) > len(oldoldvalus):
                        
                        oldoldvalus = oldvaluestemp
                        newoldoutliers = []

                        ab = 0
                        bc = 0
                        xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                        xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                        while ab < len(line_labels):
                            
                            #print(ab)
                            

                            lab = str(line_labels[ab])
                            lab = lab.replace('-', ' ')
                            lab = lab.replace(':', ' ')
                            lab = lab.split()

                            lab0 = int(lab[0])
                            lab1 = int(lab[1])
                            lab2 = int(lab[2])
                            lab3 = int(lab[3])
                            lab4 = int(lab[4])
                            lab5 = int(lab[5])

                        
                            if bc == len(oldoldlabe):
                                print(bc)
                            else:
                                newoldlab = str(oldoldlabe[bc])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                                


                            x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                            y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                            diff = x - y

                            #print(diff)

                            if diff < xy:
                                if diff > xz: 
                                    #print('yes')
                                    #print(diff)

                                    if bc == len(oldoldoutliers):
                                        #print(bc)
                                        
                                        newoldoutliers.append('f')
                                    else:
                                        
                                        newoldoutliers.append(oldoldoutliers[bc])
                                        
                                        
                                        bc+=1
                                else:
                                    
                                    #print('no')
                                    newoldoutliers.append('f')
                            else:
                                
                                #print('no')
                                newoldoutliers.append('f')

                                    

                            ab+=1
                        oldoldoutliers = newoldoutliers



                    emstables = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/EMStables.csv")
                    emstables = emstables['tables']
                    emstables = np.array(emstables)

                    syntables = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Syntables.csv")
                    syntables = syntables['tables']
                    syntables = np.array(syntables)

                    wifitables = pd.read_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Wifitables.csv")
                    wifitables = wifitables['tables']
                    wifitables = np.array(wifitables)

                    #print('emstables')
                    #print(emstables)
                    #print('syntables')
                    #print(syntables)
                    #print('wifitables')
                    #print(wifitables)

                    print(final_id)
                    print(finalparameter)

                    print('finalvalues5')
                    print(finalvalues5)
                    print(finallabels5)

                    a = 0
                    dtype = ''
                                          

                    while a < len(emstables):
                        check = 'EMStest' + str(final_id)
                        check2 = str(emstables[a])

                        #print(check)
                        #print(check2)

                        if check == check2:
                            dtype = 'EMS'
                            a = len(emstables) +1
                        else:
                            a+=1

                    a = 0
                                          
                    while a < len(syntables):
                        check = 'Syntest' + str(final_id)
                        check2 = str(syntables[a])

                       # print(check)
                        #print(check2)

                        if check == check2:
                            dtype = 'Syn'
                            a = len(syntables) +1
                        else:
                            a+=1

                    a = 0
                                          
                    while a < len(wifitables):
                        check = 'wifitest' + str(final_id)
                        check2 = str(wifitables[a]).replace('|', '')

                        #print(check)
                        #print(check2)

                        if check == check2:
                            dtype = 'Wifi'
                            a = len(wifitables) +1
                        else:
                            a+=1

                            
                    print(dtype)


                    if dtype == 'EMS':
                        print('EMS')
                        table = 'EMStest' + str(final_id)
                        parameterems = '`' + finalparameter + '`'


                        final_meter_id = str(final_id)

                        print(final_meter_id)
                        print(startdate)
                        print(enddate)
                        print(finalvalues5)

                        parameterems = parameterems

                        table = '[' + table + ']'

                        print(table)
                        print('xxx')



                        labels5 = finallabels5


                        values5 = np.array(finalvalues5)



                        a = 0
                        X5 = 0
                        X6 = []
                        XYear = []
                        XMonth= []
                        XDay= []
                        XHour= []
                        XMin= []
                        Xsec= []

                        while a < len(labels5):
                            X5 = labels5[a]
                            X5 = X5.replace('[', '')
                            X5 = X5.replace(']', '')
                            X5 = X5.replace("'", "")
                            X5 = X5.replace(":", " ")
                            X5 = X5.replace("-", " ")
                            X5 = X5.replace("/", " ")
                            X5=X5.split()
                            X55 = X5[-3:-1]
                            X6.append(X55)
                            a+=1


                        X7 = np.array(X6)



                        #################################### Smart model datetime


                        #print(startdate)
                        #print(enddate)

                        startdate = startdate.replace('-',' ')
                        startdate = startdate.replace(':',' ')
                        startdate = startdate.replace("'"," ")

                        enddate = enddate.replace('-',' ')
                        enddate = enddate.replace(':',' ')
                        enddate = enddate.replace("'"," ")


                        #print(startdate)
                        #print(enddate)

                        startdate = startdate.split()
                        enddate = enddate.split()

                        #print(startdate)
                        #print(enddate)

                        startyear = int(startdate[0])
                        startmonth = int(startdate[1])
                        startday = int(startdate[2])

                        endyear = int(enddate[0])
                        endmonth = int(enddate[1])
                        endday = int(enddate[2])

                        startdate = datetime.datetime(startyear, startmonth, startday)
                        enddate = datetime.datetime(endyear, endmonth, endday)
                        z = enddate-startdate

                        #print(z)

                        modelstart = startdate - (4*z)

                        modelend = startdate

                        print(modelstart)
                        print(modelend)

                        weekday00 = []
                        weekday0 = []
                        weekday1 = []
                        weekday2 = []
                        weekday3 = []
                        weekday4 = []
                        weekday5 = []
                        weekday6 = []

                        weekday = []
                        weekend = []

                        weekdaynumber = []
                        weekendnumber = []

                        weekdaydatetime = []
                        weekenddatetime = []

                        modelstart2 = modelstart
                        modelstart3 = modelstart
                        modelend3 = modelend
                        


                        while modelstart2 != modelend + datetime.timedelta(days=1):
                            AA = modelstart2

                            AAday = AA.weekday()

                            #print(AA)
                            #print(AAday)

                            if AAday < 5:
                                weekday.append(str(AA))
                                weekdaynumber.append(AAday)
                                weekdaydatetime.append(AA)
                            else:
                                weekend.append(str(AA))
                                weekendnumber.append(AAday)
                                weekenddatetime.append(AA)
                                

                            modelstart2 = modelstart2 + datetime.timedelta(days=1)



                        print(weekday)

                        print(weekend)

                        print(weekdaynumber)

                        print(weekendnumber)

                        print(weekdaydatetime)

                        print(weekenddatetime)

                        

                        modelstart = str(modelstart)
                        modelstart = "'" + modelstart + "'"

                        modelend = str(modelend)
                        modelend = "'" + modelend + "'"

                        #print(modelstart)

                        #print(modelend)


                        a = 0
                        aa = 0

                        modelweekdaystart = []
                        modelweekdayend = []
                        modelweekendstart = []
                        modelweekendend = []

                        modelweekday = []
                        modelweekend = []

                        modelweekday2 = []
                        modelweekend2 = []

                        while modelstart3 != modelend3 + datetime.timedelta(days=1):

                            if len(weekday) == 0:
                                weekday = weekday
                                b = ''
                                d = -1
                                f = datetime.datetime.now()
                            else:

                                if len(weekday) > a:
                                    b = weekday[a]
                                    d = weekdaynumber[a]
                                    f = weekdaydatetime[a]
                                    
                                else:
                                    b = weekday[0]
                                    d = weekdaynumber[0]
                                    f = datetime.datetime.now()

                            if len(weekend) == 0:
                                cc = ''
                                e = -1
                                g = datetime.datetime.now()
                                
                            else:
                                
                                if len(weekend) > aa:
                                    cc = weekend[aa]
                                    e = weekendnumber[aa]
                                    g = weekenddatetime[aa]
                                    
                                else:
                                    cc = weekend[0]
                                    e = weekendnumber[0]
                                    g = datetime.datetime.now()
                                


                            if f > g:
                                #print(g)

                                modelweekend.append(cc)

                                if e == 6:
                                    


                                    #print(modelweekend)

                                    g = g + datetime.timedelta(days=1)

                                    modelweekend.append(str(g))

                                    modelweekend2.append(modelweekend)

                                    

                                    modelweekend = []

                                
                                    

                                
                                aa+=1


                            else:
                                #print(f)

                                modelweekday.append(b)

                                if d == 4:
                                    #print(modelweekday)

                                    f = f + datetime.timedelta(days=1)

                                    modelweekday.append(str(f))

                                    
                                    

                                    modelweekday2.append(modelweekday)

                                    modelweekday = []

                                
                                a+=1


                            
                            modelstart3 = modelstart3 + datetime.timedelta(days=1)


                        if len(modelweekday) > 0:
                            
                            f = f + datetime.timedelta(days=1)

                            modelweekday.append(str(f))

                            modelweekday2.append(modelweekday)

                        if len(modelweekend) > 0:
                            
                            g = g + datetime.timedelta(days=1)

                            modelweekend.append(str(g))

                            modelweekend2.append(modelweekend)
                            

                        #print(modelweekday)
                        #print(modelweekend)

                        #print(modelweekday2)
                        print('xxxxxxxxxxxx')
                        print(modelweekday2)
                        #print(modelweekend2)
                        print(modelweekend2)



                        loopdataweekday = []

                        looptimeaxisweekday = []

                        loopdataweekend = []

                        looptimeaxisweekend = []



                        a = 0

                        #print(modelweekday2[3])

                        while a < len(modelweekday2):
                            start = modelweekday2[a][0]
                            end = modelweekday2[a][-1]

                            

                            start = str(start)
                            end = str(end)

                            start = "'" + start + "'"
                            end = "'" + end + "'"

                            #print(start)
                            #print(end)

                            #print(table)

                            conn = sqlite3.connect('EMSOUT.db')

                            c = conn.cursor()

                            
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))



                            

                        

                            

                            if len(dataset4loop) == 0:
                                print('0')

                            else:
                                if len(timeaxis3loop) == 0:
                                    print('0')

                                else:

                                    loopdataweekday.append(dataset4loop)
                                    looptimeaxisweekday.append(timeaxis3loop)



                            a +=1

                        print(loopdataweekday)
                        print(looptimeaxisweekday)

                        a = 0
                        

                        while a < len(modelweekend2):
                            start = modelweekend2[a][0]
                            end = modelweekend2[a][-1]

                            

                            start = str(start)
                            end = str(end)

                            start = "'" + start + "'"
                            end = "'" + end + "'"

                            #print(start)
                            #print(end)

                            #print(table)

                            conn = sqlite3.connect('EMSOUT.db')

                            c = conn.cursor()

                            
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))



                            if len(dataset4loop) == 0:
                                print('0')

                            else:
                                if len(timeaxis3loop) == 0:
                                    print('0')

                                else:

                                    loopdataweekend.append(dataset4loop)
                                    looptimeaxisweekend.append(timeaxis3loop)


                            a +=1


                        print(loopdataweekend)
                        print(looptimeaxisweekend)



                        


        ##########weekday data
                        a = 0

                        if len(loopdataweekday) == 0:
                            print('')
                            dataset444 = []
                        else:

                            dataset444 = loopdataweekday[0]

                        while a < len(loopdataweekday):

                            dataset111 = loopdataweekday[a]

                            #print(len(dataset111))

                            #print(dataset111[0])
                            #print(dataset444[0])

                            if np.all(dataset111 == dataset444):
                                print(np.all(dataset111 == dataset444))
                                dataset555 = dataset444

                            else:

                                dataset555 = np.concatenate([dataset555, dataset111])
                                dataset444 = np.concatenate([dataset444, dataset111])

                                #print(len(dataset444))
                                #print(len(dataset555))


                            a+=1


                        #print(dataset444)
                        #print(loopdataweekend[0])


    ################weekend data
                        a = 0

                        if len(loopdataweekend) == 0:
                            print('')
                            dataset4444 = []
                        else:

                            dataset4444 = loopdataweekend[0]

                        while a < len(loopdataweekend):

                            dataset1111 = loopdataweekend[a]

                            #print(len(dataset1111))

                            #print(dataset1111[0])
                            #print(dataset4444[0])

                            if np.all(dataset1111 == dataset4444):
                                #print(np.all(dataset1111 == dataset4444))
                                dataset5555 = dataset4444

                            else:

                                dataset5555 = np.concatenate([dataset5555, dataset1111])
                                dataset4444 = np.concatenate([dataset4444, dataset1111])

                                #print(len(dataset4444))
                                #print(len(dataset5555))


                            a+=1


                        #print(dataset4444)
                        #print(len(looptimeaxisweekday))
                        #print(looptimeaxisweekday[3])



                                ##########weekday timeaxis
                        a = 0

                        if len(looptimeaxisweekday) == 0:
                            print('')
                            timeaxis444 = []
                        else:

                            timeaxis444 = looptimeaxisweekday[0]

                        while a < len(looptimeaxisweekday):

                            timeaxis111 = looptimeaxisweekday[a]

                            #print(len(timeaxis111))

                            #print(timeaxis111[0])
                            #print(timeaxis444[0])
                            #print(a)

                            if timeaxis111[0] == timeaxis444[0]:
                                timeaxis555 = timeaxis444

                            else:

                                timeaxis555 = timeaxis555 + timeaxis111
                                timeaxis444 = timeaxis444 + timeaxis111
                                

                                #print(len(timeaxis444))
                                #print(len(timeaxis555))


                            a+=1


                        #print(timeaxis444)
                        #print(looptimeaxisweekend[0][0])


    ################weekend timeaxis
                        a = 0

                        if len(looptimeaxisweekend) == 0:
                            print('')
                            timeaxis4444 = []
                        else:

                            timeaxis4444 = looptimeaxisweekend[0]

                        while a < len(looptimeaxisweekend):

                            timeaxis1111 = looptimeaxisweekend[a]

                            #print(len(timeaxis1111))

                            #print(timeaxis1111[0])
                            #print(timeaxis4444[0])

                            if timeaxis1111[0] == timeaxis4444[0]:
                                timeaxis5555 = timeaxis4444

                            else:

                                #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                                timeaxis5555 = timeaxis5555 + timeaxis1111
                                timeaxis4444 = timeaxis4444 + timeaxis1111

                                #print(len(timeaxis4444))
                                #print(len(timeaxis5555))


                            a+=1


                        #print(timeaxis4444)

                        #print(len(timeaxis444))
                        #print(len(dataset444))

                        #print(len(timeaxis4444))
                        #print(len(dataset4444))



                        x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                        x10fweekday['data'] = dataset444

                        labelsweekday = x10fweekday['timestamp']

                        valuesweekday = x10fweekday['data']

                        valuesweekday = np.array(valuesweekday)

                        #print(labelsweekday)
                        #print(valuesweekday)



                        

                        x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                        x10fweekend['data'] = dataset4444

                        labelsweekend = x10fweekend['timestamp']

                        valuesweekend = x10fweekend['data']

                        valuesweekend = np.array(valuesweekend)

                        #print(labelsweekend)
                        #print(valuesweekend)

                        weekendlabeldateday = []
                        weekdaylabeldateday = []



                        if len(labelsweekday) == 0:
                            print('')

                        else:
                            

                            a = 0
                            
                            X22 = 0
                            X33 = []
                            X777 = []
                            X778 = []
                            X779 = []
                            X77 = []


                            while a < len(labelsweekday):
                                X22 = labelsweekday[a]
                                X22 = X22.replace('[', '')
                                X22 = X22.replace(']', '')
                                X22 = X22.replace("'", "")
                                X22 = X22.replace(":", " ")
                                X22 = X22.replace("-", " ")
                                X22 = X22.replace("/", " ")
                                X22=X22.split()
                                X225 = X22[-3:-1]

                                X771 = X22[0]
                                X772 = X22[1]
                                X773 = X22[2]
                                
                                X777.append(X771)
                                X778.append(X772)
                                X779.append(X773)
                                
                                X33.append(X225)

                                weekdayyear = int(X22[0])
                                weekdaymonth = int(X22[1])
                                weekdayday = int(X22[2])

                                weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                                weekdaylabeldateday.append(weekdaylabeldate.weekday())
                                
                                a+=1

                            X44 = np.array(X33)



                        if len(valuesweekend) == 0:
                            print('')

                        else:



                            a = 0
                            
                            XX22 = 0
                            XX33 = []
                            XX777 = []
                            XX778 = []
                            XX779 = []
                            XX77 = []


                            while a < len(labelsweekend):
                                XX22 = labelsweekend[a]
                                XX22 = XX22.replace('[', '')
                                XX22 = XX22.replace(']', '')
                                XX22 = XX22.replace("'", "")
                                XX22 = XX22.replace(":", " ")
                                XX22 = XX22.replace("-", " ")
                                XX22 = XX22.replace("/", " ")
                                XX22=XX22.split()
                                XX225 = XX22[-3:-1]

                                XX771 = XX22[0]
                                XX772 = XX22[1]
                                XX773 = XX22[2]
                                
                                XX777.append(XX771)
                                XX778.append(XX772)
                                XX779.append(XX773)
                                
                                XX33.append(XX225)

                                weekendyear = int(XX22[0])
                                weekendmonth = int(XX22[1])
                                weekendday = int(XX22[2])

                                weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                                weekendlabeldateday.append(weekendlabeldate.weekday())

                                
                                a+=1

                            XX44 = np.array(XX33)


                        #print(X44)
                        #print(XX44)


                        #print(len(weekdaylabeldateday))
                        #print(weekdaylabeldateday)

                        #print(len(valuesweekday))
                        #print(valuesweekday)


                        a = 3

                        weekdayvaluesavg = []
                        weekdaylabelsavg = []
                        weekdaypredavg = []

                        while a < len(weekdaylabeldateday):
                            a1 = int(valuesweekday[a])
                            a2 = int(valuesweekday[a-1])
                            a3 = int(valuesweekday[a-2])
                            a4 = int(valuesweekday[a-3])

                            #print(a4)

                            

                            aavg = (a1 + a2 + a3 + a4)/4

                            #print(aavg)

                            if weekdaylabeldateday[a] == 5:

                                weekdayvaluesavg.append(aavg)

                                weekdaylabelsavg.append(labelsweekday[a])

                                weekdaypredavg.append(X33[a])

                                a = a + 4

                            else:

                                weekdayvaluesavg.append(aavg)

                                weekdaylabelsavg.append(labelsweekday[a])

                                weekdaypredavg.append(X33[a])

                                a +=1



                        #print(len(weekdaylabeldateday))
                        #print(len(weekdayvaluesavg))
                        #print(len(weekdaylabelsavg))



                        #print(len(weekendlabeldateday))
                        #print(weekendlabeldateday)

                        #print(len(valuesweekend))
                        #print(valuesweekend)

                            

                        a = 3

                        weekendvaluesavg = []
                        weekendlabelsavg = []
                        weekendpredavg = []

                        while a < len(weekendlabeldateday):
                            a1 = int(valuesweekend[a])
                            a2 = int(valuesweekend[a-1])
                            a3 = int(valuesweekend[a-2])
                            a4 = int(valuesweekend[a-3])

                            #print(a4)

                            

                            aavg = (a1 + a2 + a3 + a4)/4

                            #print(aavg)

                            if weekendlabeldateday[a] == 0:

                                weekendvaluesavg.append(aavg)

                                weekendlabelsavg.append(labelsweekend[a])

                                weekendpredavg.append(XX33[a])

                                a = a + 4

                            else:

                                weekendvaluesavg.append(aavg)

                                weekendlabelsavg.append(labelsweekend[a])

                                weekendpredavg.append(XX33[a])

                                a +=1



                        weekdaypredavg = np.array(weekdaypredavg)
                        weekendpredavg = np.array(weekendpredavg)

                        #print(len(weekendlabeldateday))
                        #print(len(weekendvaluesavg))
                        #print(len(weekendlabelsavg))

                        #print(weekendlabeldateday)
                        #print(weekendvaluesavg)
                        #print(weekendlabelsavg)


                        #print(X44)
                        #print(XX44)

                        #print(len(weekdaypredavg))
                        #print(len(weekendpredavg))
                        ###################################################################






                        regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                        if len(valuesweekday) == 0:
                            print('')
                            predvaluweekday = []
                        elif len(labels5) == 0:
                            print('')
                            predvaluweekday = []

                        else:

                            regr.fit(X44, valuesweekday)
                            #regr.fit(weekdaypredavg, weekdayvaluesavg)
                            predictedweekday = regr.predict(X7)


                            #print(predictedweekday)

                            #print(mean_squared_error(values5, predictedweekday))
                            #print(r2_score(values5, predictedweekday))
                           
                            i = len(predictedweekday)
                            k = 0
                            predvaluweekday = []
                            while k < i:
                                predvalweekday = predictedweekday[k]
                                predvaluweekday.append(predvalweekday)
                                k += 1
                            #print(predvaluweekday)

                            #print(len(predvaluweekday))




                        regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                        if len(valuesweekend) == 0:
                            print('')
                            predvaluweekend = []
                        elif len(labels5) == 0:
                            print('')
                            predvaluweekend = []

                        else:

                            regrf.fit(XX44, valuesweekend)
                            #regrf.fit(weekendpredavg, weekendvaluesavg)
                            predictedweekend = regrf.predict(X7)


                            #print(predictedweekend)

                            #print(mean_squared_error(values5, predicted))
                            #print(r2_score(values5, predicted))
                           
                            i = len(predictedweekend)
                            k = 0
                            predvaluweekend = []
                            while k < i:
                                predvalweekend = predictedweekend[k]
                                predvaluweekend.append(predvalweekend)
                                k += 1
                            #print(predvaluweekend)

                            #print(len(predvaluweekend))

                            print(predvaluweekday)
                            print(predvaluweekend)


                        values = values5
                        labels = labels5
                            
                        


                        

                        
                        
                        

                        ####################################


                        i = len(values)
                        k = 0
                        valu = []
                        while k < i:
                            val = values[k]
                            valu.append(val)
                            k += 1
                        #print(valu)

                        z = len(labels)
                        y = 0
                        labe = []
                        while y < z:
                            lab = labels[y]
                            labe.append(lab)
                            y += 1
                        #print(labe)

                        a = 0
                        X2 = 0
                   

                        X227 = []
                        X228 = []
                        X229 = []
                        X22 = []
                        X2727 = []

                        while a < len(labels):
                            X2 = str(labels[a])
                            X2 = X2.replace('[', '')
                            X2 = X2.replace(']', '')
                            X2 = X2.replace("'", "")
                            X2 = X2.replace(":", " ")
                            X2 = X2.replace("-", " ")
                            X2 = X2.replace("/", " ")
                            X2=X2.split()
                            X25 = X2[-3:-1]

                            X221 = X2[0]
                            X222 = X2[1]
                            X223 = X2[2]
                            
                            X227.append(X221)
                            X228.append(X222)
                            X229.append(X223)
                            a+=1


                        #print(X227[0])
                        #print(X228[0])
                        #print(X229[0])



                        a = 0

                        while a < len(X227):
                            

                            X2227 = int(X227[a])
                            X2228 = int(X228[a])
                            X2229 = int(X229[a])
                            
                            X22222 = datetime.date(X2227, X2228, X2229)

                            X22222 = X22222.weekday()

                            X2727.append(X22222)

                            a+=1
                            
                        #print(X77)
                        #print(X2727)


                        a=0

                        weekendvalu = []
                        weekdayvalu = []

                        while a < len(valu):
                            if X2727[a] == 5:
                                weekendvalu.append(valu[a])

                            elif X2727[a] == 6:
                                weekendvalu.append(valu[a])

                            else:
                                weekdayvalu.append(valu[a])
                            a+=1
                            

                        weekdaystddev = np.std(weekdayvalu)
                        weekendstddev = np.std(weekendvalu)

                        print(weekdayvalu)
                        print(weekendvalu)
                        print(weekdaystddev)
                        print(weekendstddev)
                        

                        if len(valuesweekday) == 0:
                            print('hi')


                            avgg = np.mean(valu)
                            medavgg = np.median(valu)
                            stddev = np.std(valu)
                            #print(avgg)
                            #print(medavgg)
                            #print(stddev)

                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                            z = avgg + (3*stddev)
                            zz = avgg - (3*stddev)

                            while v < len(valu):
                                if valu[v] > z:
                                    #print('bigger')
                                    outliers.append(valu[v])
                                    if v == 0:
                                        print('')
                                    else:
                                        outliers[v-1] = valu[v-1]
                                    
                                
                                    valus.append('f')

                                elif valu[v] < zz:
                                    #print('smaller')
                                    outliers.append(valu[v])
                                    if v == 0:
                                        print('')
                                    else:
                                        outliers[v-1] = valu[v-1]
                                    
                                
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                    
                                    if v == 0:
                                        print('')
                                    else:
                                        valus[v-1] = valu[v-1]

                                        
                                    
                                v += 1

                        elif len(predvaluweekend) == 0:

                            stddev = np.std(valu)
                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                                
                            while v < len(valu):
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                v +=1

                        else:
                            
                            
                                
                            stddev = np.std(valu)
                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                                

                            while v < len(valu):
                                if X2727[v] == 6:

                                    if valu[v] > (predvaluweekend[v] + weekendstddev):
                                        #print('bigger weekend')
                                        #print((predvaluweekend[v] + stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                        #print('smaller weekend')
                                        #print((predvaluweekend[v] - stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not weekend')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1

                                elif X2727[v] == 5:

                                    if valu[v] > (predvaluweekend[v] + weekendstddev):
                                        #print('bigger weekend')
                                        #print((predvaluweekend[v] + stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                        #print('smaller weekend')
                                        #print((predvaluweekend[v] - stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not weekend')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1


                                else:
                                    if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                        #print('bigger')
                                        #print((predvalweekdayu[v] + stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                        #print('smaller')
                                        #print((predvalweekdayu[v] - stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1









                        
                            



                        if len(values5) < len(oldoldvalus2):


                                
                            ab = 0
                            bc = 0
                            xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                            xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                            newoutliers = []
                    
                    
                        
                            while ab < len(oldoldlabe):
                                newoldlab = str(oldoldlabe[ab])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                            
                                if bc == len(labels5):
                                    #print(bc)
                                    bc = bc
                                else:

                                    lab = str(labels5[bc])
                                    lab = lab.replace('-', ' ')
                                    lab = lab.replace(':', ' ')
                                    lab = lab.split()

                                    lab0 = int(lab[0])
                                    lab1 = int(lab[1])
                                    lab2 = int(lab[2])
                                    lab3 = int(lab[3])
                                    lab4 = int(lab[4])
                                    lab5 = int(lab[5])


                                x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                                y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                                diff = x - y

                                #print(diff)

                                if diff < xy:
                                    if diff > xz: 
                                        #print('yes')
                                        #print(diff)

                                        if bc == len(values5):
                                            #print(bc)
                                            c = np.nan
                                            newoutliers.append('f')
                                        else:
                                            
                                            newoutliers.append(outliers[bc])
                                            
                                            
                                            bc+=1
                                    else:
                                        c = np.nan
                                        #print('no')
                                        newoutliers.append('f')
                                else:
                                    c = np.nan
                                    #print('no')
                                    newoutliers.append('f')

                                        
                                
                                ab+=1
                        else:
                            newoutliers = outliers


                        print(newoutliers)

                        print(outliers)
                        print(len(outliers))
                        print(newoutliers)
                        print(len(newoutliers))

                        print(final_meter_id)
                        print('meter_id')


                        a = 0

                        titlefixtemp = ''

                        while a < len(EMStitlefix):
                            titlefix = str(EMStitlefix[a]).split('|')
                            titlefixcheck = int(titlefix[0])

                            if titlefixcheck == int(final_meter_id):
                                titlefixtemp = titlefix[1]

                                a = len(EMStitlefix) + 1
                            else:
                                a+=1

                        print(titlefixtemp)

                        if titlefixtemp == '':
                            title = 'Meter ID: ' + str(final_meter_id) + ' ' + parameterems.replace('`', '')
                        else:
                            title = str(titlefixtemp) + ' ' + parameterems.replace('`', '')


                        legend = title

                        oldoldvalus = oldoldvalusog



                        labet = []

                        line_labels = pd.to_datetime(line_labels, format = '%Y-%m-%d %H:%M:%S')

                        z = len(line_labels)
                        y = 0
                        labe = []
                        while y < z:
                            lab = line_labels[y]
                            labet.append(lab)
                            y += 1
                        print(labet)

                        line_labels = np.array(labet)

                        print(line_labels)

                        residualsklearndfvalues = pd.DataFrame({'timestamp':line_labels, 'data':line_values})

                        residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                        print(residualsklearndfvalues['data'])

                        residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                        residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                        print(residualsklearndfvalues)

                        testarr = np.array(residualsklearndfvalues['data'])

                        z = len(testarr)
                        y = 0
                        valtest = []
                        while y < z:
                            val = testarr[y]
                            if np.isnan(val) == True:
                                valtest.append('f')
                            else:
                                
                                valtest.append(int(val))
                            y += 1
                        testarrvalus = valtest

                        print(testarrvalus)
                        print(len(testarrvalus))

                        


                        residualsklearndfoutliers = pd.DataFrame({'timestamp':line_labels, 'outliers':outliers})

                        residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')
                        residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]

                        residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                        testarroutliers = np.array(residualsklearndfoutliers['outliers'])

                        print(testarroutliers)

                        z = len(testarroutliers)
                        y = 0
                        outtest = []
                        while y < z:
                            out = testarroutliers[y]
                            if out == 'f':
                                outtest.append('f')
                            elif np.isnan(out) == True:
                                outtest.append('f')
                            else:
                                
                                outtest.append(int(out))
                            y += 1
                        testarroutliers = outtest

                        


                        testarrlabe = residualsklearndfvalues.reset_index()
                        testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                        z = len(testarrlabe)
                        y = 0
                        labetest = []
                        while y < z:
                            lab = testarrlabe[y]
                            labetest.append(lab)
                            y += 1
                        testarrlabe = labetest
                        print(testarrlabe)
                        print(len(testarrlabe))
                        print(len(line_values))

                        print(testarroutliers)
                        print(len(testarroutliers))

                        line_values = testarrvalus
                        line_labels = testarrlabe

                        outliers = testarroutliers




                        line_valuestemp = []
                        oldoldvalustemp= []
                        line_labelstemp= []
                        outlierstemp= []
                        oldoldoutlierstemp= []
                        oldoldlabetemp = []

                        print(line_labels[0])
                        print(oldoldlabe[0])

                        if len(line_labels) != len(oldoldlabe):
                            a = 0
                            bb=0
                            cc=0
                            if len(line_labels) > len(oldoldlabe):
                                
                                while a < len(line_labels):
                                    b = str(line_labels[bb])
                                    c = str(oldoldlabe[cc])

                                    if str(b) == str(c):
                                        line_valuestemp.append(line_values[bb])
                                        oldoldvalustemp.append(oldoldvalus[cc])
                                        line_labelstemp.append(line_labels[bb])
                                        outlierstemp.append(outliers[bb])
                                        oldoldoutlierstemp.append(oldoldoutliers[cc])
                                        oldoldlabetemp.append(oldoldlabe[cc])
                                        bb+=1
                                        cc+=1

                                        if cc == len(oldoldlabe) - 1:
                                            a = len(line_labels) + 1
                                        else:

                                            a+=1
                                    else:
                                        bb+=1
                                        a+=1

                            else:
                                while a < len(oldoldlabe):
                                    b = str(line_labels[bb])
                                    c = str(oldoldlabe[cc])
                                    #print('2')

                                    
                                    if b == c:
                                        line_valuestemp.append(line_values[bb])
                                        oldoldvalustemp.append(oldoldvalus[cc])
                                        line_labelstemp.append(line_labels[bb])
                                        outlierstemp.append(outliers[bb])
                                        oldoldoutlierstemp.append(oldoldoutliers[cc])
                                        oldoldlabetemp.append(oldoldlabe[cc])

                                        bb+=1
                                        cc+=1

                                        if bb == len(line_labels) - 1:
                                            a = len(oldoldlabe) + 1
                                        else:

                                            a+=1
                                    else:
                                        cc+=1
                                        a+=1

                            line_values = line_valuestemp
                            oldoldvalus = oldoldvalustemp
                            line_labels = line_labelstemp
                            outliers = outlierstemp
                            oldoldoutliers = oldoldoutlierstemp
                            oldoldlabe = oldoldlabetemp


                        print('8888')
                        print(outliers)
                        print(line_labels)


        

                        

                        


                    elif dtype == 'Syn':
                        print('Syn')
                        table = 'Syntest' + str(final_id)
                        parameterems = '`' + finalparameter + '`'


                        final_meter_id = str(final_id)

                        print(final_meter_id)
                        print(startdate)
                        print(enddate)
                        print(finalvalues5)

                        parameterems = parameterems

                        table = '[' + table + ']'

                        print(table)
                        print('xxx')



                        labels5 = finallabels5


                        values5 = np.array(finalvalues5)


                        a = 0
                        X5 = 0
                        X6 = []
                        XYear = []
                        XMonth= []
                        XDay= []
                        XHour= []
                        XMin= []
                        Xsec= []

                        while a < len(labels5):
                            X5 = labels5[a]
                            X5 = X5.replace('[', '')
                            X5 = X5.replace(']', '')
                            X5 = X5.replace("'", "")
                            X5 = X5.replace(":", " ")
                            X5 = X5.replace("-", " ")
                            X5 = X5.replace("/", " ")
                            X5=X5.split()
                            X55 = X5[-3:-1]
                            X6.append(X55)
                            a+=1


                        X7 = np.array(X6)



                        #################################### Smart model datetime


                        #print(startdate)
                        #print(enddate)

                        startdate = startdate.replace('-',' ')
                        startdate = startdate.replace(':',' ')
                        startdate = startdate.replace("'"," ")

                        enddate = enddate.replace('-',' ')
                        enddate = enddate.replace(':',' ')
                        enddate = enddate.replace("'"," ")


                        #print(startdate)
                        #print(enddate)

                        startdate = startdate.split()
                        enddate = enddate.split()

                        #print(startdate)
                        #print(enddate)

                        startyear = int(startdate[0])
                        startmonth = int(startdate[1])
                        startday = int(startdate[2])

                        endyear = int(enddate[0])
                        endmonth = int(enddate[1])
                        endday = int(enddate[2])

                        startdate = datetime.datetime(startyear, startmonth, startday)
                        enddate = datetime.datetime(endyear, endmonth, endday)
                        z = enddate-startdate

                        #print(z)

                        modelstart = startdate - (4*z)

                        modelend = startdate

                        print(modelstart)
                        print(modelend)

                        weekday00 = []
                        weekday0 = []
                        weekday1 = []
                        weekday2 = []
                        weekday3 = []
                        weekday4 = []
                        weekday5 = []
                        weekday6 = []

                        weekday = []
                        weekend = []

                        weekdaynumber = []
                        weekendnumber = []

                        weekdaydatetime = []
                        weekenddatetime = []

                        modelstart2 = modelstart
                        modelstart3 = modelstart
                        modelend3 = modelend
                        


                        while modelstart2 != modelend + datetime.timedelta(days=1):
                            AA = modelstart2

                            AAday = AA.weekday()

                            #print(AA)
                            #print(AAday)

                            if AAday < 5:
                                weekday.append(str(AA))
                                weekdaynumber.append(AAday)
                                weekdaydatetime.append(AA)
                            else:
                                weekend.append(str(AA))
                                weekendnumber.append(AAday)
                                weekenddatetime.append(AA)
                                

                            modelstart2 = modelstart2 + datetime.timedelta(days=1)



                        print(weekday)

                        print(weekend)

                        print(weekdaynumber)

                        print(weekendnumber)

                        print(weekdaydatetime)

                        print(weekenddatetime)

                        

                        modelstart = str(modelstart)
                        modelstart = "'" + modelstart + "'"

                        modelend = str(modelend)
                        modelend = "'" + modelend + "'"

                        #print(modelstart)

                        #print(modelend)


                        a = 0
                        aa = 0

                        modelweekdaystart = []
                        modelweekdayend = []
                        modelweekendstart = []
                        modelweekendend = []

                        modelweekday = []
                        modelweekend = []

                        modelweekday2 = []
                        modelweekend2 = []

                        while modelstart3 != modelend3 + datetime.timedelta(days=1):

                            if len(weekday) == 0:
                                weekday = weekday
                                b = ''
                                d = -1
                                f = datetime.datetime.now()
                            else:

                                if len(weekday) > a:
                                    b = weekday[a]
                                    d = weekdaynumber[a]
                                    f = weekdaydatetime[a]
                                    
                                else:
                                    b = weekday[0]
                                    d = weekdaynumber[0]
                                    f = datetime.datetime.now()

                            if len(weekend) == 0:
                                cc = ''
                                e = -1
                                g = datetime.datetime.now()
                                
                            else:
                                
                                if len(weekend) > aa:
                                    cc = weekend[aa]
                                    e = weekendnumber[aa]
                                    g = weekenddatetime[aa]
                                    
                                else:
                                    cc = weekend[0]
                                    e = weekendnumber[0]
                                    g = datetime.datetime.now()
                                


                            if f > g:
                                #print(g)

                                modelweekend.append(cc)

                                if e == 6:
                                    


                                    #print(modelweekend)

                                    g = g + datetime.timedelta(days=1)

                                    modelweekend.append(str(g))

                                    modelweekend2.append(modelweekend)

                                    

                                    modelweekend = []

                                
                                    

                                
                                aa+=1


                            else:
                                #print(f)

                                modelweekday.append(b)

                                if d == 4:
                                    #print(modelweekday)

                                    f = f + datetime.timedelta(days=1)

                                    modelweekday.append(str(f))

                                    
                                    

                                    modelweekday2.append(modelweekday)

                                    modelweekday = []

                                
                                a+=1


                            
                            modelstart3 = modelstart3 + datetime.timedelta(days=1)


                        if len(modelweekday) > 0:
                            
                            f = f + datetime.timedelta(days=1)

                            modelweekday.append(str(f))

                            modelweekday2.append(modelweekday)

                        if len(modelweekend) > 0:
                            
                            g = g + datetime.timedelta(days=1)

                            modelweekend.append(str(g))

                            modelweekend2.append(modelweekend)
                            

                        #print(modelweekday)
                        #print(modelweekend)

                        #print(modelweekday2)
                        print('xxxxxxxxxxxx')
                        print(modelweekday2)
                        #print(modelweekend2)
                        print(modelweekend2)



                        loopdataweekday = []

                        looptimeaxisweekday = []

                        loopdataweekend = []

                        looptimeaxisweekend = []



                        a = 0

                        #print(modelweekday2[3])

                        while a < len(modelweekday2):
                            start = modelweekday2[a][0]
                            end = modelweekday2[a][-1]

                            

                            start = str(start)
                            end = str(end)

                            start = "'" + start + "'"
                            end = "'" + end + "'"

                            #print(start)
                            #print(end)

                            #print(table)

                            conn = sqlite3.connect('SynOUT.db')
                            c = conn.cursor()

                            
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))



                            

                        

                            

                            if len(dataset4loop) == 0:
                                print('0')

                            else:
                                if len(timeaxis3loop) == 0:
                                    print('0')

                                else:

                                    loopdataweekday.append(dataset4loop)
                                    looptimeaxisweekday.append(timeaxis3loop)



                            a +=1

                        print(loopdataweekday)
                        print(looptimeaxisweekday)

                        a = 0
                        

                        while a < len(modelweekend2):
                            start = modelweekend2[a][0]
                            end = modelweekend2[a][-1]

                            

                            start = str(start)
                            end = str(end)

                            start = "'" + start + "'"
                            end = "'" + end + "'"

                            #print(start)
                            #print(end)

                            #print(table)

                            conn = sqlite3.connect('SynOUT.db')

                            c = conn.cursor()

                            
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `timestamp` FROM " + table + " WHERE timestamp BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))



                            if len(dataset4loop) == 0:
                                print('0')

                            else:
                                if len(timeaxis3loop) == 0:
                                    print('0')

                                else:

                                    loopdataweekend.append(dataset4loop)
                                    looptimeaxisweekend.append(timeaxis3loop)


                            a +=1


                        print(loopdataweekend)
                        print(looptimeaxisweekend)



                        


        ##########weekday data
                        a = 0

                        if len(loopdataweekday) == 0:
                            print('')
                            dataset444 = []
                        else:

                            dataset444 = loopdataweekday[0]

                        while a < len(loopdataweekday):

                            dataset111 = loopdataweekday[a]

                            #print(len(dataset111))

                            #print(dataset111[0])
                            #print(dataset444[0])

                            if np.all(dataset111 == dataset444):
                                print(np.all(dataset111 == dataset444))
                                dataset555 = dataset444

                            else:

                                dataset555 = np.concatenate([dataset555, dataset111])
                                dataset444 = np.concatenate([dataset444, dataset111])

                                #print(len(dataset444))
                                #print(len(dataset555))


                            a+=1


                        #print(dataset444)
                        #print(loopdataweekend[0])


    ################weekend data
                        a = 0

                        if len(loopdataweekend) == 0:
                            print('')
                            dataset4444 = []
                        else:

                            dataset4444 = loopdataweekend[0]

                        while a < len(loopdataweekend):

                            dataset1111 = loopdataweekend[a]

                            #print(len(dataset1111))

                            #print(dataset1111[0])
                            #print(dataset4444[0])

                            if np.all(dataset1111 == dataset4444):
                                #print(np.all(dataset1111 == dataset4444))
                                dataset5555 = dataset4444

                            else:

                                dataset5555 = np.concatenate([dataset5555, dataset1111])
                                dataset4444 = np.concatenate([dataset4444, dataset1111])

                                #print(len(dataset4444))
                                #print(len(dataset5555))


                            a+=1


                        #print(dataset4444)
                        #print(len(looptimeaxisweekday))
                        #print(looptimeaxisweekday[3])



                                ##########weekday timeaxis
                        a = 0

                        if len(looptimeaxisweekday) == 0:
                            print('')
                            timeaxis444 = []
                        else:

                            timeaxis444 = looptimeaxisweekday[0]

                        while a < len(looptimeaxisweekday):

                            timeaxis111 = looptimeaxisweekday[a]

                            #print(len(timeaxis111))

                            #print(timeaxis111[0])
                            #print(timeaxis444[0])
                            #print(a)

                            if timeaxis111[0] == timeaxis444[0]:
                                timeaxis555 = timeaxis444

                            else:

                                timeaxis555 = timeaxis555 + timeaxis111
                                timeaxis444 = timeaxis444 + timeaxis111
                                

                                #print(len(timeaxis444))
                                #print(len(timeaxis555))


                            a+=1


                        #print(timeaxis444)
                        #print(looptimeaxisweekend[0][0])


    ################weekend timeaxis
                        a = 0

                        if len(looptimeaxisweekend) == 0:
                            print('')
                            timeaxis4444 = []
                        else:

                            timeaxis4444 = looptimeaxisweekend[0]

                        while a < len(looptimeaxisweekend):

                            timeaxis1111 = looptimeaxisweekend[a]

                            #print(len(timeaxis1111))

                            #print(timeaxis1111[0])
                            #print(timeaxis4444[0])

                            if timeaxis1111[0] == timeaxis4444[0]:
                                timeaxis5555 = timeaxis4444

                            else:

                                #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                                timeaxis5555 = timeaxis5555 + timeaxis1111
                                timeaxis4444 = timeaxis4444 + timeaxis1111

                                #print(len(timeaxis4444))
                                #print(len(timeaxis5555))


                            a+=1


                        #print(timeaxis4444)

                        #print(len(timeaxis444))
                        #print(len(dataset444))

                        #print(len(timeaxis4444))
                        #print(len(dataset4444))



                        x10fweekday = pd.DataFrame(timeaxis444, columns=['timestamp'])
                        x10fweekday['data'] = dataset444

                        labelsweekday = x10fweekday['timestamp']

                        valuesweekday = x10fweekday['data']

                        valuesweekday = np.array(valuesweekday)

                        #print(labelsweekday)
                        #print(valuesweekday)



                        

                        x10fweekend = pd.DataFrame(timeaxis4444, columns=['timestamp'])
                        x10fweekend['data'] = dataset4444

                        labelsweekend = x10fweekend['timestamp']

                        valuesweekend = x10fweekend['data']

                        valuesweekend = np.array(valuesweekend)

                        #print(labelsweekend)
                        #print(valuesweekend)

                        weekendlabeldateday = []
                        weekdaylabeldateday = []



                        if len(labelsweekday) == 0:
                            print('')

                        else:
                            

                            a = 0
                            
                            X22 = 0
                            X33 = []
                            X777 = []
                            X778 = []
                            X779 = []
                            X77 = []


                            while a < len(labelsweekday):
                                X22 = labelsweekday[a]
                                X22 = X22.replace('[', '')
                                X22 = X22.replace(']', '')
                                X22 = X22.replace("'", "")
                                X22 = X22.replace(":", " ")
                                X22 = X22.replace("-", " ")
                                X22 = X22.replace("/", " ")
                                X22=X22.split()
                                X225 = X22[-3:-1]

                                X771 = X22[0]
                                X772 = X22[1]
                                X773 = X22[2]
                                
                                X777.append(X771)
                                X778.append(X772)
                                X779.append(X773)
                                
                                X33.append(X225)

                                weekdayyear = int(X22[0])
                                weekdaymonth = int(X22[1])
                                weekdayday = int(X22[2])

                                weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                                weekdaylabeldateday.append(weekdaylabeldate.weekday())
                                
                                a+=1

                            X44 = np.array(X33)



                        if len(valuesweekend) == 0:
                            print('')

                        else:



                            a = 0
                            
                            XX22 = 0
                            XX33 = []
                            XX777 = []
                            XX778 = []
                            XX779 = []
                            XX77 = []


                            while a < len(labelsweekend):
                                XX22 = labelsweekend[a]
                                XX22 = XX22.replace('[', '')
                                XX22 = XX22.replace(']', '')
                                XX22 = XX22.replace("'", "")
                                XX22 = XX22.replace(":", " ")
                                XX22 = XX22.replace("-", " ")
                                XX22 = XX22.replace("/", " ")
                                XX22=XX22.split()
                                XX225 = XX22[-3:-1]

                                XX771 = XX22[0]
                                XX772 = XX22[1]
                                XX773 = XX22[2]
                                
                                XX777.append(XX771)
                                XX778.append(XX772)
                                XX779.append(XX773)
                                
                                XX33.append(XX225)

                                weekendyear = int(XX22[0])
                                weekendmonth = int(XX22[1])
                                weekendday = int(XX22[2])

                                weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                                weekendlabeldateday.append(weekendlabeldate.weekday())

                                
                                a+=1

                            XX44 = np.array(XX33)


                        #print(X44)
                        #print(XX44)


                        #print(len(weekdaylabeldateday))
                        #print(weekdaylabeldateday)

                        #print(len(valuesweekday))
                        #print(valuesweekday)


                        a = 12

                        weekdayvaluesavg = []
                        weekdaylabelsavg = []
                        weekdaypredavg = []

                        while a < len(weekdaylabeldateday):
                            a1 = int(valuesweekday[a])
                            a2 = int(valuesweekday[a-1])
                            a3 = int(valuesweekday[a-2])
                            a4 = int(valuesweekday[a-3])
                            a5 = int(valuesweekday[a-4])
                            a6 = int(valuesweekday[a-5])
                            a7 = int(valuesweekday[a-6])
                            a8 = int(valuesweekday[a-7])
                            a9 = int(valuesweekday[a-8])
                            a10 = int(valuesweekday[a-9])
                            a11 = int(valuesweekday[a-10])
                            a12 = int(valuesweekday[a-11])
                            a13 = int(valuesweekday[a-12])

                            #print(a4)

                            

                            aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13)/13

                            #print(aavg)

                            if weekdaylabeldateday[a] == 5:

                                weekdayvaluesavg.append(aavg)

                                weekdaylabelsavg.append(labelsweekday[a])

                                weekdaypredavg.append(X33[a])

                                a = a + 13

                            else:

                                weekdayvaluesavg.append(aavg)

                                weekdaylabelsavg.append(labelsweekday[a])

                                weekdaypredavg.append(X33[a])

                                a +=1



                        #print(len(weekdaylabeldateday))
                        #print(len(weekdayvaluesavg))
                        #print(len(weekdaylabelsavg))



                        #print(len(weekendlabeldateday))
                        #print(weekendlabeldateday)

                        #print(len(valuesweekend))
                        #print(valuesweekend)

                            

                        a = 12

                        weekendvaluesavg = []
                        weekendlabelsavg = []
                        weekendpredavg = []

                        while a < len(weekendlabeldateday):
                            a1 = int(valuesweekend[a])
                            a2 = int(valuesweekend[a-1])
                            a3 = int(valuesweekend[a-2])
                            a4 = int(valuesweekend[a-3])
                            a5 = int(valuesweekend[a-4])
                            a6 = int(valuesweekend[a-5])
                            a7 = int(valuesweekend[a-6])
                            a8 = int(valuesweekend[a-7])
                            a9 = int(valuesweekend[a-8])
                            a10 = int(valuesweekend[a-9])
                            a11 = int(valuesweekend[a-10])
                            a12 = int(valuesweekend[a-11])
                            a13 = int(valuesweekend[a-12])

                            #print(a4)

                            

                            aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13)/13

                            #print(aavg)

                            if weekendlabeldateday[a] == 0:

                                weekendvaluesavg.append(aavg)

                                weekendlabelsavg.append(labelsweekend[a])

                                weekendpredavg.append(XX33[a])

                                a = a + 13

                            else:

                                weekendvaluesavg.append(aavg)

                                weekendlabelsavg.append(labelsweekend[a])

                                weekendpredavg.append(XX33[a])

                                a +=1



                        weekdaypredavg = np.array(weekdaypredavg)
                        weekendpredavg = np.array(weekendpredavg)

                        #print(len(weekendlabeldateday))
                        #print(len(weekendvaluesavg))
                        #print(len(weekendlabelsavg))

                        #print(weekendlabeldateday)
                        #print(weekendvaluesavg)
                        #print(weekendlabelsavg)


                        #print(X44)
                        #print(XX44)

                        #print(len(weekdaypredavg))
                        #print(len(weekendpredavg))
                        ###################################################################






                        regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                        if len(valuesweekday) == 0:
                            print('')
                            predvaluweekday = []
                        elif len(labels5) == 0:
                            print('')
                            predvaluweekday = []

                        else:

                            regr.fit(X44, valuesweekday)
                            #regr.fit(weekdaypredavg, weekdayvaluesavg)
                            predictedweekday = regr.predict(X7)


                            #print(predictedweekday)

                            #print(mean_squared_error(values5, predictedweekday))
                            #print(r2_score(values5, predictedweekday))
                           
                            i = len(predictedweekday)
                            k = 0
                            predvaluweekday = []
                            while k < i:
                                predvalweekday = predictedweekday[k]
                                predvaluweekday.append(predvalweekday)
                                k += 1
                            #print(predvaluweekday)

                            #print(len(predvaluweekday))




                        regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                        if len(valuesweekend) == 0:
                            print('')
                            predvaluweekend = []
                        elif len(labels5) == 0:
                            print('')
                            predvaluweekend = []

                        else:

                            regrf.fit(XX44, valuesweekend)
                            #regrf.fit(weekendpredavg, weekendvaluesavg)
                            predictedweekend = regrf.predict(X7)


                            #print(predictedweekend)

                            #print(mean_squared_error(values5, predicted))
                            #print(r2_score(values5, predicted))
                           
                            i = len(predictedweekend)
                            k = 0
                            predvaluweekend = []
                            while k < i:
                                predvalweekend = predictedweekend[k]
                                predvaluweekend.append(predvalweekend)
                                k += 1
                            #print(predvaluweekend)

                            #print(len(predvaluweekend))

                            print(predvaluweekday)
                            print(predvaluweekend)


                        values = values5
                        labels = labels5
                            
                        


                        

                        
                        
                        

                        ####################################


                        i = len(values)
                        k = 0
                        valu = []
                        while k < i:
                            val = values[k]
                            valu.append(val)
                            k += 1
                        #print(valu)

                        z = len(labels)
                        y = 0
                        labe = []
                        while y < z:
                            lab = labels[y]
                            labe.append(lab)
                            y += 1
                        #print(labe)

                        a = 0
                        X2 = 0
                   

                        X227 = []
                        X228 = []
                        X229 = []
                        X22 = []
                        X2727 = []

                        while a < len(labels):
                            X2 = str(labels[a])
                            X2 = X2.replace('[', '')
                            X2 = X2.replace(']', '')
                            X2 = X2.replace("'", "")
                            X2 = X2.replace(":", " ")
                            X2 = X2.replace("-", " ")
                            X2 = X2.replace("/", " ")
                            X2=X2.split()
                            X25 = X2[-3:-1]

                            X221 = X2[0]
                            X222 = X2[1]
                            X223 = X2[2]
                            
                            X227.append(X221)
                            X228.append(X222)
                            X229.append(X223)
                            a+=1


                        #print(X227[0])
                        #print(X228[0])
                        #print(X229[0])



                        a = 0

                        while a < len(X227):
                            

                            X2227 = int(X227[a])
                            X2228 = int(X228[a])
                            X2229 = int(X229[a])
                            
                            X22222 = datetime.date(X2227, X2228, X2229)

                            X22222 = X22222.weekday()

                            X2727.append(X22222)

                            a+=1
                            
                        #print(X77)
                        #print(X2727)


                        a=0

                        weekendvalu = []
                        weekdayvalu = []

                        while a < len(valu):
                            if X2727[a] == 5:
                                weekendvalu.append(valu[a])

                            elif X2727[a] == 6:
                                weekendvalu.append(valu[a])

                            else:
                                weekdayvalu.append(valu[a])
                            a+=1
                            

                        weekdaystddev = np.std(weekdayvalu)
                        weekendstddev = np.std(weekendvalu)

                        print(weekdayvalu)
                        print(weekendvalu)
                        print(weekdaystddev)
                        print(weekendstddev)
                        

                        if len(valuesweekday) == 0:
                            print('hi')


                            avgg = np.mean(valu)
                            medavgg = np.median(valu)
                            stddev = np.std(valu)
                            #print(avgg)
                            #print(medavgg)
                            #print(stddev)

                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                            z = avgg + (3*stddev)
                            zz = avgg - (3*stddev)

                            while v < len(valu):
                                if valu[v] > z:
                                    #print('bigger')
                                    outliers.append(int(valu[v]))
                                    if v == 0:
                                        print('')
                                    else:
                                        outliers[v-1] = valu[v-1]
                                    
                                
                                    valus.append('f')

                                elif valu[v] < zz:
                                    #print('smaller')
                                    outliers.append(int(valu[v]))
                                    if v == 0:
                                        print('')
                                    else:
                                        outliers[v-1] = valu[v-1]
                                    
                                
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                    
                                    if v == 0:
                                        print('')
                                    else:
                                        valus[v-1] = valu[v-1]

                                        
                                    
                                v += 1

                        elif len(predvaluweekend) == 0:

                            stddev = np.std(valu)
                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                                
                            while v < len(valu):
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                v +=1

                        else:
                            
                            
                                
                            stddev = np.std(valu)
                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                                

                            while v < len(valu):
                                if X2727[v] == 6:

                                    if valu[v] > (predvaluweekend[v] + weekendstddev):
                                        #print('bigger weekend')
                                        #print((predvaluweekend[v] + stddev))
                                        outliers.append(int(valu[v]))
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                        #print('smaller weekend')
                                        #print((predvaluweekend[v] - stddev))
                                        outliers.append(int(valu[v]))
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not weekend')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1

                                elif X2727[v] == 5:

                                    if valu[v] > (predvaluweekend[v] + weekendstddev):
                                        #print('bigger weekend')
                                        #print((predvaluweekend[v] + stddev))
                                        outliers.append(int(valu[v]))
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                        #print('smaller weekend')
                                        #print((predvaluweekend[v] - stddev))
                                        outliers.append(int(valu[v]))
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not weekend')
                                        outliers.append('f')
                                        valus.append(int(valu[v]))
                                            
                                        
                                    v += 1


                                else:
                                    if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                        #print('bigger')
                                        #print((predvalweekdayu[v] + stddev))
                                        outliers.append(int(valu[v]))
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                        #print('smaller')
                                        #print((predvalweekdayu[v] - stddev))
                                        outliers.append(int(valu[v]))
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1






                        print('outliers')
                        print(outliers)


                        
                            



                        









                            ####################################
                        if len(values5) < len(oldoldvalus2):


                            ## oldold valus processing
                            ab = 0
                            bc = 0
                            xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                            xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                            newoutliers = []
                    
                    
                        
                            while ab < len(oldoldlabe):
                                newoldlab = str(oldoldlabe[ab])
                                newoldlab = newoldlab.replace('-', ' ')
                                newoldlab = newoldlab.replace(':', ' ')
                                newoldlab = newoldlab.split()

                                newoldlab0 = int(newoldlab[0])
                                newoldlab1 = int(newoldlab[1])
                                newoldlab2 = int(newoldlab[2])
                                newoldlab3 = int(newoldlab[3])
                                newoldlab4 = int(newoldlab[4])
                                newoldlab5 = int(newoldlab[5])

                            
                                if bc == len(labels5):
                                    print(bc)
                                else:

                                    lab = str(labels5[bc])
                                    lab = lab.replace('-', ' ')
                                    lab = lab.replace(':', ' ')
                                    lab = lab.split()

                                    lab0 = int(lab[0])
                                    lab1 = int(lab[1])
                                    lab2 = int(lab[2])
                                    lab3 = int(lab[3])
                                    lab4 = int(lab[4])
                                    lab5 = int(lab[5])


                                x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                                y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                                diff = x - y

                                #print(diff)

                                if diff < xy:
                                    if diff > xz: 
                                        #print('yes')
                                        #print(diff)

                                        if bc == len(values5):
                                            #print(bc)
                                            c = np.nan
                                            newoutliers.append('f')
                                        else:
                                            if outliers[bc] == 'f':
                                                newoutliers.append(outliers[bc])

                                            else:
                                                newoutliers.append(int(outliers[bc]))
                                            
                                            
                                            bc+=1
                                    else:
                                        c = np.nan
                                        #print('no')
                                        newoutliers.append('f')
                                else:
                                    c = np.nan
                                    #print('no')
                                    newoutliers.append('f')

                                        

                                ab+=1

                    


                        elif len(values5) > len(oldoldvalus2):


                            ## oldold valus processing
                            ab = 0
                            bc = 0
                            xy = datetime.timedelta(seconds=30, minutes=4, hours=0, days=0)
                            xz = datetime.timedelta(seconds=30, minutes=55, hours=23, days=-1)

                            newoutliers = []
                    
                    
                        
                            while ab < len(labels5):
                                

                                lab = str(labels5[ab])
                                lab = lab.replace('-', ' ')
                                lab = lab.replace(':', ' ')
                                lab = lab.split()

                                lab0 = int(lab[0])
                                lab1 = int(lab[1])
                                lab2 = int(lab[2])
                                lab3 = int(lab[3])
                                lab4 = int(lab[4])
                                lab5 = int(lab[5])

                            
                                if bc == len(oldoldvalus2):
                                    print(bc)
                                else:
                                    newoldlab = str(oldoldlabe[bc])
                                    newoldlab = newoldlab.replace('-', ' ')
                                    newoldlab = newoldlab.replace(':', ' ')
                                    newoldlab = newoldlab.split()

                                    newoldlab0 = int(newoldlab[0])
                                    newoldlab1 = int(newoldlab[1])
                                    newoldlab2 = int(newoldlab[2])
                                    newoldlab3 = int(newoldlab[3])
                                    newoldlab4 = int(newoldlab[4])
                                    newoldlab5 = int(newoldlab[5])

                                    


                                x = datetime.datetime(lab0, lab1, lab2, lab3, lab4, lab5)

                                y = datetime.datetime(newoldlab0, newoldlab1, newoldlab2, newoldlab3, newoldlab4, newoldlab5)

                                diff = x - y

                                #print(diff)

                                if diff < xy:
                                    if diff > xz: 
                                        #print('yes')
                                        #print(diff)

                                        if bc == len(oldoldvalus2):
                                            #print(bc)
                                            c = np.nan
                                            newoutliers.append('f')
                                        else:
                                            if oldoldoutliers[bc] == 'f':
                                                newoutliers.append(oldoldoutliers[bc])

                                            else:
                                                newoutliers.append(int(oldoldoutliers[bc]))
                                            
                                            
                                            
                                            
                                            bc+=1
                                    else:
                                        c = np.nan
                                        #print('no')
                                        newoutliers.append('f')
                                else:
                                    c = np.nan
                                    #print('no')
                                    newoutliers.append('f')

                                        

                                ab+=1

                    

                        else:
                            newoutliers = outliers




                            ######################
                        print('aaaaaaaaaaa')
                        print(newoutliers)
                        print(len(newoutliers))

                        print(outliers)
                        print(len(outliers))
                        print(oldoldoutliers)
                        print(len(oldoldoutliers))


                        print(newoutliers)

                        print(outliers)
                        print(len(outliers))
                        print(newoutliers)
                        print(len(newoutliers))

                        print(final_meter_id)
                        print('meter_id')

                        a = 0

                        titlefixtemp = ''

                        while a < len(Syntitlefix):
                            titlefix = str(Syntitlefix[a]).split('|')
                            titlefixcheck = titlefix[0]

                            if titlefixcheck == final_meter_id:
                                titlefixtemp = titlefix[1]

                                a = len(Syntitlefix) + 1
                            else:
                                a+=1

                        print(titlefixtemp)

                        if titlefixtemp == '':
                            title = 'Meter ID: ' + str(final_meter_id) + ' ' + parameterems.replace('`', '')
                        else:
                            title = str(titlefixtemp) + ' ' + parameterems.replace('`', '')

                        legend = title

                        oldoldvalus = oldoldvalusog




                        labet = []

                        line_labels = pd.to_datetime(line_labels, format = '%Y-%m-%d %H:%M:%S')

                        z = len(line_labels)
                        y = 0
                        labe = []
                        while y < z:
                            lab = line_labels[y]
                            labet.append(lab)
                            y += 1
                        print(labet)

                        line_labels = np.array(labet)

                        print(line_labels)

                        residualsklearndfvalues = pd.DataFrame({'timestamp':line_labels, 'data':line_values})

                        residualsklearndfvalues = residualsklearndfvalues.set_index('timestamp')
                        print(residualsklearndfvalues['data'])

                        residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]


                        residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                        print(residualsklearndfvalues)

                        testarr = np.array(residualsklearndfvalues['data'])

                        z = len(testarr)
                        y = 0
                        valtest = []
                        while y < z:
                            val = testarr[y]
                            if np.isnan(val) == True:
                                valtest.append('f')
                            else:
                                
                                valtest.append(int(val))
                            y += 1
                        testarrvalus = valtest

                        print(testarrvalus)
                        print(len(testarrvalus))

                        


                        residualsklearndfoutliers = pd.DataFrame({'timestamp':line_labels, 'outliers':outliers})

                        residualsklearndfoutliers = residualsklearndfoutliers.set_index('timestamp')

                        residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]

                        residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()


                        testarroutliers = np.array(residualsklearndfoutliers['outliers'])

                        print(testarroutliers)

                        z = len(testarroutliers)
                        y = 0
                        outtest = []
                        while y < z:
                            out = testarroutliers[y]
                            if out == 'f':
                                outtest.append('f')
                            elif np.isnan(out) == True:
                                outtest.append('f')
                            else:
                                
                                outtest.append(int(out))
                            y += 1
                        testarroutliers = outtest

                        


                        testarrlabe = residualsklearndfvalues.reset_index()
                        testarrlabe = pd.to_datetime(testarrlabe['timestamp'], format = '%Y-%m-%d %H:%M:%S')

                        z = len(testarrlabe)
                        y = 0
                        labetest = []
                        while y < z:
                            lab = testarrlabe[y]
                            labetest.append(lab)
                            y += 1
                        testarrlabe = labetest
                        print(testarrlabe)
                        print(len(testarrlabe))
                        print(len(line_values))

                        print(testarroutliers)
                        print(len(testarroutliers))

                        print(len(oldoldlabe))

                        line_values = testarrvalus
                        line_labels = testarrlabe

                        outliers = testarroutliers

                        
                        line_valuestemp = []
                        oldvalustemp= []
                        oldoldvalustemp= []
                        line_labelstemp= []
                        outlierstemp= []
                        oldoutlierstemp= []
                        oldoldoutlierstemp= []
                        oldoldlabetemp = []


                        if len(line_labels) != len(oldoldlabe):
                            a = 0
                            bb=0
                            cc=0
                            if len(line_labels) > len(oldoldlabe):
                                
                                while a < len(line_labels):
                                    b = str(line_labels[bb])
                                    c = str(oldoldlabe[cc])

                                    if str(b) == str(c):
                                        line_valuestemp.append(line_values[bb])
                                        oldoldvalustemp.append(oldoldvalus[cc])
                                        line_labelstemp.append(line_labels[bb])
                                        outlierstemp.append(outliers[bb])
                                        oldoldoutlierstemp.append(oldoldoutliers[cc])
                                        oldoldlabetemp.append(oldoldlabe[cc])
                                        bb+=1
                                        cc+=1

                                        if cc == len(oldoldlabe) - 1:
                                            a = len(line_labels) + 1
                                        else:

                                            a+=1
                                    else:
                                        bb+=1
                                        a+=1

                            else:
                                while a < len(oldoldlabe):
                                    b = str(line_labels[bb])
                                    c = str(oldoldlabe[cc])
                                    #print('2')

                                    
                                    if b == c:
                                        line_valuestemp.append(line_values[bb])
                                        oldoldvalustemp.append(oldoldvalus[cc])
                                        line_labelstemp.append(line_labels[bb])
                                        outlierstemp.append(outliers[bb])
                                        oldoldoutlierstemp.append(oldoldoutliers[cc])
                                        oldoldlabetemp.append(oldoldlabe[cc])

                                        bb+=1
                                        cc+=1

                                        if bb == len(line_labels) - 1:
                                            a = len(oldoldlabe) + 1
                                        else:

                                            a+=1
                                    else:
                                        cc+=1
                                        a+=1

                            line_values = line_valuestemp
                            oldoldvalus = oldoldvalustemp
                            line_labels = line_labelstemp
                            outliers = outlierstemp
                            oldoldoutliers = oldoldoutlierstemp
                            oldoldlabe = oldoldlabetemp
                            line_outliers = outliers

                    else:
                        print(dtype)
                        print('Wifi')
                        table = 'wifitest' + str(final_id)
                        parameterwifi = finalparameter

                        final_meter_id = str(final_id)

                        print(final_meter_id)
                        print(startdate)
                        print(enddate)
                        print(finalvalues5)

                        parameterems = parameterwifi

                        table = '[' + table + ']'

                        print(table)
                        print('xxx')

                        print(parameterems)



                        labels5 = finallabels5


                        values5 = np.array(finalvalues5)


                        a = 0
                        X5 = 0
                        X6 = []
                        XYear = []
                        XMonth= []
                        XDay= []
                        XHour= []
                        XMin= []
                        Xsec= []

                        while a < len(labels5):
                            X5 = labels5[a]
                            X5 = X5.replace('[', '')
                            X5 = X5.replace(']', '')
                            X5 = X5.replace("'", "")
                            X5 = X5.replace(":", " ")
                            X5 = X5.replace("-", " ")
                            X5 = X5.replace("/", " ")
                            X5=X5.split()
                            X55 = X5[-3:-1]
                            X6.append(X55)
                            a+=1


                        X7 = np.array(X6)



                        #################################### Smart model datetime


                        #print(startdate)
                        #print(enddate)

                        startdate = startdate.replace('-',' ')
                        startdate = startdate.replace(':',' ')
                        startdate = startdate.replace("'"," ")

                        enddate = enddate.replace('-',' ')
                        enddate = enddate.replace(':',' ')
                        enddate = enddate.replace("'"," ")


                        #print(startdate)
                        #print(enddate)

                        startdate = startdate.split()
                        enddate = enddate.split()

                        #print(startdate)
                        #print(enddate)

                        startyear = int(startdate[0])
                        startmonth = int(startdate[1])
                        startday = int(startdate[2])

                        endyear = int(enddate[0])
                        endmonth = int(enddate[1])
                        endday = int(enddate[2])

                        startdate = datetime.datetime(startyear, startmonth, startday)
                        enddate = datetime.datetime(endyear, endmonth, endday)
                        z = enddate-startdate

                        #print(z)

                        modelstart = startdate - (4*z)

                        modelend = startdate

                        print(modelstart)
                        print(modelend)

                        weekday00 = []
                        weekday0 = []
                        weekday1 = []
                        weekday2 = []
                        weekday3 = []
                        weekday4 = []
                        weekday5 = []
                        weekday6 = []

                        weekday = []
                        weekend = []

                        weekdaynumber = []
                        weekendnumber = []

                        weekdaydatetime = []
                        weekenddatetime = []

                        modelstart2 = modelstart
                        modelstart3 = modelstart
                        modelend3 = modelend
                        


                        while modelstart2 != modelend + datetime.timedelta(days=1):
                            AA = modelstart2

                            AAday = AA.weekday()

                            #print(AA)
                            #print(AAday)

                            if AAday < 5:
                                weekday.append(str(AA))
                                weekdaynumber.append(AAday)
                                weekdaydatetime.append(AA)
                            else:
                                weekend.append(str(AA))
                                weekendnumber.append(AAday)
                                weekenddatetime.append(AA)
                                

                            modelstart2 = modelstart2 + datetime.timedelta(days=1)



                        print(weekday)

                        print(weekend)

                        print(weekdaynumber)

                        print(weekendnumber)

                        print(weekdaydatetime)

                        print(weekenddatetime)

                        

                        modelstart = str(modelstart)
                        modelstart = "'" + modelstart + "'"

                        modelend = str(modelend)
                        modelend = "'" + modelend + "'"

                        #print(modelstart)

                        #print(modelend)


                        a = 0
                        aa = 0

                        modelweekdaystart = []
                        modelweekdayend = []
                        modelweekendstart = []
                        modelweekendend = []

                        modelweekday = []
                        modelweekend = []

                        modelweekday2 = []
                        modelweekend2 = []

                        while modelstart3 != modelend3 + datetime.timedelta(days=1):

                            if len(weekday) == 0:
                                weekday = weekday
                                b = ''
                                d = -1
                                f = datetime.datetime.now()
                            else:

                                if len(weekday) > a:
                                    b = weekday[a]
                                    d = weekdaynumber[a]
                                    f = weekdaydatetime[a]
                                    
                                else:
                                    b = weekday[0]
                                    d = weekdaynumber[0]
                                    f = datetime.datetime.now()

                            if len(weekend) == 0:
                                cc = ''
                                e = -1
                                g = datetime.datetime.now()
                                
                            else:
                                
                                if len(weekend) > aa:
                                    cc = weekend[aa]
                                    e = weekendnumber[aa]
                                    g = weekenddatetime[aa]
                                    
                                else:
                                    cc = weekend[0]
                                    e = weekendnumber[0]
                                    g = datetime.datetime.now()
                                


                            if f > g:
                                #print(g)

                                modelweekend.append(cc)

                                if e == 6:
                                    


                                    #print(modelweekend)

                                    g = g + datetime.timedelta(days=1)

                                    modelweekend.append(str(g))

                                    modelweekend2.append(modelweekend)

                                    

                                    modelweekend = []

                                
                                    

                                
                                aa+=1


                            else:
                                #print(f)

                                modelweekday.append(b)

                                if d == 4:
                                    #print(modelweekday)

                                    f = f + datetime.timedelta(days=1)

                                    modelweekday.append(str(f))

                                    
                                    

                                    modelweekday2.append(modelweekday)

                                    modelweekday = []

                                
                                a+=1


                            
                            modelstart3 = modelstart3 + datetime.timedelta(days=1)


                        if len(modelweekday) > 0:
                            
                            f = f + datetime.timedelta(days=1)

                            modelweekday.append(str(f))

                            modelweekday2.append(modelweekday)

                        if len(modelweekend) > 0:
                            
                            g = g + datetime.timedelta(days=1)

                            modelweekend.append(str(g))

                            modelweekend2.append(modelweekend)
                            

                        #print(modelweekday)
                        #print(modelweekend)

                        #print(modelweekday2)
                        print('xxxxxxxxxxxx')
                        print(modelweekday2)
                        #print(modelweekend2)
                        print(modelweekend2)



                        loopdataweekday = []

                        looptimeaxisweekday = []

                        loopdataweekend = []

                        looptimeaxisweekend = []



                        a = 0

                        #print(modelweekday2[3])

                        print(parameterems)

                        while a < len(modelweekday2):
                            start = modelweekday2[a][0]
                            end = modelweekday2[a][-1]

                            

                            start = str(start)
                            end = str(end)


                            start = "'" + start + "'"
                            end = "'" + end + "'"

                            #print(start)
                            #print(end)

                            print(table)

                            conn = sqlite3.connect('test2.db')

                            c = conn.cursor()

                            
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))



                            

                        

                            

                            if len(dataset4loop) == 0:
                                print('0')

                            else:
                                if len(timeaxis3loop) == 0:
                                    print('0')

                                else:

                                    loopdataweekday.append(dataset4loop)
                                    looptimeaxisweekday.append(timeaxis3loop)



                            a +=1

                        print(loopdataweekday)
                        print(looptimeaxisweekday)

                        a = 0

                        print(parameterems)
                        

                        while a < len(modelweekend2):
                            start = modelweekend2[a][0]
                            end = modelweekend2[a][-1]

                            

                            start = str(start)
                            end = str(end)

                            start = "'" + start + "'"
                            end = "'" + end + "'"

                            #print(start)
                            #print(end)

                            #print(table)

                            conn = sqlite3.connect('test2.db')

                            c = conn.cursor()

                            
                            query3loop = "SELECT " + parameterems + " FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            query4loop = "SELECT `time` FROM " + table + " WHERE time BETWEEN " + start + " AND" + end

                            c.execute(query3loop)


                            dataset3loop = c.fetchall()

                            dataset4loop = np.array(dataset3loop)

                            #print(len(dataset4loop))

                            c.execute(query4loop)

                            timeaxis3loop = c.fetchall()

                            #print(len(timeaxis3loop))



                            if len(dataset4loop) == 0:
                                print('0')

                            else:
                                if len(timeaxis3loop) == 0:
                                    print('0')

                                else:

                                    loopdataweekend.append(dataset4loop)
                                    looptimeaxisweekend.append(timeaxis3loop)


                            a +=1


                        print(loopdataweekend)
                        print(looptimeaxisweekend)



                        


        ##########weekday data
                        a = 0

                        if len(loopdataweekday) == 0:
                            print('')
                            dataset444 = []
                        else:

                            dataset444 = loopdataweekday[0]

                        while a < len(loopdataweekday):

                            dataset111 = loopdataweekday[a]

                            #print(len(dataset111))

                            #print(dataset111[0])
                            #print(dataset444[0])

                            if np.all(dataset111 == dataset444):
                                print(np.all(dataset111 == dataset444))
                                dataset555 = dataset444

                            else:

                                dataset555 = np.concatenate([dataset555, dataset111])
                                dataset444 = np.concatenate([dataset444, dataset111])

                                #print(len(dataset444))
                                #print(len(dataset555))


                            a+=1


                        #print(dataset444)
                        #print(loopdataweekend[0])


    ################weekend data
                        a = 0

                        if len(loopdataweekend) == 0:
                            print('')
                            dataset4444 = []
                        else:

                            dataset4444 = loopdataweekend[0]

                        while a < len(loopdataweekend):

                            dataset1111 = loopdataweekend[a]

                            #print(len(dataset1111))

                            #print(dataset1111[0])
                            #print(dataset4444[0])

                            if np.all(dataset1111 == dataset4444):
                                #print(np.all(dataset1111 == dataset4444))
                                dataset5555 = dataset4444

                            else:

                                dataset5555 = np.concatenate([dataset5555, dataset1111])
                                dataset4444 = np.concatenate([dataset4444, dataset1111])

                                #print(len(dataset4444))
                                #print(len(dataset5555))


                            a+=1


                        #print(dataset4444)
                        #print(len(looptimeaxisweekday))
                        #print(looptimeaxisweekday[3])



                                ##########weekday timeaxis
                        a = 0

                        if len(looptimeaxisweekday) == 0:
                            print('')
                            timeaxis444 = []
                        else:

                            timeaxis444 = looptimeaxisweekday[0]

                        while a < len(looptimeaxisweekday):

                            timeaxis111 = looptimeaxisweekday[a]

                            #print(len(timeaxis111))

                            #print(timeaxis111[0])
                            #print(timeaxis444[0])
                            #print(a)

                            if timeaxis111[0] == timeaxis444[0]:
                                timeaxis555 = timeaxis444

                            else:

                                timeaxis555 = timeaxis555 + timeaxis111
                                timeaxis444 = timeaxis444 + timeaxis111
                                

                                #print(len(timeaxis444))
                                #print(len(timeaxis555))


                            a+=1


                        #print(timeaxis444)
                        #print(looptimeaxisweekend[0][0])


    ################weekend timeaxis
                        a = 0

                        if len(looptimeaxisweekend) == 0:
                            print('')
                            timeaxis4444 = []
                        else:

                            timeaxis4444 = looptimeaxisweekend[0]

                        while a < len(looptimeaxisweekend):

                            timeaxis1111 = looptimeaxisweekend[a]

                            #print(len(timeaxis1111))

                            #print(timeaxis1111[0])
                            #print(timeaxis4444[0])

                            if timeaxis1111[0] == timeaxis4444[0]:
                                timeaxis5555 = timeaxis4444

                            else:

                                #timeaxis4444 = np.concatenate([timeaxis4444, timeaxis1111])
                                timeaxis5555 = timeaxis5555 + timeaxis1111
                                timeaxis4444 = timeaxis4444 + timeaxis1111

                                #print(len(timeaxis4444))
                                #print(len(timeaxis5555))


                            a+=1


                        #print(timeaxis4444)

                        #print(len(timeaxis444))
                        #print(len(dataset444))

                        #print(len(timeaxis4444))
                        #print(len(dataset4444))



                        x10fweekday = pd.DataFrame(timeaxis444, columns=['time'])
                        x10fweekday['data'] = dataset444

                        labelsweekday = x10fweekday['time']

                        valuesweekday = x10fweekday['data']

                        valuesweekday = np.array(valuesweekday)

                        #print(labelsweekday)
                        #print(valuesweekday)



                        

                        x10fweekend = pd.DataFrame(timeaxis4444, columns=['time'])
                        x10fweekend['data'] = dataset4444

                        labelsweekend = x10fweekend['time']

                        valuesweekend = x10fweekend['data']

                        valuesweekend = np.array(valuesweekend)

                        #print(labelsweekend)
                        #print(valuesweekend)

                        weekendlabeldateday = []
                        weekdaylabeldateday = []



                        if len(labelsweekday) == 0:
                            print('')

                        else:
                            

                            a = 0
                            
                            X22 = 0
                            X33 = []
                            X777 = []
                            X778 = []
                            X779 = []
                            X77 = []


                            while a < len(labelsweekday):
                                X22 = labelsweekday[a]
                                X22 = X22.replace('[', '')
                                X22 = X22.replace(']', '')
                                X22 = X22.replace("'", "")
                                X22 = X22.replace(":", " ")
                                X22 = X22.replace("-", " ")
                                X22 = X22.replace("/", " ")
                                X22=X22.split()
                                X225 = X22[-3:-1]

                                X771 = X22[0]
                                X772 = X22[1]
                                X773 = X22[2]
                                
                                X777.append(X771)
                                X778.append(X772)
                                X779.append(X773)
                                
                                X33.append(X225)

                                weekdayyear = int(X22[0])
                                weekdaymonth = int(X22[1])
                                weekdayday = int(X22[2])

                                weekdaylabeldate = datetime.datetime(weekdayyear, weekdaymonth, weekdayday)

                                weekdaylabeldateday.append(weekdaylabeldate.weekday())
                                
                                a+=1

                            X44 = np.array(X33)



                        if len(valuesweekend) == 0:
                            print('')

                        else:



                            a = 0
                            
                            XX22 = 0
                            XX33 = []
                            XX777 = []
                            XX778 = []
                            XX779 = []
                            XX77 = []


                            while a < len(labelsweekend):
                                XX22 = labelsweekend[a]
                                XX22 = XX22.replace('[', '')
                                XX22 = XX22.replace(']', '')
                                XX22 = XX22.replace("'", "")
                                XX22 = XX22.replace(":", " ")
                                XX22 = XX22.replace("-", " ")
                                XX22 = XX22.replace("/", " ")
                                XX22=XX22.split()
                                XX225 = XX22[-3:-1]

                                XX771 = XX22[0]
                                XX772 = XX22[1]
                                XX773 = XX22[2]
                                
                                XX777.append(XX771)
                                XX778.append(XX772)
                                XX779.append(XX773)
                                
                                XX33.append(XX225)

                                weekendyear = int(XX22[0])
                                weekendmonth = int(XX22[1])
                                weekendday = int(XX22[2])

                                weekendlabeldate = datetime.datetime(weekendyear, weekendmonth, weekendday)

                                weekendlabeldateday.append(weekendlabeldate.weekday())

                                
                                a+=1

                            XX44 = np.array(XX33)


                        #print(X44)
                        #print(XX44)


                        #print(len(weekdaylabeldateday))
                        #print(weekdaylabeldateday)

                        #print(len(valuesweekday))
                        #print(valuesweekday)


                        a = 25

                        weekdayvaluesavg = []
                        weekdaylabelsavg = []
                        weekdaypredavg = []

                        while a < len(weekdaylabeldateday):
                            a1 = int(valuesweekday[a])
                            a2 = int(valuesweekday[a-1])
                            a3 = int(valuesweekday[a-2])
                            a4 = int(valuesweekday[a-3])
                            a5 = int(valuesweekday[a-4])
                            a6 = int(valuesweekday[a-5])
                            a7 = int(valuesweekday[a-6])
                            a8 = int(valuesweekday[a-7])
                            a9 = int(valuesweekday[a-8])
                            a10 = int(valuesweekday[a-9])
                            a11 = int(valuesweekday[a-10])
                            a12 = int(valuesweekday[a-11])
                            a13 = int(valuesweekday[a-12])
                            a14 = int(valuesweekday[a-13])
                            a15 = int(valuesweekday[a-14])
                            a16 = int(valuesweekday[a-15])
                            a17 = int(valuesweekday[a-16])
                            a18 = int(valuesweekday[a-17])
                            a19 = int(valuesweekday[a-18])
                            a20 = int(valuesweekday[a-19])
                            a21 = int(valuesweekday[a-20])
                            a22 = int(valuesweekday[a-21])
                            a23 = int(valuesweekday[a-22])
                            a24 = int(valuesweekday[a-23])
                            a25 = int(valuesweekday[a-24])
                            a26 = int(valuesweekday[a-25])

                            #print(a4)

                            

                            aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                            

                            #print(aavg)

                            if weekdaylabeldateday[a] == 5:

                                weekdayvaluesavg.append(aavg)

                                weekdaylabelsavg.append(labelsweekday[a])

                                weekdaypredavg.append(X33[a])

                                a = a + 26

                            else:

                                weekdayvaluesavg.append(aavg)

                                weekdaylabelsavg.append(labelsweekday[a])

                                weekdaypredavg.append(X33[a])

                                a +=1



                        print(len(weekdaylabeldateday))
                        print(len(weekdayvaluesavg))
                        print(len(weekdaylabelsavg))



                        print(len(weekendlabeldateday))
                        #print(weekendlabeldateday)

                        print(len(valuesweekend))
                        #print(valuesweekend)

                            

                        a = 25

                        weekendvaluesavg = []
                        weekendlabelsavg = []
                        weekendpredavg = []

                        while a < len(weekendlabeldateday):
                            a1 = int(valuesweekend[a])
                            a2 = int(valuesweekend[a-1])
                            a3 = int(valuesweekend[a-2])
                            a4 = int(valuesweekend[a-3])
                            a5 = int(valuesweekend[a-4])
                            a6 = int(valuesweekend[a-5])
                            a7 = int(valuesweekend[a-6])
                            a8 = int(valuesweekend[a-7])
                            a9 = int(valuesweekend[a-8])
                            a10 = int(valuesweekend[a-9])
                            a11 = int(valuesweekend[a-10])
                            a12 = int(valuesweekend[a-11])
                            a13 = int(valuesweekend[a-12])
                            a14 = int(valuesweekend[a-13])
                            a15 = int(valuesweekend[a-14])
                            a16 = int(valuesweekend[a-15])
                            a17 = int(valuesweekend[a-16])
                            a18 = int(valuesweekend[a-17])
                            a19 = int(valuesweekend[a-18])
                            a20 = int(valuesweekend[a-19])
                            a21 = int(valuesweekend[a-20])
                            a22 = int(valuesweekend[a-21])
                            a23 = int(valuesweekend[a-22])
                            a24 = int(valuesweekend[a-23])
                            a25 = int(valuesweekend[a-24])
                            a26 = int(valuesweekend[a-25])

                            #print(a4)

                            

                            aavg = (a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8 + a9 +a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 +a18 + a19 + a20 + a21 + a22 +a23 + a24 + a25 + a26)/26

                            #print(aavg)

                            if weekendlabeldateday[a] == 0:

                                weekendvaluesavg.append(aavg)

                                weekendlabelsavg.append(labelsweekend[a])

                                weekendpredavg.append(XX33[a])

                                a = a + 26

                            else:

                                weekendvaluesavg.append(aavg)

                                weekendlabelsavg.append(labelsweekend[a])

                                weekendpredavg.append(XX33[a])

                                a +=1



                        weekdaypredavg = np.array(weekdaypredavg)
                        weekendpredavg = np.array(weekendpredavg)

                        print(len(weekendlabeldateday))
                        print(len(weekendvaluesavg))
                        print(len(weekendlabelsavg))

                        print(weekendlabeldateday)
                        print(weekendvaluesavg)
                        print(weekendlabelsavg)


                        #print(X44)
                        #print(XX44)

                        print(len(weekdaypredavg))
                        print(len(weekendpredavg))







                        regr = make_pipeline(PolynomialFeatures(9),LinearRegression())



                        if len(valuesweekday) == 0:
                            print('')
                            predvaluweekday = []
                        elif len(labels5) == 0:
                            print('')
                            predvaluweekday = []

                        else:

                            regr.fit(X44, valuesweekday)
                            #regr.fit(weekdaypredavg, weekdayvaluesavg)
                            predictedweekday = regr.predict(X7)


                            #print(predictedweekday)

                            #print(mean_squared_error(values5, predictedweekday))
                            #print(r2_score(values5, predictedweekday))
                           
                            i = len(predictedweekday)
                            k = 0
                            predvaluweekday = []
                            while k < i:
                                predvalweekday = predictedweekday[k]
                                predvaluweekday.append(predvalweekday)
                                k += 1
                            #print(predvaluweekday)

                            #print(len(predvaluweekday))




                        regrf = make_pipeline(PolynomialFeatures(9),LinearRegression())



                        if len(valuesweekend) == 0:
                            print('')
                            predvaluweekend = []
                        elif len(labels5) == 0:
                            print('')
                            predvaluweekend = []

                        else:

                            regrf.fit(XX44, valuesweekend)
                            #regrf.fit(weekendpredavg, weekendvaluesavg)
                            predictedweekend = regrf.predict(X7)


                            #print(predictedweekend)

                            #print(mean_squared_error(values5, predicted))
                            #print(r2_score(values5, predicted))
                           
                            i = len(predictedweekend)
                            k = 0
                            predvaluweekend = []
                            while k < i:
                                predvalweekend = predictedweekend[k]
                                predvaluweekend.append(predvalweekend)
                                k += 1
                            #print(predvaluweekend)

                            #print(len(predvaluweekend))

                            print(predvaluweekday)
                            print(predvaluweekend)


                        values = values5
                        labels = labels5
                            
                        


                        

                        
                        
                        

                        ####################################


                        i = len(values)
                        k = 0
                        valu = []
                        while k < i:
                            val = values[k]
                            valu.append(val)
                            k += 1
                        #print(valu)

                        z = len(labels)
                        y = 0
                        labe = []
                        while y < z:
                            lab = labels[y]
                            labe.append(lab)
                            y += 1
                        #print(labe)

                        a = 0
                        X2 = 0
                   

                        X227 = []
                        X228 = []
                        X229 = []
                        X22 = []
                        X2727 = []

                        while a < len(labels):
                            X2 = str(labels[a])
                            X2 = X2.replace('[', '')
                            X2 = X2.replace(']', '')
                            X2 = X2.replace("'", "")
                            X2 = X2.replace(":", " ")
                            X2 = X2.replace("-", " ")
                            X2 = X2.replace("/", " ")
                            X2=X2.split()
                            X25 = X2[-3:-1]

                            X221 = X2[0]
                            X222 = X2[1]
                            X223 = X2[2]
                            
                            X227.append(X221)
                            X228.append(X222)
                            X229.append(X223)
                            a+=1


                        #print(X227[0])
                        #print(X228[0])
                        #print(X229[0])



                        a = 0

                        while a < len(X227):
                            

                            X2227 = int(X227[a])
                            X2228 = int(X228[a])
                            X2229 = int(X229[a])
                            
                            X22222 = datetime.date(X2227, X2228, X2229)

                            X22222 = X22222.weekday()

                            X2727.append(X22222)

                            a+=1
                            
                        #print(X77)
                        #print(X2727)


                        a=0

                        weekendvalu = []
                        weekdayvalu = []

                        while a < len(valu):
                            if X2727[a] == 5:
                                weekendvalu.append(valu[a])

                            elif X2727[a] == 6:
                                weekendvalu.append(valu[a])

                            else:
                                weekdayvalu.append(valu[a])
                            a+=1
                            

                        weekdaystddev = np.std(weekdayvalu)
                        weekendstddev = np.std(weekendvalu)

                        print(weekdayvalu)
                        print(weekendvalu)
                        print(weekdaystddev)
                        print(weekendstddev)
                        

                        if len(valuesweekday) == 0:
                            print('hi')


                            avgg = np.mean(valu)
                            medavgg = np.median(valu)
                            stddev = np.std(valu)
                            #print(avgg)
                            #print(medavgg)
                            #print(stddev)

                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                            z = avgg + (stddev)
                            zz = avgg - (stddev)

                            while v < len(valu):
                                if valu[v] > z:
                                    #print('bigger')
                                    outliers.append(valu[v])
                                    if v == 0:
                                        print('')
                                    else:
                                        outliers[v-1] = valu[v-1]
                                    
                                
                                    valus.append('f')

                                elif valu[v] < zz:
                                    #print('smaller')
                                    outliers.append(valu[v])
                                    if v == 0:
                                        print('')
                                    else:
                                        outliers[v-1] = valu[v-1]
                                    
                                
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                    
                                    if v == 0:
                                        print('')
                                    else:
                                        valus[v-1] = valu[v-1]

                                        
                                    
                                v += 1

                        elif len(predvaluweekend) == 0:

                            stddev = np.std(valu)
                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                                
                            while v < len(valu):
                                if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                    #print('bigger')
                                    #print((predvalweekdayu[v] + stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                    #print('smaller')
                                    #print((predvalweekdayu[v] - stddev))
                                    outliers.append(valu[v])
                                    
                                        
                                    
                                    valus.append('f')

                                else:
                                    #print('is not')
                                    outliers.append('f')
                                    valus.append(valu[v])
                                v +=1

                        else:
                            
                            
                                
                            stddev = np.std(valu)
                            v = 0
                            u = len(line_values)
                            outliers = []
                            valus = []
                                

                            while v < len(valu):
                                if X2727[v] == 6:

                                    if valu[v] > (predvaluweekend[v] + weekendstddev):
                                        #print('bigger weekend')
                                        #print((predvaluweekend[v] + stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                        #print('smaller weekend')
                                        #print((predvaluweekend[v] - stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not weekend')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1

                                elif X2727[v] == 5:

                                    if valu[v] > (predvaluweekend[v] + weekendstddev):
                                        #print('bigger weekend')
                                        #print((predvaluweekend[v] + stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekend[v] - weekendstddev):
                                        #print('smaller weekend')
                                        #print((predvaluweekend[v] - stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not weekend')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1


                                else:
                                    if valu[v] > (predvaluweekday[v] + weekdaystddev):
                                        #print('bigger')
                                        #print((predvalweekdayu[v] + stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    elif valu[v] < (predvaluweekday[v] - weekdaystddev):
                                        #print('smaller')
                                        #print((predvalweekdayu[v] - stddev))
                                        outliers.append(valu[v])
                                        
                                            
                                        
                                        valus.append('f')

                                    else:
                                        #print('is not')
                                        outliers.append('f')
                                        valus.append(valu[v])
                                            
                                        
                                    v += 1









                        
                            

                        oldoldvalus = oldoldvalusog



                        print(final_meter_id4)

                        final_meter_id = str(final_meter_id4).title()
                        

                    

                        print('final_meter_id')
                        print(final_meter_id)

                        labet = []

                        line_labels = pd.to_datetime(line_labels, format = '%Y-%m-%d %H:%M:%S')

                        z = len(line_labels)
                        y = 0
                        labe = []
                        while y < z:
                            lab = line_labels[y]
                            labet.append(lab)
                            y += 1
                        print(labet)

                        
                        residualsklearndfvalues = pd.DataFrame({'time':line_labels, 'data':line_values})
                        residualsklearndfoutliers = pd.DataFrame({'time':line_labels, 'outliers':outliers})

                        
                        residualsklearndfvalues = residualsklearndfvalues.set_index('time')

                        residualsklearndfvalues.index = residualsklearndfvalues.index.map(lambda x: x.replace(second=0))
                        
                        print(residualsklearndfvalues['data'].head(30))

                        residualsklearndfvalues = residualsklearndfvalues[~residualsklearndfvalues.index.duplicated()]

                        residualsklearndfvalues = residualsklearndfvalues.resample('T').asfreq()

                        print(residualsklearndfvalues.head(75))

                        testarr = np.array(residualsklearndfvalues['data'])

                        z = len(testarr)
                        y = 0
                        valtest = []
                        while y < z:
                            val = testarr[y]
                            if np.isnan(val) == True:
                                valtest.append('f')
                            else:
                                
                                valtest.append(int(val))
                            y += 1
                        testarrvalus = valtest

                        print(testarrvalus)
                        print(len(testarrvalus))

                        testarrlabe = residualsklearndfvalues.reset_index()
                        testarrlabe = pd.to_datetime(testarrlabe['time'], format = '%Y-%m-%d %H:%M')

                        z = len(testarrlabe)
                        y = 0
                        labetest = []
                        while y < z:
                            lab = testarrlabe[y]
                            labetest.append(lab)
                            y += 1
                        testarrlabe = labetest
                        #print(testarrlabe)
                        #print(len(testarrlabe))
                        #print(len(line_values))

                        line_values = testarrvalus
                        line_labels = testarrlabe



                        residualsklearndfoutliers = residualsklearndfoutliers.set_index('time')
                        residualsklearndfoutliers.index = residualsklearndfoutliers.index.map(lambda x: x.replace(second=0))


                        print(residualsklearndfoutliers[160:220])
                        residualsklearndfoutliers = residualsklearndfoutliers[~residualsklearndfoutliers.index.duplicated()]

                        residualsklearndfoutliers = residualsklearndfoutliers.resample('T').asfreq()

                        print(residualsklearndfoutliers[880:940])

                        residualsklearndfoutliers = residualsklearndfoutliers.fillna('f')

                        print(residualsklearndfoutliers[880:940])


                        testarroutliers = np.array(residualsklearndfoutliers['outliers'])

                        print('outliers')
                        print(outliers)
                        print(testarroutliers[160:220])

                        z = len(testarroutliers)
                        y = 0
                        outtest = []
                        while y < z:
                            out = testarroutliers[y]
                            if out == 'f':
                                outtest.append(out)
                            
                            else:
                                
                                outtest.append(int(out))
                            y += 1
                        testarroutliers = outtest

                        print(testarroutliers)
                        print(len(testarroutliers))

                        line_outliers = testarroutliers
                        outliers = testarroutliers

                        print(line_outliers)
                        #print(line_labels)
                        print(line_values)
                        print(len(oldlabe))
                        #print(len(line_labels))
                        print(len(line_values))

                        print(line_labels[0:100])
                        print(oldlabe[0:100])

                        line_valuestemp = []
                        oldoldvalustemp= []
                        line_labelstemp= []
                        outlierstemp= []
                        oldoldoutlierstemp= []
                        oldoldlabetemp = []

                        if len(line_labels) != len(oldlabe):
                            a = 0
                            bb=0
                            cc=0
                            if len(line_labels) > len(oldoldlabe):
                                
                                while a < len(line_labels):
                                    b = str(line_labels[bb])
                                    c = str(oldoldlabe[cc])

                                    #print('1')

                                    print(b)
                                    print(c)
                                    if b == c:
                                        line_valuestemp.append(line_values[bb])
                                        oldoldvalustemp.append(oldoldvalus[cc])
                                        line_labelstemp.append(line_labels[bb])
                                        outlierstemp.append(outliers[bb])
                                        oldoldoutlierstemp.append(oldoldoutliers[cc])
                                        oldoldlabetemp.append(oldoldlabe[cc])
                                        
                                        bb+=1
                                        cc+=1

                                        if cc == len(oldlabe) - 1:
                                            a = len(line_labels) + 1
                                        else:

                                            a+=1
                                    else:
                                        cc+=1
                                        a+=1
                  

                            else:
                                while a < len(oldoldlabe):
                                    b = str(line_labels[bb])
                                    c = str(oldoldlabe[cc])

                                    #print(b)
                                    #print(c)
                                    if b == c:
                                        line_valuestemp.append(line_values[bb])
                                        oldoldvalustemp.append(oldoldvalus[cc])
                                        line_labelstemp.append(line_labels[bb])
                                        outlierstemp.append(outliers[bb])
                                        oldoldoutlierstemp.append(oldoldoutliers[cc])

                                        bb+=1
                                        cc+=1

                                        if bb == len(line_labels) - 1:
                                            a = len(oldlabe) + 1
                                        else:

                                            a+=1
                                    else:
                                        cc+=1
                                        a+=1

                            line_values = line_valuestemp
                            oldoldvalus = oldoldvalustemp
                            line_labels = line_labelstemp
                            outliers = outlierstemp
                            oldoldoutliers = oldoldoutlierstemp

                            print(len(line_valuestemp))



                        
                    







                    

                    print(title)
                    print(line_labels)
                    print(line_values)
                    
                    print(oldoldtitle)
                    print(oldoldoutliers)
                    print(oldoldvalus)

                    legend = title
                    
                    
                    print(b)
                    print(len(b))

                    print(rpermenant)
                    print(max(rarray))

                    print(len(line_labels))
                    print(len(line_values))
                    print(len(oldoldoutliers))
                    print(len(oldoldvalus))


                    

                    title = title.replace(':', '')
                    title = 'Closest Correlation: ' + title + '. Correlation value, r, ' + str(round(rpermenant, 2))



                


                
                
                oldoldylabelarray = str(oldoldtitle).split()
                if oldoldylabelarray[-1] == 'Count':
                    oldoldylabel = str(oldoldylabelarray[-3]) + ' ' + str(oldoldylabelarray[-2]) + ' ' + str(oldoldylabelarray[-1])


                else:
                    oldoldylabel = oldoldylabelarray[-1]
        
                a = 0

                value_mintemp = 0
                value_maxtemp = 1


                while a < len(line_values):
                    value_mintemp = line_values[a]
                    value_maxtemp = line_values[a]

                    if line_values[a] == 'f':
                        a+=1
                    else:
                        a = len(line_values) +1

                a = 0

                while a < len(line_values):
                    b = line_values[a]
                    

                    if b == 'f':
                        a+=1
                    else:
                        if b < value_mintemp:
                            value_mintemp = b
                            a+=1
                            
                        elif b > value_maxtemp:
                            value_maxtemp = b
                            a+=1

                        else:
                            a+=1
                    

                value_min = value_mintemp
                value_max = value_maxtemp
                
                print(line_labels)
                print(oldoldoutliers)
                print(outliers)
                print(len(oldoldvalus))
                print(oldoldvalus)
                print(oldoldtitle)
                print(oldoldvalue_min)
                print(oldoldvalue_max)
                print(title)
                print(value_min)
                print(value_max)
                print(len(line_values))
                print(line_values)
                print(residualstartdate)
                print(residualenddate)
                print(legend)
                print(ylabel)
                print(oldoldylabel)

                if value_max == 0:
                    value_max = 1


                

                

                a = 0

                
                oldoldvalustemp = []

                e = np.nan
                
                while a < len(oldoldvalus):
                    d = oldoldvalus[a]
                    #print(d)
                    dd = np.nan
                    if d == 'f':
                        oldoldvalustemp.append('f')
                    elif d == dd:
                        #print('1')
                        oldoldvalustemp.append('f')
                    else:
                        #print('2')
                        oldoldvalustemp.append(int(d))
                        
                    a +=1


                a = 0

                
                valustemp = []

                e = np.nan
                
                while a < len(line_values):
                    d = line_values[a]
                    if d == 'f':
                        valustemp.append('f')
                    elif np.isnan(d) == True:
                        valustemp.append('f')
                    else:
                        valustemp.append(int(d))
                        
                    a +=1
                print(len(outliers))
                print(outliers)

                print(oldoldvalustemp)
                oldoldvalus = oldoldvalustemp

                print(line_values)

                print(valustemp)
                line_values = valustemp

                print(line_values)


                a = 0

                value_mintemp = 0
                value_maxtemp = 1


                while a < len(line_values):
                    value_mintemp = line_values[a]
                    value_maxtemp = line_values[a]

                    if line_values[a] == 'f':
                        a+=1
                    else:
                        a = len(line_values) +1

                a = 0

                while a < len(line_values):
                    b = line_values[a]
                    

                    if b == 'f':
                        a+=1
                    else:
                        if b < value_mintemp:
                            value_mintemp = b
                            a+=1
                            
                        elif b > value_maxtemp:
                            value_maxtemp = b
                            a+=1

                        else:
                            a+=1
                    

                value_min = value_mintemp
                value_max = value_maxtemp

                if value_max == 0:
                    value_max = 1



                a = 0

                oldoldvalue_mintemp = 0
                oldoldvalue_maxtemp = 1


                while a < len(oldoldvalus):
                    oldoldvalue_mintemp = oldoldvalus[a]
                    oldoldvalue_maxtemp = oldoldvalus[a]

                    if oldoldvalus[a] == 'f':
                        a+=1
                    else:
                        a = len(oldoldvalus) +1

                a = 0

                while a < len(oldoldvalus):
                    b = oldoldvalus[a]
                    

                    if b == 'f':
                        a+=1
                    else:
                        if b < oldoldvalue_mintemp:
                            oldoldvalue_mintemp = b
                            a+=1
                            
                        elif b > oldoldvalue_maxtemp:
                            oldoldvalue_maxtemp = b
                            a+=1

                        else:
                            a+=1
                    

                oldoldvalue_min = oldoldvalue_mintemp
                oldoldvalue_max = oldoldvalue_maxtemp

                if oldoldvalue_max == 0:
                    oldoldvalue_max = 1
                
                print(line_labels)
                print(oldoldoutliers)
                print(outliers)
                print(len(oldoldvalus))
                print(oldoldvalus)
                print(oldoldtitle)
                print(oldoldvalue_min)
                print(oldoldvalue_max)
                print(title)
                print(value_min)
                print(value_max)
                print(len(line_values))
                print(line_values)
                print(residualstartdate)
                print(residualenddate)
                print(legend)
                print(ylabel)
                print(oldoldylabel)

                print(len(line_labels))
                print(len(line_values))
                print(len(outliers))
                
                


                residualsklearndfvalues = pd.DataFrame({'timestamp':line_labels, legend:line_values})
                residualsklearndfoutliers = pd.DataFrame({'timestamp':line_labels, legend:outliers})
                residualdf = pd.DataFrame({'timestamp':line_labels, legend:line_values})

                residualsklearndfvalues2 = pd.DataFrame({'timestamp':line_labels, oldoldtitle:oldoldvalus})
                residualsklearndfoutliers2 = pd.DataFrame({'timestamp':line_labels, oldoldtitle:oldoldoutliers})
                residualdf2 = pd.DataFrame({'timestamp':line_labels, oldoldtitle:oldoldvalus})


                
                residualsklearndfvalues.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                residualsklearndfoutliers.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers.csv")
                residualsklearndfvalues2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                #residualsklearndfvalues2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes3.csv")
                residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers2.csv")
                residualsklearndfoutliers2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualsklearndfoutliers3.csv")



                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes.csv")
                #residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframes2.csv")
                residualdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust.csv")
                residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust2.csv")
                residualdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualdataframesadjust3.csv")

                residualaxisvaluesdf = pd.DataFrame({'min':[value_min], 'max':[value_max]}) #newest
                residualaxisvaluesdf2 = pd.DataFrame({'min':[oldoldvalue_min], 'max':[oldoldvalue_max]}) #newest
            


                residualaxisvaluesdf.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues.csv")
                residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues2.csv")
                residualaxisvaluesdf2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/Residualaxisvalues3.csv")

                print(startdate)
                print(enddate)
                enddate = np.array(line_labels)
                
                print(enddate)


                residualstartdate = str(startdate).replace(' ', 'T')
                residualenddate = str(enddate[-1]).replace(' ', 'T')

                print(final_meter_id)
                print(meter_id2)

                residualaxismeterid = pd.DataFrame({'meter_id':[final_meter_id]})
                residualaxismeterid2 = pd.DataFrame({'meter_id':[meter_id2]})
                
                residualaxismeterid.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid2.csv")
                residualaxismeterid2.to_csv("/Users/Luke/ENGR301/For Cloud and GitHub/residualaxismeterid3.csv")

                
                return render_template('view 19 2 lines.html', oldlabels = line_labels, oldoutlier=oldoldoutliers, outlier=outliers, oldvalues=oldoldvalus, oldtitle=oldoldtitle, oldmin=oldoldvalue_min, oldmax=oldoldvalue_max, title=title, min=value_min, max=value_max, labels=line_labels, values=line_values, start=residualstartdate, end=residualenddate, legend=legend, ylabel=ylabel, oldylabel=oldoldylabel)

            



            
    else:
        return render_template('view 19 index.html')
if __name__ == "__main__":
    app.run(debug=True)
 
 
